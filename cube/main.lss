
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000449a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000449a  0000454e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  00800064  00800064  00004552  2**0
                  ALLOC
  3 .eeprom       000001f7  00810000  00810000  00004552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000a0  00000000  00000000  00004749  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000061e  00000000  00000000  000047e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028d3  00000000  00000000  00004e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078f  00000000  00000000  000076da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002848  00000000  00000000  00007e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000550  00000000  00000000  0000a6b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ff  00000000  00000000  0000ac04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033b0  00000000  00000000  0000b303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_4>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	8b 1f       	adc	r24, r27
      56:	92 1f       	adc	r25, r18
      58:	99 1f       	adc	r25, r25
      5a:	a0 1f       	adc	r26, r16
      5c:	a7 1f       	adc	r26, r23
      5e:	ae 1f       	adc	r26, r30
      60:	b5 1f       	adc	r27, r21
      62:	bc 1f       	adc	r27, r28
      64:	c3 1f       	adc	r28, r19
      66:	ca 1f       	adc	r28, r26
      68:	d1 1f       	adc	r29, r17
      6a:	da 1f       	adc	r29, r26
      6c:	f3 1f       	adc	r31, r19
      6e:	fa 1f       	adc	r31, r26
      70:	03 20       	and	r0, r3
      72:	2f 20       	and	r2, r15
      74:	57 20       	and	r5, r7
      76:	7b 20       	and	r7, r11
      78:	80 20       	and	r8, r0
      7a:	c9 20       	and	r12, r9
      7c:	18 21       	and	r17, r8
      7e:	1f 21       	and	r17, r15

00000080 <paths>:
      80:	07 06 05 04 03 02 01 00 10 20 30 40 50 60 70 71     ......... 0@P`pq
      90:	72 73 74 75 76 77 67 57 47 37 27 17 04 03 12 21     rstuvwgWG7'....!
      a0:	30 40 51 62 73 74 65 56 47 37 26 15                 0@QbsteVG7&.

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf e5       	ldi	r28, 0x5F	; 95
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	10 e0       	ldi	r17, 0x00	; 0
      ba:	a0 e6       	ldi	r26, 0x60	; 96
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	ea e9       	ldi	r30, 0x9A	; 154
      c0:	f4 e4       	ldi	r31, 0x44	; 68
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <.do_copy_data_start>

000000c4 <.do_copy_data_loop>:
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0

000000c8 <.do_copy_data_start>:
      c8:	a4 36       	cpi	r26, 0x64	; 100
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <.do_copy_data_loop>

000000ce <__do_clear_bss>:
      ce:	10 e0       	ldi	r17, 0x00	; 0
      d0:	a4 e6       	ldi	r26, 0x64	; 100
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a6 3e       	cpi	r26, 0xE6	; 230
      da:	b1 07       	cpc	r27, r17
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
      e2:	0c 94 4b 22 	jmp	0x4496	; 0x4496 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <__vector_4>:
 * 6) Increment the current_layer variable, so the next layer is
 *    drawn the next time this function runs.
*/

ISR(TIMER2_COMP_vect)
{
      ea:	1f 92       	push	r1
      ec:	0f 92       	push	r0
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	0f 92       	push	r0
      f2:	11 24       	eor	r1, r1
      f4:	2f 93       	push	r18
      f6:	3f 93       	push	r19
      f8:	8f 93       	push	r24
      fa:	9f 93       	push	r25
      fc:	ef 93       	push	r30
      fe:	ff 93       	push	r31
	int i;

	LAYER_SELECT = 0x00; // Turn all cathode layers off. (all transistors off)
     100:	15 ba       	out	0x15, r1	; 21
	OE_PORT |= OE_MASK; // Set OE high, disabling all outputs on latch array
     102:	c3 9a       	sbi	0x18, 3	; 24
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e0       	ldi	r19, 0x00	; 0
	// Loop through all 8 bytes of data in the current layer
	// and latch it onto the cube.
	for (i = 0; i < 8; i++)
	{
		// Set the data on the data-bus of the latch array.
		PORTA = cube[current_layer][i];
     108:	e0 91 e5 00 	lds	r30, 0x00E5
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	83 e0       	ldi	r24, 0x03	; 3
     110:	ee 0f       	add	r30, r30
     112:	ff 1f       	adc	r31, r31
     114:	8a 95       	dec	r24
     116:	e1 f7       	brne	.-8      	; 0x110 <__vector_4+0x26>
     118:	e2 0f       	add	r30, r18
     11a:	f3 1f       	adc	r31, r19
     11c:	eb 55       	subi	r30, 0x5B	; 91
     11e:	ff 4f       	sbci	r31, 0xFF	; 255
     120:	80 81       	ld	r24, Z
     122:	8b bb       	out	0x1b, r24	; 27
		// Increment the latch address chip, 74HC138, to create
		// a rising edge (LOW to HIGH) on the current latch.
		LATCH_ADDR = (LATCH_ADDR & LATCH_MASK_INV) | (LATCH_MASK & (i+1));
     124:	98 b3       	in	r25, 0x18	; 24
     126:	82 2f       	mov	r24, r18
     128:	8f 5f       	subi	r24, 0xFF	; 255
     12a:	87 70       	andi	r24, 0x07	; 7
     12c:	98 7f       	andi	r25, 0xF8	; 248
     12e:	89 2b       	or	r24, r25
     130:	88 bb       	out	0x18, r24	; 24
	LAYER_SELECT = 0x00; // Turn all cathode layers off. (all transistors off)
	OE_PORT |= OE_MASK; // Set OE high, disabling all outputs on latch array

	// Loop through all 8 bytes of data in the current layer
	// and latch it onto the cube.
	for (i = 0; i < 8; i++)
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	28 30       	cpi	r18, 0x08	; 8
     138:	31 05       	cpc	r19, r1
     13a:	31 f7       	brne	.-52     	; 0x108 <__vector_4+0x1e>
		// Increment the latch address chip, 74HC138, to create
		// a rising edge (LOW to HIGH) on the current latch.
		LATCH_ADDR = (LATCH_ADDR & LATCH_MASK_INV) | (LATCH_MASK & (i+1));
	}

	OE_PORT &= ~OE_MASK; // Set OE low, enabling outputs on the latch array
     13c:	c3 98       	cbi	0x18, 3	; 24
	LAYER_SELECT = (0x01 << current_layer); // Transistor ON for current layer
     13e:	20 91 e5 00 	lds	r18, 0x00E5
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	02 c0       	rjmp	.+4      	; 0x14c <__vector_4+0x62>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	2a 95       	dec	r18
     14e:	e2 f7       	brpl	.-8      	; 0x148 <__vector_4+0x5e>
     150:	85 bb       	out	0x15, r24	; 21

	// Increment the curren_layer counter so that the next layer is
	// drawn the next time this function runs.
	current_layer++;
     152:	80 91 e5 00 	lds	r24, 0x00E5
     156:	8f 5f       	subi	r24, 0xFF	; 255
     158:	80 93 e5 00 	sts	0x00E5, r24
	// We want to count from 0-7, so set it to 0 when it reaches 8.
	if (current_layer == 8)
     15c:	80 91 e5 00 	lds	r24, 0x00E5
     160:	88 30       	cpi	r24, 0x08	; 8
     162:	11 f4       	brne	.+4      	; 0x168 <__vector_4+0x7e>
		current_layer = 0;
     164:	10 92 e5 00 	sts	0x00E5, r1
}
     168:	ff 91       	pop	r31
     16a:	ef 91       	pop	r30
     16c:	9f 91       	pop	r25
     16e:	8f 91       	pop	r24
     170:	3f 91       	pop	r19
     172:	2f 91       	pop	r18
     174:	0f 90       	pop	r0
     176:	0f be       	out	0x3f, r0	; 63
     178:	0f 90       	pop	r0
     17a:	1f 90       	pop	r1
     17c:	18 95       	reti

0000017e <ioinit>:


void ioinit (void)
{
	DDRA = 0xff;	// DATA bus output
     17e:	9f ef       	ldi	r25, 0xFF	; 255
     180:	9a bb       	out	0x1a, r25	; 26
	DDRB = 0xef;	// Button on B4
     182:	8f ee       	ldi	r24, 0xEF	; 239
     184:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;	// Layer select output
     186:	94 bb       	out	0x14, r25	; 20
	DDRD = 0xdf;	// Button on D5
     188:	8f ed       	ldi	r24, 0xDF	; 223
     18a:	81 bb       	out	0x11, r24	; 17
	
	
	PORTA = 0x00; // Set data bus off
     18c:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00; // Set layer select off
     18e:	15 ba       	out	0x15, r1	; 21
	PORTB = 0x10; // Enable pull up on button.
     190:	80 e1       	ldi	r24, 0x10	; 16
     192:	88 bb       	out	0x18, r24	; 24
	PORTD = 0x20; // Enable pull up on button.
     194:	80 e2       	ldi	r24, 0x20	; 32
     196:	82 bb       	out	0x12, r24	; 18

	// Timer 2
	// Frame buffer interrupt
	// 14745600/128/11 = 10472.72 interrupts per second
	// 10472.72/8 = 1309 frames per second
	OCR2 = 10; 	// interrupt at counter = 10
     198:	8a e0       	ldi	r24, 0x0A	; 10
     19a:	83 bd       	out	0x23, r24	; 35
    TCCR2 |= (1 << CS20) | (1 << CS22); // Prescaler = 128.
     19c:	85 b5       	in	r24, 0x25	; 37
     19e:	85 60       	ori	r24, 0x05	; 5
     1a0:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << WGM21); // CTC mode. Reset counter when OCR2 is reached.
     1a2:	85 b5       	in	r24, 0x25	; 37
     1a4:	88 60       	ori	r24, 0x08	; 8
     1a6:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;	// initial counter value = 0;
     1a8:	14 bc       	out	0x24, r1	; 36
	TIMSK |= (1 << OCIE2); // Enable CTC interrupt
     1aa:	89 b7       	in	r24, 0x39	; 57
     1ac:	80 68       	ori	r24, 0x80	; 128
     1ae:	89 bf       	out	0x39, r24	; 57



    // Initiate RS232
    // USART Baud rate is defined in MYUBRR
    UBRRH = MYUBRR >> 8;
     1b0:	10 bc       	out	0x20, r1	; 32
    UBRRL = MYUBRR;
     1b2:	87 e1       	ldi	r24, 0x17	; 23
     1b4:	89 b9       	out	0x09, r24	; 9
    // bit 7-6      sync/ascyn 00 = async,  01 = sync
    // bit 5-4      parity 00 = disabled
    // bit 3        stop bits 0 = 1 bit  1 = 2 bits
    // bit 2-1      frame length 11 = 8
    // bit 0        clock polarity = 0
    UCSRC  = 0b10000110;
     1b6:	86 e8       	ldi	r24, 0x86	; 134
     1b8:	80 bd       	out	0x20, r24	; 32
    // Enable RS232, tx and rx
    UCSRB = (1<<RXEN)|(1<<TXEN);
     1ba:	88 e1       	ldi	r24, 0x18	; 24
     1bc:	8a b9       	out	0x0a, r24	; 10
    UDR = 0x00; // send an empty byte to indicate powerup.
     1be:	1c b8       	out	0x0c, r1	; 12


}
     1c0:	08 95       	ret

000001c2 <rs232>:
	}
}

// Take input from a computer and load it onto the cube buffer
void rs232(void)
{
     1c2:	1f 93       	push	r17
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
	while (1)
	{
		// Switch state on red LED for debugging
		// Should switch state every time the code
		// is waiting for a byte to be received.
		LED_PORT ^= LED_RED;
     1cc:	14 e0       	ldi	r17, 0x04	; 4
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <rs232+0x16>
	}
}

// Take input from a computer and load it onto the cube buffer
void rs232(void)
{
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
	while (1)
	{
		// Switch state on red LED for debugging
		// Should switch state every time the code
		// is waiting for a byte to be received.
		LED_PORT ^= LED_RED;
     1d8:	82 b3       	in	r24, 0x12	; 18
     1da:	81 27       	eor	r24, r17
     1dc:	82 bb       	out	0x12, r24	; 18

		// Wait until a byte has been received
		while ( !(UCSRA & (1<<RXC)) );
     1de:	5f 9b       	sbis	0x0b, 7	; 11
     1e0:	fe cf       	rjmp	.-4      	; 0x1de <rs232+0x1c>

		// Load the received byte from rs232 into a buffer.
		tempval = UDR;
     1e2:	8c b1       	in	r24, 0x0c	; 12
     1e4:	90 e0       	ldi	r25, 0x00	; 0
		// are reset to 0. This way the x and y counters are
		// always the same on the computer and in the cube.
		// To send an 0xff byte, you have to send it twice!

		// Go into sync escape mode
		if (tempval == 0xff)
     1e6:	8f 3f       	cpi	r24, 0xFF	; 255
     1e8:	91 05       	cpc	r25, r1
     1ea:	31 f4       	brne	.+12     	; 0x1f8 <rs232+0x36>
		{
			// Wait for the next byte
			 while ( !(UCSRA & (1<<RXC)) );
     1ec:	5f 9b       	sbis	0x0b, 7	; 11
     1ee:	fe cf       	rjmp	.-4      	; 0x1ec <rs232+0x2a>
			 // Get the next byte
			 tempval = UDR;
     1f0:	8c b1       	in	r24, 0x0c	; 12
     1f2:	90 e0       	ldi	r25, 0x00	; 0

			 // Sync signal is received.
			 // Reset x and y counters to 0.
			 if (tempval == 0x00)
     1f4:	00 97       	sbiw	r24, 0x00	; 0
     1f6:	61 f3       	breq	.-40     	; 0x1d0 <rs232+0xe>
		}

        if (escape == 0)
        {
		// Load data into the current position in the buffer
		fb[x][y] = tempval;
     1f8:	fa 01       	movw	r30, r20
     1fa:	93 e0       	ldi	r25, 0x03	; 3
     1fc:	ee 0f       	add	r30, r30
     1fe:	ff 1f       	adc	r31, r31
     200:	9a 95       	dec	r25
     202:	e1 f7       	brne	.-8      	; 0x1fc <rs232+0x3a>
     204:	e2 0f       	add	r30, r18
     206:	f3 1f       	adc	r31, r19
     208:	eb 59       	subi	r30, 0x9B	; 155
     20a:	ff 4f       	sbci	r31, 0xFF	; 255
     20c:	80 83       	st	Z, r24

    		// Check if we have reached the limits of the buffer array.
    		if (y == 7)
     20e:	27 30       	cpi	r18, 0x07	; 7
     210:	31 05       	cpc	r19, r1
     212:	49 f4       	brne	.+18     	; 0x226 <rs232+0x64>
    		{
    			if (x == 7)
     214:	47 30       	cpi	r20, 0x07	; 7
     216:	51 05       	cpc	r21, r1
     218:	19 f4       	brne	.+6      	; 0x220 <rs232+0x5e>
    			{
    				// All data is loaded. Reset both counters
    				y = 0;
    				x = 0;
                    // Copy the data onto the cube.
    				tmp2cube();
     21a:	0e 94 4f 09 	call	0x129e	; 0x129e <tmp2cube>
     21e:	d8 cf       	rjmp	.-80     	; 0x1d0 <rs232+0xe>
    			} else
    			{
    				// A layer is loaded, reset y and increment x.
    				x++;
     220:	4f 5f       	subi	r20, 0xFF	; 255
     222:	5f 4f       	sbci	r21, 0xFF	; 255
     224:	d7 cf       	rjmp	.-82     	; 0x1d4 <rs232+0x12>
    				y = 0;
    			}
    		} else
    		{
    			// We are in the middle of loading a layer. increment y.
    			y++;
     226:	2f 5f       	subi	r18, 0xFF	; 255
     228:	3f 4f       	sbci	r19, 0xFF	; 255
     22a:	d6 cf       	rjmp	.-84     	; 0x1d8 <rs232+0x16>

0000022c <bootwait>:
//    those LEDs on and off generates some noise.
// 2) Set a random random seed based on the delay between boot time and
//    the time you press a button.
// 3) Select mode of operation, autonomous or rs232 controlled.
unsigned int bootwait (void)
{
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
	// All the LED_PORT... code blinks the red and green status LEDs.

	unsigned int x = 0;
	LED_PORT |= LED_GREEN;
     230:	93 9a       	sbi	0x12, 3	; 18
     232:	c0 e0       	ldi	r28, 0x00	; 0
     234:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
        x++; // increment x by one.
     236:	21 96       	adiw	r28, 0x01	; 1
		srand(x); // use counter x as random seed
     238:	ce 01       	movw	r24, r28
     23a:	0e 94 a5 21 	call	0x434a	; 0x434a <srand>
		
		delay_ms(1000);
     23e:	88 ee       	ldi	r24, 0xE8	; 232
     240:	93 e0       	ldi	r25, 0x03	; 3
     242:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
		LED_PORT &= ~LED_GREEN; // green off, red on
     246:	93 98       	cbi	0x12, 3	; 18
		LED_PORT |= LED_RED;
     248:	92 9a       	sbi	0x12, 2	; 18
		
		// Listen for button presses and return with the
		// apropriate number.
		if (!(PIND & RS232_BTN))
     24a:	85 9b       	sbis	0x10, 5	; 16
     24c:	0d c0       	rjmp	.+26     	; 0x268 <bootwait+0x3c>
			return 2;

		if (!(PINB & MAIN_BTN))
     24e:	b4 9b       	sbis	0x16, 4	; 22
     250:	0e c0       	rjmp	.+28     	; 0x26e <bootwait+0x42>
			return 1;
		
		delay_ms(1000);
     252:	88 ee       	ldi	r24, 0xE8	; 232
     254:	93 e0       	ldi	r25, 0x03	; 3
     256:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
		LED_PORT &= ~LED_RED; // red off, green on
     25a:	92 98       	cbi	0x12, 2	; 18
		LED_PORT |= LED_GREEN;
     25c:	93 9a       	sbi	0x12, 3	; 18
		
		// Same as above. I do it twise because there are two delays
		// in this loop, used for the red and green led blinking..
		if (!(PIND & RS232_BTN))
     25e:	85 9b       	sbis	0x10, 5	; 16
     260:	03 c0       	rjmp	.+6      	; 0x268 <bootwait+0x3c>
			return 2;

		if (!(PINB & MAIN_BTN))
     262:	b4 99       	sbic	0x16, 4	; 22
     264:	e8 cf       	rjmp	.-48     	; 0x236 <bootwait+0xa>
     266:	03 c0       	rjmp	.+6      	; 0x26e <bootwait+0x42>
     268:	22 e0       	ldi	r18, 0x02	; 2
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	02 c0       	rjmp	.+4      	; 0x272 <bootwait+0x46>
     26e:	21 e0       	ldi	r18, 0x01	; 1
     270:	30 e0       	ldi	r19, 0x00	; 0
			return 1;
	}
}
     272:	c9 01       	movw	r24, r18
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <main>:
#include "draw.h"

// Main loop
// the AVR enters this function at boot time
int main (void)
{
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29

	// This function initiates IO ports, timers, interrupts and
    // serial communications
	ioinit();
     27e:	0e 94 bf 00 	call	0x17e	; 0x17e <ioinit>
	
    // This variable specifies which layer is currently being drawn by the
	// cube interrupt routine. We assign a value to it to make sure it's not >7.
	current_layer = 1;	
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 e5 00 	sts	0x00E5, r24
	// 3) Random seed. The bootwait function counts forever from 0 to 255.
	//    Whenever you press the button, this counter stops, and the number it
	//    stopped at is used as a random seed. This ensures true randomness at
	//    every boot. Without this (or some similar process) the cube would
	//    produce the same "random" sequence every time
	i = bootwait();
     288:	0e 94 16 01 	call	0x22c	; 0x22c <bootwait>

	// Enable interrupts
	// This starts the routine that draws the cube content
	sei();
     28c:	78 94       	sei

	// Result for bootwait() is 2:
	// Go to rs232 mode. this function loops forever.
	if (i == 2)
     28e:	02 97       	sbiw	r24, 0x02	; 2
     290:	11 f4       	brne	.+4      	; 0x296 <main+0x1c>
	{
		rs232();
     292:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <rs232>
     296:	c0 e0       	ldi	r28, 0x00	; 0
     298:	d0 e0       	ldi	r29, 0x00	; 0
	// Do awesome effects. Loop forever.
	while (1)
	{
		// Show the effects in a predefined order
		for (i=0; i<EFFECTS_TOTAL; i++)
			launch_effect(i);
     29a:	ce 01       	movw	r24, r28
     29c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <launch_effect>
	// Result of bootwait() is something other than 2:
	// Do awesome effects. Loop forever.
	while (1)
	{
		// Show the effects in a predefined order
		for (i=0; i<EFFECTS_TOTAL; i++)
     2a0:	21 96       	adiw	r28, 0x01	; 1
     2a2:	c6 31       	cpi	r28, 0x16	; 22
     2a4:	d1 05       	cpc	r29, r1
     2a6:	bc f7       	brge	.-18     	; 0x296 <main+0x1c>
     2a8:	f8 cf       	rjmp	.-16     	; 0x29a <main+0x20>

000002aa <inrange>:
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < CUBE_SIZE && y >= 0 && y < CUBE_SIZE && z >= 0 && z < CUBE_SIZE)
     2aa:	08 97       	sbiw	r24, 0x08	; 8
     2ac:	78 f4       	brcc	.+30     	; 0x2cc <inrange+0x22>
     2ae:	77 fd       	sbrc	r23, 7
     2b0:	0d c0       	rjmp	.+26     	; 0x2cc <inrange+0x22>
     2b2:	68 30       	cpi	r22, 0x08	; 8
     2b4:	71 05       	cpc	r23, r1
     2b6:	54 f4       	brge	.+20     	; 0x2cc <inrange+0x22>
     2b8:	57 fd       	sbrc	r21, 7
     2ba:	08 c0       	rjmp	.+16     	; 0x2cc <inrange+0x22>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	48 30       	cpi	r20, 0x08	; 8
     2c0:	51 05       	cpc	r21, r1
     2c2:	0c f0       	brlt	.+2      	; 0x2c6 <inrange+0x1c>
     2c4:	91 e0       	ldi	r25, 0x01	; 1
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	98 27       	eor	r25, r24
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <inrange+0x24>
     2cc:	90 e0       	ldi	r25, 0x00	; 0
	} else
	{
		// One of the coordinates was outside the cube.
		return 0;
	}
}
     2ce:	89 2f       	mov	r24, r25
     2d0:	08 95       	ret

000002d2 <tmpclrvoxel>:
		cube[z][y] &= ~(1 << x);
}

// Set a single voxel to OFF
void tmpclrvoxel(int x, int y, int z)
{
     2d2:	ff 92       	push	r15
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	f8 2e       	mov	r15, r24
     2de:	8b 01       	movw	r16, r22
     2e0:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     2e2:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
     2e6:	88 23       	and	r24, r24
     2e8:	a9 f0       	breq	.+42     	; 0x314 <tmpclrvoxel+0x42>
		fb[z][y] &= ~(1 << x);
     2ea:	fe 01       	movw	r30, r28
     2ec:	83 e0       	ldi	r24, 0x03	; 3
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	8a 95       	dec	r24
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <tmpclrvoxel+0x1c>
     2f6:	e0 0f       	add	r30, r16
     2f8:	f1 1f       	adc	r31, r17
     2fa:	eb 59       	subi	r30, 0x9B	; 155
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	20 81       	ld	r18, Z
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	02 c0       	rjmp	.+4      	; 0x30a <tmpclrvoxel+0x38>
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	fa 94       	dec	r15
     30c:	e2 f7       	brpl	.-8      	; 0x306 <tmpclrvoxel+0x34>
     30e:	80 95       	com	r24
     310:	82 23       	and	r24, r18
     312:	80 83       	st	Z, r24
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	ff 90       	pop	r15
     31e:	08 95       	ret

00000320 <clrvoxel>:
		fb[z][y] |= (1 << x);
}

// Set a single voxel to OFF
void clrvoxel(int x, int y, int z)
{
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	f8 2e       	mov	r15, r24
     32c:	8b 01       	movw	r16, r22
     32e:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     330:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
     334:	88 23       	and	r24, r24
     336:	a9 f0       	breq	.+42     	; 0x362 <clrvoxel+0x42>
		cube[z][y] &= ~(1 << x);
     338:	fe 01       	movw	r30, r28
     33a:	93 e0       	ldi	r25, 0x03	; 3
     33c:	ee 0f       	add	r30, r30
     33e:	ff 1f       	adc	r31, r31
     340:	9a 95       	dec	r25
     342:	e1 f7       	brne	.-8      	; 0x33c <clrvoxel+0x1c>
     344:	e0 0f       	add	r30, r16
     346:	f1 1f       	adc	r31, r17
     348:	eb 55       	subi	r30, 0x5B	; 91
     34a:	ff 4f       	sbci	r31, 0xFF	; 255
     34c:	20 81       	ld	r18, Z
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	02 c0       	rjmp	.+4      	; 0x358 <clrvoxel+0x38>
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	fa 94       	dec	r15
     35a:	e2 f7       	brpl	.-8      	; 0x354 <clrvoxel+0x34>
     35c:	80 95       	com	r24
     35e:	82 23       	and	r24, r18
     360:	80 83       	st	Z, r24
}
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	08 95       	ret

0000036e <tmpsetvoxel>:
		cube[z][y] |= (1 << x);
}

// Set a single voxel in the temporary cube buffer to ON
void tmpsetvoxel(int x, int y, int z)
{
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	f8 2e       	mov	r15, r24
     37a:	8b 01       	movw	r16, r22
     37c:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     37e:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
     382:	88 23       	and	r24, r24
     384:	a1 f0       	breq	.+40     	; 0x3ae <tmpsetvoxel+0x40>
		fb[z][y] |= (1 << x);
     386:	fe 01       	movw	r30, r28
     388:	23 e0       	ldi	r18, 0x03	; 3
     38a:	ee 0f       	add	r30, r30
     38c:	ff 1f       	adc	r31, r31
     38e:	2a 95       	dec	r18
     390:	e1 f7       	brne	.-8      	; 0x38a <tmpsetvoxel+0x1c>
     392:	e0 0f       	add	r30, r16
     394:	f1 1f       	adc	r31, r17
     396:	eb 59       	subi	r30, 0x9B	; 155
     398:	ff 4f       	sbci	r31, 0xFF	; 255
     39a:	20 81       	ld	r18, Z
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <tmpsetvoxel+0x38>
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	fa 94       	dec	r15
     3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <tmpsetvoxel+0x34>
     3aa:	28 2b       	or	r18, r24
     3ac:	20 83       	st	Z, r18
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	08 95       	ret

000003ba <setvoxel>:
#include "draw.h"
#include "string.h"

// Set a single voxel to ON
void setvoxel(int x, int y, int z)
{
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	f8 2e       	mov	r15, r24
     3c6:	8b 01       	movw	r16, r22
     3c8:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     3ca:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
     3ce:	88 23       	and	r24, r24
     3d0:	a1 f0       	breq	.+40     	; 0x3fa <setvoxel+0x40>
		cube[z][y] |= (1 << x);
     3d2:	fe 01       	movw	r30, r28
     3d4:	33 e0       	ldi	r19, 0x03	; 3
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	3a 95       	dec	r19
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <setvoxel+0x1c>
     3de:	e0 0f       	add	r30, r16
     3e0:	f1 1f       	adc	r31, r17
     3e2:	eb 55       	subi	r30, 0x5B	; 91
     3e4:	ff 4f       	sbci	r31, 0xFF	; 255
     3e6:	20 81       	ld	r18, Z
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <setvoxel+0x38>
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	fa 94       	dec	r15
     3f4:	e2 f7       	brpl	.-8      	; 0x3ee <setvoxel+0x34>
     3f6:	28 2b       	or	r18, r24
     3f8:	20 83       	st	Z, r18
}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	08 95       	ret

00000406 <getvoxel>:
	}
}

// Get the current status of a voxel
unsigned char getvoxel(int x, int y, int z)
{
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	f8 2e       	mov	r15, r24
     412:	8b 01       	movw	r16, r22
     414:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     416:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
     41a:	88 23       	and	r24, r24
     41c:	89 f0       	breq	.+34     	; 0x440 <getvoxel+0x3a>
	{
		if (cube[z][y] & (1 << x))
     41e:	43 e0       	ldi	r20, 0x03	; 3
     420:	cc 0f       	add	r28, r28
     422:	dd 1f       	adc	r29, r29
     424:	4a 95       	dec	r20
     426:	e1 f7       	brne	.-8      	; 0x420 <getvoxel+0x1a>
     428:	c0 0f       	add	r28, r16
     42a:	d1 1f       	adc	r29, r17
     42c:	cb 55       	subi	r28, 0x5B	; 91
     42e:	df 4f       	sbci	r29, 0xFF	; 255
     430:	88 81       	ld	r24, Y
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	02 c0       	rjmp	.+4      	; 0x43a <getvoxel+0x34>
     436:	95 95       	asr	r25
     438:	87 95       	ror	r24
     43a:	fa 94       	dec	r15
     43c:	e2 f7       	brpl	.-8      	; 0x436 <getvoxel+0x30>
     43e:	81 70       	andi	r24, 0x01	; 1
		}
	} else
	{
		return 0;
	}
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	08 95       	ret

0000044c <altervoxel>:

// In some effect we want to just take bool and write it to a voxel
// this function calls the apropriate voxel manipulation function.
void altervoxel(int x, int y, int z, int state)
{
	if (state == 1)
     44c:	21 30       	cpi	r18, 0x01	; 1
     44e:	31 05       	cpc	r19, r1
     450:	19 f4       	brne	.+6      	; 0x458 <altervoxel+0xc>
	{
		setvoxel(x,y,z);
     452:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
     456:	08 95       	ret
	} else
	{
		clrvoxel(x,y,z);
     458:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
     45c:	08 95       	ret

0000045e <flpvoxel>:
}

// Flip the state of a voxel.
// If the voxel is 1, its turned into a 0, and vice versa.
void flpvoxel(int x, int y, int z)
{
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	f8 2e       	mov	r15, r24
     46a:	8b 01       	movw	r16, r22
     46c:	ea 01       	movw	r28, r20
	if (inrange(x, y, z))
     46e:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
     472:	88 23       	and	r24, r24
     474:	a1 f0       	breq	.+40     	; 0x49e <flpvoxel+0x40>
		cube[z][y] ^= (1 << x);
     476:	fe 01       	movw	r30, r28
     478:	53 e0       	ldi	r21, 0x03	; 3
     47a:	ee 0f       	add	r30, r30
     47c:	ff 1f       	adc	r31, r31
     47e:	5a 95       	dec	r21
     480:	e1 f7       	brne	.-8      	; 0x47a <flpvoxel+0x1c>
     482:	e0 0f       	add	r30, r16
     484:	f1 1f       	adc	r31, r17
     486:	eb 55       	subi	r30, 0x5B	; 91
     488:	ff 4f       	sbci	r31, 0xFF	; 255
     48a:	20 81       	ld	r18, Z
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	02 c0       	rjmp	.+4      	; 0x496 <flpvoxel+0x38>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	fa 94       	dec	r15
     498:	e2 f7       	brpl	.-8      	; 0x492 <flpvoxel+0x34>
     49a:	28 27       	eor	r18, r24
     49c:	20 83       	st	Z, r18
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	08 95       	ret

000004aa <argorder>:

// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	fc 01       	movw	r30, r24
     4b0:	da 01       	movw	r26, r20
     4b2:	e9 01       	movw	r28, r18
	if (ix1>ix2)
     4b4:	68 17       	cp	r22, r24
     4b6:	79 07       	cpc	r23, r25
     4b8:	1c f4       	brge	.+6      	; 0x4c0 <argorder+0x16>
     4ba:	cb 01       	movw	r24, r22
     4bc:	bf 01       	movw	r22, r30
     4be:	fc 01       	movw	r30, r24
		int tmp;
		tmp = ix1;
		ix1= ix2;
		ix2 = tmp;
	}
	*ox1 = ix1;
     4c0:	ed 93       	st	X+, r30
     4c2:	fc 93       	st	X, r31
	*ox2 = ix2;
     4c4:	79 83       	std	Y+1, r23	; 0x01
     4c6:	68 83       	st	Y, r22
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <setplane_z>:
// Sets all voxels along a X/Y plane at a given point
// on axis Z
void setplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
     4ce:	88 30       	cpi	r24, 0x08	; 8
     4d0:	91 05       	cpc	r25, r1
     4d2:	98 f4       	brcc	.+38     	; 0x4fa <setplane_z+0x2c>
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0xff;
     4d8:	63 e0       	ldi	r22, 0x03	; 3
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	6a 95       	dec	r22
     4e0:	e1 f7       	brne	.-8      	; 0x4da <setplane_z+0xc>
     4e2:	4f ef       	ldi	r20, 0xFF	; 255
     4e4:	fc 01       	movw	r30, r24
     4e6:	e2 0f       	add	r30, r18
     4e8:	f3 1f       	adc	r31, r19
     4ea:	eb 55       	subi	r30, 0x5B	; 91
     4ec:	ff 4f       	sbci	r31, 0xFF	; 255
     4ee:	40 83       	st	Z, r20
void setplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (i=0;i<CUBE_SIZE;i++)
     4f0:	2f 5f       	subi	r18, 0xFF	; 255
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
     4f4:	28 30       	cpi	r18, 0x08	; 8
     4f6:	31 05       	cpc	r19, r1
     4f8:	a9 f7       	brne	.-22     	; 0x4e4 <setplane_z+0x16>
     4fa:	08 95       	ret

000004fc <clrplane_z>:

// Clears voxels in the same manner as above
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
     4fc:	88 30       	cpi	r24, 0x08	; 8
     4fe:	91 05       	cpc	r25, r1
     500:	90 f4       	brcc	.+36     	; 0x526 <clrplane_z+0x2a>
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0x00;
     506:	73 e0       	ldi	r23, 0x03	; 3
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	7a 95       	dec	r23
     50e:	e1 f7       	brne	.-8      	; 0x508 <clrplane_z+0xc>
     510:	fc 01       	movw	r30, r24
     512:	e2 0f       	add	r30, r18
     514:	f3 1f       	adc	r31, r19
     516:	eb 55       	subi	r30, 0x5B	; 91
     518:	ff 4f       	sbci	r31, 0xFF	; 255
     51a:	10 82       	st	Z, r1
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (i=0;i<CUBE_SIZE;i++)
     51c:	2f 5f       	subi	r18, 0xFF	; 255
     51e:	3f 4f       	sbci	r19, 0xFF	; 255
     520:	28 30       	cpi	r18, 0x08	; 8
     522:	31 05       	cpc	r19, r1
     524:	a9 f7       	brne	.-22     	; 0x510 <clrplane_z+0x14>
     526:	08 95       	ret

00000528 <setplane_x>:
			cube[z][i] = 0x00;
	}
}

void setplane_x (int x)
{
     528:	9c 01       	movw	r18, r24
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
     52a:	88 30       	cpi	r24, 0x08	; 8
     52c:	91 05       	cpc	r25, r1
     52e:	30 f5       	brcc	.+76     	; 0x57c <setplane_x+0x54>
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] |= (1 << x);
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	02 c0       	rjmp	.+4      	; 0x53a <setplane_x+0x12>
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	2a 95       	dec	r18
     53c:	e2 f7       	brpl	.-8      	; 0x536 <setplane_x+0xe>
     53e:	98 2f       	mov	r25, r24
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	12 c0       	rjmp	.+36     	; 0x56a <setplane_x+0x42>
     546:	fb 01       	movw	r30, r22
     548:	e2 0f       	add	r30, r18
     54a:	f3 1f       	adc	r31, r19
     54c:	eb 55       	subi	r30, 0x5B	; 91
     54e:	ff 4f       	sbci	r31, 0xFF	; 255
     550:	80 81       	ld	r24, Z
     552:	89 2b       	or	r24, r25
     554:	80 83       	st	Z, r24
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
     556:	2f 5f       	subi	r18, 0xFF	; 255
     558:	3f 4f       	sbci	r19, 0xFF	; 255
     55a:	28 30       	cpi	r18, 0x08	; 8
     55c:	31 05       	cpc	r19, r1
     55e:	99 f7       	brne	.-26     	; 0x546 <setplane_x+0x1e>
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     560:	4f 5f       	subi	r20, 0xFF	; 255
     562:	5f 4f       	sbci	r21, 0xFF	; 255
     564:	48 30       	cpi	r20, 0x08	; 8
     566:	51 05       	cpc	r21, r1
     568:	49 f0       	breq	.+18     	; 0x57c <setplane_x+0x54>
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] |= (1 << x);
     56e:	ba 01       	movw	r22, r20
     570:	e3 e0       	ldi	r30, 0x03	; 3
     572:	66 0f       	add	r22, r22
     574:	77 1f       	adc	r23, r23
     576:	ea 95       	dec	r30
     578:	e1 f7       	brne	.-8      	; 0x572 <setplane_x+0x4a>
     57a:	e5 cf       	rjmp	.-54     	; 0x546 <setplane_x+0x1e>
     57c:	08 95       	ret

0000057e <clrplane_x>:
		}
	}
}

void clrplane_x (int x)
{
     57e:	9c 01       	movw	r18, r24
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
     580:	88 30       	cpi	r24, 0x08	; 8
     582:	91 05       	cpc	r25, r1
     584:	38 f5       	brcc	.+78     	; 0x5d4 <clrplane_x+0x56>
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] &= ~(1 << x);
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	02 c0       	rjmp	.+4      	; 0x590 <clrplane_x+0x12>
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	2a 95       	dec	r18
     592:	e2 f7       	brpl	.-8      	; 0x58c <clrplane_x+0xe>
     594:	98 2f       	mov	r25, r24
     596:	90 95       	com	r25
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	12 c0       	rjmp	.+36     	; 0x5c2 <clrplane_x+0x44>
     59e:	fb 01       	movw	r30, r22
     5a0:	e2 0f       	add	r30, r18
     5a2:	f3 1f       	adc	r31, r19
     5a4:	eb 55       	subi	r30, 0x5B	; 91
     5a6:	ff 4f       	sbci	r31, 0xFF	; 255
     5a8:	80 81       	ld	r24, Z
     5aa:	89 23       	and	r24, r25
     5ac:	80 83       	st	Z, r24
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
     5ae:	2f 5f       	subi	r18, 0xFF	; 255
     5b0:	3f 4f       	sbci	r19, 0xFF	; 255
     5b2:	28 30       	cpi	r18, 0x08	; 8
     5b4:	31 05       	cpc	r19, r1
     5b6:	99 f7       	brne	.-26     	; 0x59e <clrplane_x+0x20>
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     5b8:	4f 5f       	subi	r20, 0xFF	; 255
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255
     5bc:	48 30       	cpi	r20, 0x08	; 8
     5be:	51 05       	cpc	r21, r1
     5c0:	49 f0       	breq	.+18     	; 0x5d4 <clrplane_x+0x56>
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] &= ~(1 << x);
     5c6:	ba 01       	movw	r22, r20
     5c8:	f3 e0       	ldi	r31, 0x03	; 3
     5ca:	66 0f       	add	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	fa 95       	dec	r31
     5d0:	e1 f7       	brne	.-8      	; 0x5ca <clrplane_x+0x4c>
     5d2:	e5 cf       	rjmp	.-54     	; 0x59e <clrplane_x+0x20>
     5d4:	08 95       	ret

000005d6 <setplane_y>:
}

void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     5d6:	88 30       	cpi	r24, 0x08	; 8
     5d8:	91 05       	cpc	r25, r1
     5da:	98 f4       	brcc	.+38     	; 0x602 <setplane_y+0x2c>
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0xff;
     5e0:	4f ef       	ldi	r20, 0xFF	; 255
     5e2:	f9 01       	movw	r30, r18
     5e4:	a3 e0       	ldi	r26, 0x03	; 3
     5e6:	ee 0f       	add	r30, r30
     5e8:	ff 1f       	adc	r31, r31
     5ea:	aa 95       	dec	r26
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <setplane_y+0x10>
     5ee:	e8 0f       	add	r30, r24
     5f0:	f9 1f       	adc	r31, r25
     5f2:	eb 55       	subi	r30, 0x5B	; 91
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	40 83       	st	Z, r20
void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     5f8:	2f 5f       	subi	r18, 0xFF	; 255
     5fa:	3f 4f       	sbci	r19, 0xFF	; 255
     5fc:	28 30       	cpi	r18, 0x08	; 8
     5fe:	31 05       	cpc	r19, r1
     600:	81 f7       	brne	.-32     	; 0x5e2 <setplane_y+0xc>
     602:	08 95       	ret

00000604 <clrplane_y>:
}

void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     604:	88 30       	cpi	r24, 0x08	; 8
     606:	91 05       	cpc	r25, r1
     608:	90 f4       	brcc	.+36     	; 0x62e <clrplane_y+0x2a>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0x00; 
     60e:	f9 01       	movw	r30, r18
     610:	b3 e0       	ldi	r27, 0x03	; 3
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	ba 95       	dec	r27
     618:	e1 f7       	brne	.-8      	; 0x612 <clrplane_y+0xe>
     61a:	e8 0f       	add	r30, r24
     61c:	f9 1f       	adc	r31, r25
     61e:	eb 55       	subi	r30, 0x5B	; 91
     620:	ff 4f       	sbci	r31, 0xFF	; 255
     622:	10 82       	st	Z, r1
void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     624:	2f 5f       	subi	r18, 0xFF	; 255
     626:	3f 4f       	sbci	r19, 0xFF	; 255
     628:	28 30       	cpi	r18, 0x08	; 8
     62a:	31 05       	cpc	r19, r1
     62c:	81 f7       	brne	.-32     	; 0x60e <clrplane_y+0xa>
     62e:	08 95       	ret

00000630 <setplane>:
	}
}

void setplane (char axis, unsigned char i)
{
    switch (axis)
     630:	89 37       	cpi	r24, 0x79	; 121
     632:	49 f0       	breq	.+18     	; 0x646 <setplane+0x16>
     634:	8a 37       	cpi	r24, 0x7A	; 122
     636:	f9 f0       	breq	.+62     	; 0x676 <setplane+0x46>
     638:	88 37       	cpi	r24, 0x78	; 120
     63a:	a1 f5       	brne	.+104    	; 0x6a4 <setplane+0x74>
    {
        case AXIS_X:
            setplane_x(i);
     63c:	86 2f       	mov	r24, r22
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 94 02 	call	0x528	; 0x528 <setplane_x>
     644:	08 95       	ret
            break;
        
       case AXIS_Y:
            setplane_y(i);
     646:	70 e0       	ldi	r23, 0x00	; 0
}

void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     648:	68 30       	cpi	r22, 0x08	; 8
     64a:	71 05       	cpc	r23, r1
     64c:	58 f5       	brcc	.+86     	; 0x6a4 <setplane+0x74>
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0xff;
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	f9 01       	movw	r30, r18
     656:	93 e0       	ldi	r25, 0x03	; 3
     658:	ee 0f       	add	r30, r30
     65a:	ff 1f       	adc	r31, r31
     65c:	9a 95       	dec	r25
     65e:	e1 f7       	brne	.-8      	; 0x658 <setplane+0x28>
     660:	e6 0f       	add	r30, r22
     662:	f7 1f       	adc	r31, r23
     664:	eb 55       	subi	r30, 0x5B	; 91
     666:	ff 4f       	sbci	r31, 0xFF	; 255
     668:	80 83       	st	Z, r24
void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     66a:	2f 5f       	subi	r18, 0xFF	; 255
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	28 30       	cpi	r18, 0x08	; 8
     670:	31 05       	cpc	r19, r1
     672:	81 f7       	brne	.-32     	; 0x654 <setplane+0x24>
     674:	08 95       	ret
       case AXIS_Y:
            setplane_y(i);
            break;

       case AXIS_Z:
            setplane_z(i);
     676:	70 e0       	ldi	r23, 0x00	; 0
// Sets all voxels along a X/Y plane at a given point
// on axis Z
void setplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
     678:	68 30       	cpi	r22, 0x08	; 8
     67a:	71 05       	cpc	r23, r1
     67c:	98 f4       	brcc	.+38     	; 0x6a4 <setplane+0x74>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0xff;
     682:	83 e0       	ldi	r24, 0x03	; 3
     684:	66 0f       	add	r22, r22
     686:	77 1f       	adc	r23, r23
     688:	8a 95       	dec	r24
     68a:	e1 f7       	brne	.-8      	; 0x684 <setplane+0x54>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	fb 01       	movw	r30, r22
     690:	e2 0f       	add	r30, r18
     692:	f3 1f       	adc	r31, r19
     694:	eb 55       	subi	r30, 0x5B	; 91
     696:	ff 4f       	sbci	r31, 0xFF	; 255
     698:	80 83       	st	Z, r24
void setplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (i=0;i<CUBE_SIZE;i++)
     69a:	2f 5f       	subi	r18, 0xFF	; 255
     69c:	3f 4f       	sbci	r19, 0xFF	; 255
     69e:	28 30       	cpi	r18, 0x08	; 8
     6a0:	31 05       	cpc	r19, r1
     6a2:	a9 f7       	brne	.-22     	; 0x68e <setplane+0x5e>
     6a4:	08 95       	ret

000006a6 <clrplane>:
    }
}

void clrplane (char axis, unsigned char i)
{
    switch (axis)
     6a6:	89 37       	cpi	r24, 0x79	; 121
     6a8:	49 f0       	breq	.+18     	; 0x6bc <clrplane+0x16>
     6aa:	8a 37       	cpi	r24, 0x7A	; 122
     6ac:	f1 f0       	breq	.+60     	; 0x6ea <clrplane+0x44>
     6ae:	88 37       	cpi	r24, 0x78	; 120
     6b0:	91 f5       	brne	.+100    	; 0x716 <clrplane+0x70>
    {
        case AXIS_X:
            clrplane_x(i);
     6b2:	86 2f       	mov	r24, r22
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 bf 02 	call	0x57e	; 0x57e <clrplane_x>
     6ba:	08 95       	ret
            break;
        
       case AXIS_Y:
            clrplane_y(i);
     6bc:	70 e0       	ldi	r23, 0x00	; 0
}

void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     6be:	68 30       	cpi	r22, 0x08	; 8
     6c0:	71 05       	cpc	r23, r1
     6c2:	48 f5       	brcc	.+82     	; 0x716 <clrplane+0x70>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0x00; 
     6c8:	f9 01       	movw	r30, r18
     6ca:	53 e0       	ldi	r21, 0x03	; 3
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	5a 95       	dec	r21
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <clrplane+0x26>
     6d4:	e6 0f       	add	r30, r22
     6d6:	f7 1f       	adc	r31, r23
     6d8:	eb 55       	subi	r30, 0x5B	; 91
     6da:	ff 4f       	sbci	r31, 0xFF	; 255
     6dc:	10 82       	st	Z, r1
void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     6de:	2f 5f       	subi	r18, 0xFF	; 255
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
     6e2:	28 30       	cpi	r18, 0x08	; 8
     6e4:	31 05       	cpc	r19, r1
     6e6:	81 f7       	brne	.-32     	; 0x6c8 <clrplane+0x22>
     6e8:	08 95       	ret
       case AXIS_Y:
            clrplane_y(i);
            break;

       case AXIS_Z:
            clrplane_z(i);
     6ea:	70 e0       	ldi	r23, 0x00	; 0

// Clears voxels in the same manner as above
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
     6ec:	68 30       	cpi	r22, 0x08	; 8
     6ee:	71 05       	cpc	r23, r1
     6f0:	90 f4       	brcc	.+36     	; 0x716 <clrplane+0x70>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0x00;
     6f6:	43 e0       	ldi	r20, 0x03	; 3
     6f8:	66 0f       	add	r22, r22
     6fa:	77 1f       	adc	r23, r23
     6fc:	4a 95       	dec	r20
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <clrplane+0x52>
     700:	fb 01       	movw	r30, r22
     702:	e2 0f       	add	r30, r18
     704:	f3 1f       	adc	r31, r19
     706:	eb 55       	subi	r30, 0x5B	; 91
     708:	ff 4f       	sbci	r31, 0xFF	; 255
     70a:	10 82       	st	Z, r1
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (i=0;i<CUBE_SIZE;i++)
     70c:	2f 5f       	subi	r18, 0xFF	; 255
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	28 30       	cpi	r18, 0x08	; 8
     712:	31 05       	cpc	r19, r1
     714:	a9 f7       	brne	.-22     	; 0x700 <clrplane+0x5a>
     716:	08 95       	ret

00000718 <fill>:

// Fill a value into all 64 byts of the cube buffer
// Mostly used for clearing. fill(0x00)
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	10 c0       	rjmp	.+32     	; 0x73e <fill+0x26>
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			cube[z][y] = pattern;
     71e:	fb 01       	movw	r30, r22
     720:	e2 0f       	add	r30, r18
     722:	f3 1f       	adc	r31, r19
     724:	eb 55       	subi	r30, 0x5B	; 91
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	80 83       	st	Z, r24
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
     72a:	2f 5f       	subi	r18, 0xFF	; 255
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	28 30       	cpi	r18, 0x08	; 8
     730:	31 05       	cpc	r19, r1
     732:	a9 f7       	brne	.-22     	; 0x71e <fill+0x6>
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
     734:	4f 5f       	subi	r20, 0xFF	; 255
     736:	5f 4f       	sbci	r21, 0xFF	; 255
     738:	48 30       	cpi	r20, 0x08	; 8
     73a:	51 05       	cpc	r21, r1
     73c:	49 f0       	breq	.+18     	; 0x750 <fill+0x38>
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			cube[z][y] = pattern;
     742:	ba 01       	movw	r22, r20
     744:	e3 e0       	ldi	r30, 0x03	; 3
     746:	66 0f       	add	r22, r22
     748:	77 1f       	adc	r23, r23
     74a:	ea 95       	dec	r30
     74c:	e1 f7       	brne	.-8      	; 0x746 <fill+0x2e>
     74e:	e7 cf       	rjmp	.-50     	; 0x71e <fill+0x6>
     750:	08 95       	ret

00000752 <tmpfill>:
		}
	}
}

void tmpfill (unsigned char pattern)
{
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	10 c0       	rjmp	.+32     	; 0x778 <tmpfill+0x26>
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			fb[z][y] = pattern;
     758:	fb 01       	movw	r30, r22
     75a:	e2 0f       	add	r30, r18
     75c:	f3 1f       	adc	r31, r19
     75e:	eb 59       	subi	r30, 0x9B	; 155
     760:	ff 4f       	sbci	r31, 0xFF	; 255
     762:	80 83       	st	Z, r24
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
     764:	2f 5f       	subi	r18, 0xFF	; 255
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	28 30       	cpi	r18, 0x08	; 8
     76a:	31 05       	cpc	r19, r1
     76c:	a9 f7       	brne	.-22     	; 0x758 <tmpfill+0x6>

void tmpfill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
     76e:	4f 5f       	subi	r20, 0xFF	; 255
     770:	5f 4f       	sbci	r21, 0xFF	; 255
     772:	48 30       	cpi	r20, 0x08	; 8
     774:	51 05       	cpc	r21, r1
     776:	49 f0       	breq	.+18     	; 0x78a <tmpfill+0x38>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			fb[z][y] = pattern;
     77c:	ba 01       	movw	r22, r20
     77e:	f3 e0       	ldi	r31, 0x03	; 3
     780:	66 0f       	add	r22, r22
     782:	77 1f       	adc	r23, r23
     784:	fa 95       	dec	r31
     786:	e1 f7       	brne	.-8      	; 0x780 <tmpfill+0x2e>
     788:	e7 cf       	rjmp	.-50     	; 0x758 <tmpfill+0x6>
     78a:	08 95       	ret

0000078c <box_filled>:
	}
}

// Draw a box with all walls drawn and all voxels inside set
void box_filled(int x1, int y1, int z1, int x2, int y2, int z2)
{
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	dc 01       	movw	r26, r24
     79a:	eb 01       	movw	r28, r22
     79c:	f9 01       	movw	r30, r18
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1>ix2)
     79e:	28 17       	cp	r18, r24
     7a0:	39 07       	cpc	r19, r25
     7a2:	14 f4       	brge	.+4      	; 0x7a8 <box_filled+0x1c>
     7a4:	d9 01       	movw	r26, r18
     7a6:	fc 01       	movw	r30, r24

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
	return ((0xff<<start) & ~(0xff<<(end+1)));
     7a8:	0c 17       	cp	r16, r28
     7aa:	1d 07       	cpc	r17, r29
     7ac:	1c f4       	brge	.+6      	; 0x7b4 <box_filled+0x28>
     7ae:	ce 01       	movw	r24, r28
     7b0:	e8 01       	movw	r28, r16
     7b2:	8c 01       	movw	r16, r24
     7b4:	e4 16       	cp	r14, r20
     7b6:	f5 06       	cpc	r15, r21
     7b8:	1c f4       	brge	.+6      	; 0x7c0 <box_filled+0x34>
     7ba:	ca 01       	movw	r24, r20
     7bc:	a7 01       	movw	r20, r14
     7be:	7c 01       	movw	r14, r24
     7c0:	31 96       	adiw	r30, 0x01	; 1
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	9c 01       	movw	r18, r24
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <box_filled+0x42>
     7ca:	22 0f       	add	r18, r18
     7cc:	33 1f       	adc	r19, r19
     7ce:	ea 95       	dec	r30
     7d0:	e2 f7       	brpl	.-8      	; 0x7ca <box_filled+0x3e>
     7d2:	20 95       	com	r18
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <box_filled+0x4e>
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	aa 95       	dec	r26
     7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <box_filled+0x4a>
     7de:	28 23       	and	r18, r24
     7e0:	0e c0       	rjmp	.+28     	; 0x7fe <box_filled+0x72>

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
		{
			cube[iz][iy] |= byteline(x1,x2);
     7e2:	fb 01       	movw	r30, r22
     7e4:	ea 0f       	add	r30, r26
     7e6:	fb 1f       	adc	r31, r27
     7e8:	eb 55       	subi	r30, 0x5B	; 91
     7ea:	ff 4f       	sbci	r31, 0xFF	; 255
     7ec:	80 81       	ld	r24, Z
     7ee:	82 2b       	or	r24, r18
     7f0:	80 83       	st	Z, r24
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
     7f2:	11 96       	adiw	r26, 0x01	; 1
     7f4:	0a 17       	cp	r16, r26
     7f6:	1b 07       	cpc	r17, r27
     7f8:	a4 f7       	brge	.-24     	; 0x7e2 <box_filled+0x56>

	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
     7fa:	4f 5f       	subi	r20, 0xFF	; 255
     7fc:	5f 4f       	sbci	r21, 0xFF	; 255
     7fe:	e4 16       	cp	r14, r20
     800:	f5 06       	cpc	r15, r21
     802:	44 f0       	brlt	.+16     	; 0x814 <box_filled+0x88>
     804:	de 01       	movw	r26, r28
	{
		for (iy=y1;iy<=y2;iy++)
		{
			cube[iz][iy] |= byteline(x1,x2);
     806:	ba 01       	movw	r22, r20
     808:	83 e0       	ldi	r24, 0x03	; 3
     80a:	66 0f       	add	r22, r22
     80c:	77 1f       	adc	r23, r23
     80e:	8a 95       	dec	r24
     810:	e1 f7       	brne	.-8      	; 0x80a <box_filled+0x7e>
     812:	f0 cf       	rjmp	.-32     	; 0x7f4 <box_filled+0x68>
		}
	}

}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	08 95       	ret

00000822 <box_walls>:

// Darw a hollow box with side walls.
void box_walls(int x1, int y1, int z1, int x2, int y2, int z2)
{
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	dc 01       	movw	r26, r24
     834:	f9 01       	movw	r30, r18
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1>ix2)
     836:	28 17       	cp	r18, r24
     838:	39 07       	cpc	r19, r25
     83a:	14 f4       	brge	.+4      	; 0x840 <box_walls+0x1e>
     83c:	d9 01       	movw	r26, r18
     83e:	fc 01       	movw	r30, r24
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2)
			{
				cube[iz][iy] = byteline(x1,x2);
			} else
			{
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
     840:	06 17       	cp	r16, r22
     842:	17 07       	cpc	r17, r23
     844:	1c f4       	brge	.+6      	; 0x84c <box_walls+0x2a>
     846:	cb 01       	movw	r24, r22
     848:	b8 01       	movw	r22, r16
     84a:	8c 01       	movw	r16, r24
     84c:	e4 16       	cp	r14, r20
     84e:	f5 06       	cpc	r15, r21
     850:	1c f4       	brge	.+6      	; 0x858 <box_walls+0x36>
     852:	ca 01       	movw	r24, r20
     854:	a7 01       	movw	r20, r14
     856:	7c 01       	movw	r14, r24
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	9c 01       	movw	r18, r24
     85e:	0e 2e       	mov	r0, r30
     860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
     862:	22 0f       	add	r18, r18
     864:	33 1f       	adc	r19, r19
     866:	0a 94       	dec	r0
     868:	e2 f7       	brpl	.-8      	; 0x862 <__stack+0x3>
     86a:	0a 2e       	mov	r0, r26
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	0a 94       	dec	r0
     874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
     876:	c2 2e       	mov	r12, r18
     878:	c8 2a       	or	r12, r24

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
	return ((0xff<<start) & ~(0xff<<(end+1)));
     87a:	31 96       	adiw	r30, 0x01	; 1
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	9c 01       	movw	r18, r24
     882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
     884:	22 0f       	add	r18, r18
     886:	33 1f       	adc	r19, r19
     888:	ea 95       	dec	r30
     88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
     88c:	d2 2e       	mov	r13, r18
     88e:	d0 94       	com	r13
     890:	02 c0       	rjmp	.+4      	; 0x896 <__stack+0x37>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	aa 95       	dec	r26
     898:	e2 f7       	brpl	.-8      	; 0x892 <__stack+0x33>
     89a:	d8 22       	and	r13, r24
     89c:	9a 01       	movw	r18, r20
     89e:	21 c0       	rjmp	.+66     	; 0x8e2 <__stack+0x83>

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
		{	
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2)
     8a0:	a6 17       	cp	r26, r22
     8a2:	b7 07       	cpc	r27, r23
     8a4:	49 f0       	breq	.+18     	; 0x8b8 <__stack+0x59>
     8a6:	a0 17       	cp	r26, r16
     8a8:	b1 07       	cpc	r27, r17
     8aa:	31 f0       	breq	.+12     	; 0x8b8 <__stack+0x59>
     8ac:	24 17       	cp	r18, r20
     8ae:	35 07       	cpc	r19, r21
     8b0:	19 f0       	breq	.+6      	; 0x8b8 <__stack+0x59>
     8b2:	2e 15       	cp	r18, r14
     8b4:	3f 05       	cpc	r19, r15
     8b6:	39 f4       	brne	.+14     	; 0x8c6 <__stack+0x67>
			{
				cube[iz][iy] = byteline(x1,x2);
     8b8:	fe 01       	movw	r30, r28
     8ba:	ea 0f       	add	r30, r26
     8bc:	fb 1f       	adc	r31, r27
     8be:	eb 55       	subi	r30, 0x5B	; 91
     8c0:	ff 4f       	sbci	r31, 0xFF	; 255
     8c2:	d0 82       	st	Z, r13
     8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <__stack+0x77>
			} else
			{
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
     8c6:	fe 01       	movw	r30, r28
     8c8:	ea 0f       	add	r30, r26
     8ca:	fb 1f       	adc	r31, r27
     8cc:	eb 55       	subi	r30, 0x5B	; 91
     8ce:	ff 4f       	sbci	r31, 0xFF	; 255
     8d0:	80 81       	ld	r24, Z
     8d2:	8c 29       	or	r24, r12
     8d4:	80 83       	st	Z, r24
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
     8d6:	11 96       	adiw	r26, 0x01	; 1
     8d8:	0a 17       	cp	r16, r26
     8da:	1b 07       	cpc	r17, r27
     8dc:	0c f7       	brge	.-62     	; 0x8a0 <__stack+0x41>
	
	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
     8de:	2f 5f       	subi	r18, 0xFF	; 255
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	e2 16       	cp	r14, r18
     8e4:	f3 06       	cpc	r15, r19
     8e6:	44 f0       	brlt	.+16     	; 0x8f8 <__stack+0x99>
     8e8:	db 01       	movw	r26, r22
	{
		for (iy=y1;iy<=y2;iy++)
		{	
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2)
			{
				cube[iz][iy] = byteline(x1,x2);
     8ea:	e9 01       	movw	r28, r18
     8ec:	93 e0       	ldi	r25, 0x03	; 3
     8ee:	cc 0f       	add	r28, r28
     8f0:	dd 1f       	adc	r29, r29
     8f2:	9a 95       	dec	r25
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <__stack+0x8f>
     8f6:	f0 cf       	rjmp	.-32     	; 0x8d8 <__stack+0x79>
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
			}
		}
	}

}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	df 90       	pop	r13
     906:	cf 90       	pop	r12
     908:	08 95       	ret

0000090a <box_wireframe>:

// Draw a wireframe box. This only draws the corners and edges,
// no walls.
void box_wireframe(int x1, int y1, int z1, int x2, int y2, int z2)
{
     90a:	6f 92       	push	r6
     90c:	7f 92       	push	r7
     90e:	8f 92       	push	r8
     910:	9f 92       	push	r9
     912:	af 92       	push	r10
     914:	bf 92       	push	r11
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	3c 01       	movw	r6, r24
     928:	4b 01       	movw	r8, r22
     92a:	5a 01       	movw	r10, r20
     92c:	69 01       	movw	r12, r18
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1>ix2)
     92e:	28 17       	cp	r18, r24
     930:	39 07       	cpc	r19, r25
     932:	14 f4       	brge	.+4      	; 0x938 <box_wireframe+0x2e>
     934:	39 01       	movw	r6, r18
     936:	6c 01       	movw	r12, r24

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
	return ((0xff<<start) & ~(0xff<<(end+1)));
     938:	08 15       	cp	r16, r8
     93a:	19 05       	cpc	r17, r9
     93c:	1c f4       	brge	.+6      	; 0x944 <box_wireframe+0x3a>
     93e:	c4 01       	movw	r24, r8
     940:	48 01       	movw	r8, r16
     942:	8c 01       	movw	r16, r24
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	1c f4       	brge	.+6      	; 0x950 <box_wireframe+0x46>
     94a:	c5 01       	movw	r24, r10
     94c:	57 01       	movw	r10, r14
     94e:	7c 01       	movw	r14, r24
     950:	08 94       	sec
     952:	c1 1c       	adc	r12, r1
     954:	d1 1c       	adc	r13, r1
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	9c 01       	movw	r18, r24
     95c:	0c 2c       	mov	r0, r12
     95e:	02 c0       	rjmp	.+4      	; 0x964 <box_wireframe+0x5a>
     960:	22 0f       	add	r18, r18
     962:	33 1f       	adc	r19, r19
     964:	0a 94       	dec	r0
     966:	e2 f7       	brpl	.-8      	; 0x960 <box_wireframe+0x56>
     968:	08 94       	sec
     96a:	c1 08       	sbc	r12, r1
     96c:	d1 08       	sbc	r13, r1
     96e:	20 95       	com	r18
     970:	06 2c       	mov	r0, r6
     972:	02 c0       	rjmp	.+4      	; 0x978 <box_wireframe+0x6e>
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	0a 94       	dec	r0
     97a:	e2 f7       	brpl	.-8      	; 0x974 <box_wireframe+0x6a>
     97c:	28 23       	and	r18, r24
	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	// Lines along X axis
	cube[z1][y1] = byteline(x1,x2);
     97e:	d5 01       	movw	r26, r10
     980:	43 e0       	ldi	r20, 0x03	; 3
     982:	aa 0f       	add	r26, r26
     984:	bb 1f       	adc	r27, r27
     986:	4a 95       	dec	r20
     988:	e1 f7       	brne	.-8      	; 0x982 <box_wireframe+0x78>
     98a:	fd 01       	movw	r30, r26
     98c:	e8 0d       	add	r30, r8
     98e:	f9 1d       	adc	r31, r9
     990:	eb 55       	subi	r30, 0x5B	; 91
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	20 83       	st	Z, r18
	cube[z1][y2] = byteline(x1,x2);
     996:	a0 0f       	add	r26, r16
     998:	b1 1f       	adc	r27, r17
     99a:	ab 55       	subi	r26, 0x5B	; 91
     99c:	bf 4f       	sbci	r27, 0xFF	; 255
     99e:	2c 93       	st	X, r18
	cube[z2][y1] = byteline(x1,x2);
     9a0:	d7 01       	movw	r26, r14
     9a2:	33 e0       	ldi	r19, 0x03	; 3
     9a4:	aa 0f       	add	r26, r26
     9a6:	bb 1f       	adc	r27, r27
     9a8:	3a 95       	dec	r19
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <box_wireframe+0x9a>
     9ac:	fd 01       	movw	r30, r26
     9ae:	e8 0d       	add	r30, r8
     9b0:	f9 1d       	adc	r31, r9
     9b2:	eb 55       	subi	r30, 0x5B	; 91
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
     9b6:	20 83       	st	Z, r18
	cube[z2][y2] = byteline(x1,x2);
     9b8:	a0 0f       	add	r26, r16
     9ba:	b1 1f       	adc	r27, r17
     9bc:	ab 55       	subi	r26, 0x5B	; 91
     9be:	bf 4f       	sbci	r27, 0xFF	; 255
     9c0:	2c 93       	st	X, r18
     9c2:	e4 01       	movw	r28, r8
     9c4:	15 c0       	rjmp	.+42     	; 0x9f0 <box_wireframe+0xe6>

	// Lines along Y axis
	for (iy=y1;iy<=y2;iy++)
	{
		setvoxel(x1,iy,z1);
     9c6:	c3 01       	movw	r24, r6
     9c8:	be 01       	movw	r22, r28
     9ca:	a5 01       	movw	r20, r10
     9cc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
		setvoxel(x1,iy,z2);
     9d0:	c3 01       	movw	r24, r6
     9d2:	be 01       	movw	r22, r28
     9d4:	a7 01       	movw	r20, r14
     9d6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
		setvoxel(x2,iy,z1);
     9da:	c6 01       	movw	r24, r12
     9dc:	be 01       	movw	r22, r28
     9de:	a5 01       	movw	r20, r10
     9e0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
		setvoxel(x2,iy,z2);
     9e4:	c6 01       	movw	r24, r12
     9e6:	be 01       	movw	r22, r28
     9e8:	a7 01       	movw	r20, r14
     9ea:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
	cube[z1][y2] = byteline(x1,x2);
	cube[z2][y1] = byteline(x1,x2);
	cube[z2][y2] = byteline(x1,x2);

	// Lines along Y axis
	for (iy=y1;iy<=y2;iy++)
     9ee:	21 96       	adiw	r28, 0x01	; 1
     9f0:	0c 17       	cp	r16, r28
     9f2:	1d 07       	cpc	r17, r29
     9f4:	44 f7       	brge	.-48     	; 0x9c6 <box_wireframe+0xbc>
     9f6:	e5 01       	movw	r28, r10
     9f8:	15 c0       	rjmp	.+42     	; 0xa24 <box_wireframe+0x11a>
	}

	// Lines along Z axis
	for (iz=z1;iz<=z2;iz++)
	{
		setvoxel(x1,y1,iz);
     9fa:	c3 01       	movw	r24, r6
     9fc:	b4 01       	movw	r22, r8
     9fe:	ae 01       	movw	r20, r28
     a00:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
		setvoxel(x1,y2,iz);
     a04:	c3 01       	movw	r24, r6
     a06:	b8 01       	movw	r22, r16
     a08:	ae 01       	movw	r20, r28
     a0a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
		setvoxel(x2,y1,iz);
     a0e:	c6 01       	movw	r24, r12
     a10:	b4 01       	movw	r22, r8
     a12:	ae 01       	movw	r20, r28
     a14:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
		setvoxel(x2,y2,iz);
     a18:	c6 01       	movw	r24, r12
     a1a:	b8 01       	movw	r22, r16
     a1c:	ae 01       	movw	r20, r28
     a1e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
		setvoxel(x2,iy,z1);
		setvoxel(x2,iy,z2);
	}

	// Lines along Z axis
	for (iz=z1;iz<=z2;iz++)
     a22:	21 96       	adiw	r28, 0x01	; 1
     a24:	ec 16       	cp	r14, r28
     a26:	fd 06       	cpc	r15, r29
     a28:	44 f7       	brge	.-48     	; 0x9fa <box_wireframe+0xf0>
		setvoxel(x1,y2,iz);
		setvoxel(x2,y1,iz);
		setvoxel(x2,y2,iz);
	}

}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	df 90       	pop	r13
     a38:	cf 90       	pop	r12
     a3a:	bf 90       	pop	r11
     a3c:	af 90       	pop	r10
     a3e:	9f 90       	pop	r9
     a40:	8f 90       	pop	r8
     a42:	7f 90       	pop	r7
     a44:	6f 90       	pop	r6
     a46:	08 95       	ret

00000a48 <byteline>:

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
     a48:	6f 5f       	subi	r22, 0xFF	; 255
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	2f ef       	ldi	r18, 0xFF	; 255
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	a9 01       	movw	r20, r18
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <byteline+0x10>
     a54:	44 0f       	add	r20, r20
     a56:	55 1f       	adc	r21, r21
     a58:	6a 95       	dec	r22
     a5a:	e2 f7       	brpl	.-8      	; 0xa54 <byteline+0xc>
     a5c:	ba 01       	movw	r22, r20
     a5e:	60 95       	com	r22
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <byteline+0x1e>
     a62:	22 0f       	add	r18, r18
     a64:	33 1f       	adc	r19, r19
     a66:	8a 95       	dec	r24
     a68:	e2 f7       	brpl	.-8      	; 0xa62 <byteline+0x1a>
	return ((0xff<<start) & ~(0xff<<(end+1)));
}
     a6a:	86 2f       	mov	r24, r22
     a6c:	82 23       	and	r24, r18
     a6e:	08 95       	ret

00000a70 <flipbyte>:

// Flips a byte 180 degrees.
// MSB becomes LSB, LSB becomes MSB.
char flipbyte (char byte)
{
     a70:	48 2f       	mov	r20, r24

	flop = (flop & 0b11111110) | (0b00000001 & (byte >> 7));
	flop = (flop & 0b11111101) | (0b00000010 & (byte >> 5));
	flop = (flop & 0b11111011) | (0b00000100 & (byte >> 3));
	flop = (flop & 0b11110111) | (0b00001000 & (byte >> 1));
	flop = (flop & 0b11101111) | (0b00010000 & (byte << 1));
     a72:	28 2f       	mov	r18, r24
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	82 95       	swap	r24
     a78:	86 95       	lsr	r24
     a7a:	82 70       	andi	r24, 0x02	; 2
     a7c:	94 2f       	mov	r25, r20
     a7e:	99 1f       	adc	r25, r25
     a80:	99 27       	eor	r25, r25
     a82:	99 1f       	adc	r25, r25
     a84:	89 2b       	or	r24, r25
     a86:	94 2f       	mov	r25, r20
     a88:	96 95       	lsr	r25
     a8a:	96 95       	lsr	r25
     a8c:	96 95       	lsr	r25
     a8e:	94 70       	andi	r25, 0x04	; 4
     a90:	89 2b       	or	r24, r25
     a92:	46 95       	lsr	r20
     a94:	48 70       	andi	r20, 0x08	; 8
     a96:	84 2b       	or	r24, r20
     a98:	22 0f       	add	r18, r18
     a9a:	33 1f       	adc	r19, r19
     a9c:	92 2f       	mov	r25, r18
     a9e:	90 71       	andi	r25, 0x10	; 16
     aa0:	89 2b       	or	r24, r25
     aa2:	22 0f       	add	r18, r18
     aa4:	33 1f       	adc	r19, r19
     aa6:	22 0f       	add	r18, r18
     aa8:	33 1f       	adc	r19, r19
     aaa:	92 2f       	mov	r25, r18
     aac:	90 72       	andi	r25, 0x20	; 32
     aae:	89 2b       	or	r24, r25
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	22 0f       	add	r18, r18
     ab6:	33 1f       	adc	r19, r19
     ab8:	92 2f       	mov	r25, r18
     aba:	90 74       	andi	r25, 0x40	; 64
     abc:	89 2b       	or	r24, r25
     abe:	22 0f       	add	r18, r18
     ac0:	33 1f       	adc	r19, r19
     ac2:	22 0f       	add	r18, r18
     ac4:	33 1f       	adc	r19, r19
	flop = (flop & 0b11011111) | (0b00100000 & (byte << 3));
	flop = (flop & 0b10111111) | (0b01000000 & (byte << 5));
	flop = (flop & 0b01111111) | (0b10000000 & (byte << 7));
	return flop;
}
     ac6:	82 2b       	or	r24, r18
     ac8:	08 95       	ret

00000aca <line>:

// Draw a line between any coordinates in 3d space.
// Uses integer values for input, so dont expect smooth animations.
void line(int x1,int y1,int z1,int x2,int y2,int z2) {
     aca:	2f 92       	push	r2
     acc:	3f 92       	push	r3
     ace:	4f 92       	push	r4
     ad0:	5f 92       	push	r5
     ad2:	6f 92       	push	r6
     ad4:	7f 92       	push	r7
     ad6:	8f 92       	push	r8
     ad8:	9f 92       	push	r9
     ada:	af 92       	push	r10
     adc:	bf 92       	push	r11
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	df 93       	push	r29
     aec:	cf 93       	push	r28
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	2c 97       	sbiw	r28, 0x0c	; 12
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
    int pixel[3];

    pixel[0] = x1;
    pixel[1] = y1;
    pixel[2] = z1;
    dx = x2 - x1;
     afe:	28 1b       	sub	r18, r24
     b00:	39 0b       	sbc	r19, r25
    dy = y2 - y1;
     b02:	06 1b       	sub	r16, r22
     b04:	17 0b       	sbc	r17, r23
    dz = z2 - z1;
     b06:	e4 1a       	sub	r14, r20
     b08:	f5 0a       	sbc	r15, r21
    x_inc = (dx < 0) ? -1 : 1;
     b0a:	37 fd       	sbrc	r19, 7
     b0c:	05 c0       	rjmp	.+10     	; 0xb18 <line+0x4e>
     b0e:	a1 e0       	ldi	r26, 0x01	; 1
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	ba 87       	std	Y+10, r27	; 0x0a
     b14:	a9 87       	std	Y+9, r26	; 0x09
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <line+0x56>
     b18:	ef ef       	ldi	r30, 0xFF	; 255
     b1a:	ff ef       	ldi	r31, 0xFF	; 255
     b1c:	fa 87       	std	Y+10, r31	; 0x0a
     b1e:	e9 87       	std	Y+9, r30	; 0x09
    l = abs(dx);
     b20:	3c 87       	std	Y+12, r19	; 0x0c
     b22:	2b 87       	std	Y+11, r18	; 0x0b
     b24:	37 ff       	sbrs	r19, 7
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <line+0x68>
     b28:	30 95       	com	r19
     b2a:	21 95       	neg	r18
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	3c 87       	std	Y+12, r19	; 0x0c
     b30:	2b 87       	std	Y+11, r18	; 0x0b
    y_inc = (dy < 0) ? -1 : 1;
     b32:	17 fd       	sbrc	r17, 7
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <line+0x76>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	38 87       	std	Y+8, r19	; 0x08
     b3c:	2f 83       	std	Y+7, r18	; 0x07
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <line+0x7e>
     b40:	af ef       	ldi	r26, 0xFF	; 255
     b42:	bf ef       	ldi	r27, 0xFF	; 255
     b44:	b8 87       	std	Y+8, r27	; 0x08
     b46:	af 83       	std	Y+7, r26	; 0x07
    m = abs(dy);
     b48:	17 ff       	sbrs	r17, 7
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <line+0x88>
     b4c:	10 95       	com	r17
     b4e:	01 95       	neg	r16
     b50:	1f 4f       	sbci	r17, 0xFF	; 255
    z_inc = (dz < 0) ? -1 : 1;
     b52:	f7 fc       	sbrc	r15, 7
     b54:	05 c0       	rjmp	.+10     	; 0xb60 <line+0x96>
     b56:	e1 e0       	ldi	r30, 0x01	; 1
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	fe 83       	std	Y+6, r31	; 0x06
     b5c:	ed 83       	std	Y+5, r30	; 0x05
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <line+0x9e>
     b60:	2f ef       	ldi	r18, 0xFF	; 255
     b62:	3f ef       	ldi	r19, 0xFF	; 255
     b64:	3e 83       	std	Y+6, r19	; 0x06
     b66:	2d 83       	std	Y+5, r18	; 0x05
    n = abs(dz);
     b68:	f7 fe       	sbrs	r15, 7
     b6a:	04 c0       	rjmp	.+8      	; 0xb74 <line+0xaa>
     b6c:	f0 94       	com	r15
     b6e:	e1 94       	neg	r14
     b70:	f1 08       	sbc	r15, r1
     b72:	f3 94       	inc	r15
    dx2 = l << 1;
     b74:	ab 85       	ldd	r26, Y+11	; 0x0b
     b76:	bc 85       	ldd	r27, Y+12	; 0x0c
     b78:	aa 0f       	add	r26, r26
     b7a:	bb 1f       	adc	r27, r27
     b7c:	bc 83       	std	Y+4, r27	; 0x04
     b7e:	ab 83       	std	Y+3, r26	; 0x03
    dy2 = m << 1;
     b80:	f8 01       	movw	r30, r16
     b82:	ee 0f       	add	r30, r30
     b84:	ff 1f       	adc	r31, r31
     b86:	fa 83       	std	Y+2, r31	; 0x02
     b88:	e9 83       	std	Y+1, r30	; 0x01
    dz2 = n << 1;
     b8a:	17 01       	movw	r2, r14
     b8c:	22 0c       	add	r2, r2
     b8e:	33 1c       	adc	r3, r3

    if ((l >= m) && (l >= n)) {
     b90:	2b 85       	ldd	r18, Y+11	; 0x0b
     b92:	3c 85       	ldd	r19, Y+12	; 0x0c
     b94:	20 17       	cp	r18, r16
     b96:	31 07       	cpc	r19, r17
     b98:	0c f4       	brge	.+2      	; 0xb9c <line+0xd2>
     b9a:	44 c0       	rjmp	.+136    	; 0xc24 <line+0x15a>
     b9c:	2e 15       	cp	r18, r14
     b9e:	3f 05       	cpc	r19, r15
     ba0:	dc f1       	brlt	.+118    	; 0xc18 <line+0x14e>
        err_1 = dy2 - l;
     ba2:	7f 01       	movw	r14, r30
     ba4:	e2 1a       	sub	r14, r18
     ba6:	f3 0a       	sbc	r15, r19
        err_2 = dz2 - l;
     ba8:	81 01       	movw	r16, r2
     baa:	02 1b       	sub	r16, r18
     bac:	13 0b       	sbc	r17, r19
     bae:	3c 01       	movw	r6, r24
     bb0:	4a 01       	movw	r8, r20
     bb2:	5b 01       	movw	r10, r22
     bb4:	44 24       	eor	r4, r4
     bb6:	55 24       	eor	r5, r5
     bb8:	28 c0       	rjmp	.+80     	; 0xc0a <line+0x140>
        for (i = 0; i < l; i++) {
			setvoxel(pixel[0],pixel[1],pixel[2]);
     bba:	c3 01       	movw	r24, r6
     bbc:	b5 01       	movw	r22, r10
     bbe:	a4 01       	movw	r20, r8
     bc0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
            if (err_1 > 0) {
     bc4:	1e 14       	cp	r1, r14
     bc6:	1f 04       	cpc	r1, r15
     bc8:	44 f4       	brge	.+16     	; 0xbda <line+0x110>
                pixel[1] += y_inc;
     bca:	8f 81       	ldd	r24, Y+7	; 0x07
     bcc:	98 85       	ldd	r25, Y+8	; 0x08
     bce:	a8 0e       	add	r10, r24
     bd0:	b9 1e       	adc	r11, r25
                err_1 -= dx2;
     bd2:	ab 81       	ldd	r26, Y+3	; 0x03
     bd4:	bc 81       	ldd	r27, Y+4	; 0x04
     bd6:	ea 1a       	sub	r14, r26
     bd8:	fb 0a       	sbc	r15, r27
            }
            if (err_2 > 0) {
     bda:	10 16       	cp	r1, r16
     bdc:	11 06       	cpc	r1, r17
     bde:	44 f4       	brge	.+16     	; 0xbf0 <line+0x126>
                pixel[2] += z_inc;
     be0:	ed 81       	ldd	r30, Y+5	; 0x05
     be2:	fe 81       	ldd	r31, Y+6	; 0x06
     be4:	8e 0e       	add	r8, r30
     be6:	9f 1e       	adc	r9, r31
                err_2 -= dx2;
     be8:	2b 81       	ldd	r18, Y+3	; 0x03
     bea:	3c 81       	ldd	r19, Y+4	; 0x04
     bec:	02 1b       	sub	r16, r18
     bee:	13 0b       	sbc	r17, r19
            }
            err_1 += dy2;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	e8 0e       	add	r14, r24
     bf6:	f9 1e       	adc	r15, r25
            err_2 += dz2;
     bf8:	02 0d       	add	r16, r2
     bfa:	13 1d       	adc	r17, r3
    dz2 = n << 1;

    if ((l >= m) && (l >= n)) {
        err_1 = dy2 - l;
        err_2 = dz2 - l;
        for (i = 0; i < l; i++) {
     bfc:	08 94       	sec
     bfe:	41 1c       	adc	r4, r1
     c00:	51 1c       	adc	r5, r1
     c02:	a9 85       	ldd	r26, Y+9	; 0x09
     c04:	ba 85       	ldd	r27, Y+10	; 0x0a
     c06:	6a 0e       	add	r6, r26
     c08:	7b 1e       	adc	r7, r27
     c0a:	63 01       	movw	r12, r6
     c0c:	eb 85       	ldd	r30, Y+11	; 0x0b
     c0e:	fc 85       	ldd	r31, Y+12	; 0x0c
     c10:	4e 16       	cp	r4, r30
     c12:	5f 06       	cpc	r5, r31
     c14:	94 f2       	brlt	.-92     	; 0xbba <line+0xf0>
     c16:	90 c0       	rjmp	.+288    	; 0xd38 <line+0x26e>
            }
            err_1 += dy2;
            err_2 += dz2;
            pixel[0] += x_inc;
        }
    } else if ((m >= l) && (m >= n)) {
     c18:	2b 85       	ldd	r18, Y+11	; 0x0b
     c1a:	3c 85       	ldd	r19, Y+12	; 0x0c
     c1c:	02 17       	cp	r16, r18
     c1e:	13 07       	cpc	r17, r19
     c20:	0c f4       	brge	.+2      	; 0xc24 <line+0x15a>
     c22:	48 c0       	rjmp	.+144    	; 0xcb4 <line+0x1ea>
     c24:	0e 15       	cp	r16, r14
     c26:	1f 05       	cpc	r17, r15
     c28:	0c f4       	brge	.+2      	; 0xc2c <line+0x162>
     c2a:	44 c0       	rjmp	.+136    	; 0xcb4 <line+0x1ea>
        err_1 = dx2 - m;
     c2c:	eb 80       	ldd	r14, Y+3	; 0x03
     c2e:	fc 80       	ldd	r15, Y+4	; 0x04
     c30:	e0 1a       	sub	r14, r16
     c32:	f1 0a       	sbc	r15, r17
        err_2 = dz2 - m;
     c34:	d1 01       	movw	r26, r2
     c36:	a0 1b       	sub	r26, r16
     c38:	b1 0b       	sbc	r27, r17
     c3a:	bc 87       	std	Y+12, r27	; 0x0c
     c3c:	ab 87       	std	Y+11, r26	; 0x0b
     c3e:	3b 01       	movw	r6, r22
     c40:	4a 01       	movw	r8, r20
     c42:	6c 01       	movw	r12, r24
     c44:	44 24       	eor	r4, r4
     c46:	55 24       	eor	r5, r5
     c48:	30 c0       	rjmp	.+96     	; 0xcaa <line+0x1e0>
        for (i = 0; i < m; i++) {
			setvoxel(pixel[0],pixel[1],pixel[2]);
     c4a:	c6 01       	movw	r24, r12
     c4c:	b3 01       	movw	r22, r6
     c4e:	a4 01       	movw	r20, r8
     c50:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
            if (err_1 > 0) {
     c54:	1e 14       	cp	r1, r14
     c56:	1f 04       	cpc	r1, r15
     c58:	44 f4       	brge	.+16     	; 0xc6a <line+0x1a0>
                pixel[0] += x_inc;
     c5a:	e9 85       	ldd	r30, Y+9	; 0x09
     c5c:	fa 85       	ldd	r31, Y+10	; 0x0a
     c5e:	ce 0e       	add	r12, r30
     c60:	df 1e       	adc	r13, r31
                err_1 -= dy2;
     c62:	29 81       	ldd	r18, Y+1	; 0x01
     c64:	3a 81       	ldd	r19, Y+2	; 0x02
     c66:	e2 1a       	sub	r14, r18
     c68:	f3 0a       	sbc	r15, r19
            }
            if (err_2 > 0) {
     c6a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c6c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c6e:	18 16       	cp	r1, r24
     c70:	19 06       	cpc	r1, r25
     c72:	54 f4       	brge	.+20     	; 0xc88 <line+0x1be>
                pixel[2] += z_inc;
     c74:	ad 81       	ldd	r26, Y+5	; 0x05
     c76:	be 81       	ldd	r27, Y+6	; 0x06
     c78:	8a 0e       	add	r8, r26
     c7a:	9b 1e       	adc	r9, r27
                err_2 -= dy2;
     c7c:	e9 81       	ldd	r30, Y+1	; 0x01
     c7e:	fa 81       	ldd	r31, Y+2	; 0x02
     c80:	8e 1b       	sub	r24, r30
     c82:	9f 0b       	sbc	r25, r31
     c84:	9c 87       	std	Y+12, r25	; 0x0c
     c86:	8b 87       	std	Y+11, r24	; 0x0b
            }
            err_1 += dx2;
     c88:	2b 81       	ldd	r18, Y+3	; 0x03
     c8a:	3c 81       	ldd	r19, Y+4	; 0x04
     c8c:	e2 0e       	add	r14, r18
     c8e:	f3 1e       	adc	r15, r19
            err_2 += dz2;
     c90:	8b 85       	ldd	r24, Y+11	; 0x0b
     c92:	9c 85       	ldd	r25, Y+12	; 0x0c
     c94:	82 0d       	add	r24, r2
     c96:	93 1d       	adc	r25, r3
     c98:	9c 87       	std	Y+12, r25	; 0x0c
     c9a:	8b 87       	std	Y+11, r24	; 0x0b
            pixel[0] += x_inc;
        }
    } else if ((m >= l) && (m >= n)) {
        err_1 = dx2 - m;
        err_2 = dz2 - m;
        for (i = 0; i < m; i++) {
     c9c:	08 94       	sec
     c9e:	41 1c       	adc	r4, r1
     ca0:	51 1c       	adc	r5, r1
     ca2:	af 81       	ldd	r26, Y+7	; 0x07
     ca4:	b8 85       	ldd	r27, Y+8	; 0x08
     ca6:	6a 0e       	add	r6, r26
     ca8:	7b 1e       	adc	r7, r27
     caa:	53 01       	movw	r10, r6
     cac:	40 16       	cp	r4, r16
     cae:	51 06       	cpc	r5, r17
     cb0:	64 f2       	brlt	.-104    	; 0xc4a <line+0x180>
     cb2:	42 c0       	rjmp	.+132    	; 0xd38 <line+0x26e>
            err_1 += dx2;
            err_2 += dz2;
            pixel[1] += y_inc;
        }
    } else {
        err_1 = dy2 - n;
     cb4:	09 81       	ldd	r16, Y+1	; 0x01
     cb6:	1a 81       	ldd	r17, Y+2	; 0x02
     cb8:	0e 19       	sub	r16, r14
     cba:	1f 09       	sbc	r17, r15
        err_2 = dx2 - n;
     cbc:	eb 81       	ldd	r30, Y+3	; 0x03
     cbe:	fc 81       	ldd	r31, Y+4	; 0x04
     cc0:	ee 19       	sub	r30, r14
     cc2:	ff 09       	sbc	r31, r15
     cc4:	fc 87       	std	Y+12, r31	; 0x0c
     cc6:	eb 87       	std	Y+11, r30	; 0x0b
     cc8:	3a 01       	movw	r6, r20
     cca:	5b 01       	movw	r10, r22
     ccc:	6c 01       	movw	r12, r24
     cce:	44 24       	eor	r4, r4
     cd0:	55 24       	eor	r5, r5
     cd2:	2e c0       	rjmp	.+92     	; 0xd30 <line+0x266>
        for (i = 0; i < n; i++) {
			setvoxel(pixel[0],pixel[1],pixel[2]);
     cd4:	c6 01       	movw	r24, r12
     cd6:	b5 01       	movw	r22, r10
     cd8:	a3 01       	movw	r20, r6
     cda:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
            if (err_1 > 0) {
     cde:	10 16       	cp	r1, r16
     ce0:	11 06       	cpc	r1, r17
     ce2:	34 f4       	brge	.+12     	; 0xcf0 <line+0x226>
                pixel[1] += y_inc;
     ce4:	2f 81       	ldd	r18, Y+7	; 0x07
     ce6:	38 85       	ldd	r19, Y+8	; 0x08
     ce8:	a2 0e       	add	r10, r18
     cea:	b3 1e       	adc	r11, r19
                err_1 -= dz2;
     cec:	02 19       	sub	r16, r2
     cee:	13 09       	sbc	r17, r3
            }
            if (err_2 > 0) {
     cf0:	8b 85       	ldd	r24, Y+11	; 0x0b
     cf2:	9c 85       	ldd	r25, Y+12	; 0x0c
     cf4:	18 16       	cp	r1, r24
     cf6:	19 06       	cpc	r1, r25
     cf8:	44 f4       	brge	.+16     	; 0xd0a <line+0x240>
                pixel[0] += x_inc;
     cfa:	a9 85       	ldd	r26, Y+9	; 0x09
     cfc:	ba 85       	ldd	r27, Y+10	; 0x0a
     cfe:	ca 0e       	add	r12, r26
     d00:	db 1e       	adc	r13, r27
                err_2 -= dz2;
     d02:	82 19       	sub	r24, r2
     d04:	93 09       	sbc	r25, r3
     d06:	9c 87       	std	Y+12, r25	; 0x0c
     d08:	8b 87       	std	Y+11, r24	; 0x0b
            }
            err_1 += dy2;
     d0a:	e9 81       	ldd	r30, Y+1	; 0x01
     d0c:	fa 81       	ldd	r31, Y+2	; 0x02
     d0e:	0e 0f       	add	r16, r30
     d10:	1f 1f       	adc	r17, r31
            err_2 += dx2;
     d12:	2b 85       	ldd	r18, Y+11	; 0x0b
     d14:	3c 85       	ldd	r19, Y+12	; 0x0c
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	28 0f       	add	r18, r24
     d1c:	39 1f       	adc	r19, r25
     d1e:	3c 87       	std	Y+12, r19	; 0x0c
     d20:	2b 87       	std	Y+11, r18	; 0x0b
            pixel[1] += y_inc;
        }
    } else {
        err_1 = dy2 - n;
        err_2 = dx2 - n;
        for (i = 0; i < n; i++) {
     d22:	08 94       	sec
     d24:	41 1c       	adc	r4, r1
     d26:	51 1c       	adc	r5, r1
     d28:	ad 81       	ldd	r26, Y+5	; 0x05
     d2a:	be 81       	ldd	r27, Y+6	; 0x06
     d2c:	6a 0e       	add	r6, r26
     d2e:	7b 1e       	adc	r7, r27
     d30:	43 01       	movw	r8, r6
     d32:	4e 14       	cp	r4, r14
     d34:	5f 04       	cpc	r5, r15
     d36:	74 f2       	brlt	.-100    	; 0xcd4 <line+0x20a>
            err_1 += dy2;
            err_2 += dx2;
            pixel[2] += z_inc;
        }
    }
	setvoxel(pixel[0],pixel[1],pixel[2]);
     d38:	c6 01       	movw	r24, r12
     d3a:	b5 01       	movw	r22, r10
     d3c:	a4 01       	movw	r20, r8
     d3e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
}
     d42:	2c 96       	adiw	r28, 0x0c	; 12
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	bf 90       	pop	r11
     d60:	af 90       	pop	r10
     d62:	9f 90       	pop	r9
     d64:	8f 90       	pop	r8
     d66:	7f 90       	pop	r7
     d68:	6f 90       	pop	r6
     d6a:	5f 90       	pop	r5
     d6c:	4f 90       	pop	r4
     d6e:	3f 90       	pop	r3
     d70:	2f 90       	pop	r2
     d72:	08 95       	ret

00000d74 <delay_ms>:
// This is not calibrated to milliseconds,
// but we had allready made to many effects using this
// calibration when we figured it might be a good idea
// to calibrate it.
void delay_ms(uint16_t x)
{
     d74:	0b c0       	rjmp	.+22     	; 0xd8c <delay_ms+0x18>
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     d76:	20 e0       	ldi	r18, 0x00	; 0
    for ( y = 0 ; y < 90 ; y++){
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
     d78:	00 00       	nop
     d7a:	00 00       	nop
     d7c:	00 00       	nop
     d7e:	00 00       	nop
     d80:	00 00       	nop
     d82:	00 00       	nop
// to calibrate it.
void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    for ( y = 0 ; y < 90 ; y++){
     d84:	2f 5f       	subi	r18, 0xFF	; 255
     d86:	2a 35       	cpi	r18, 0x5A	; 90
     d88:	b9 f7       	brne	.-18     	; 0xd78 <delay_ms+0x4>
// calibration when we figured it might be a good idea
// to calibrate it.
void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	99 f7       	brne	.-26     	; 0xd76 <delay_ms+0x2>
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
      }
    }
  }
}
     d90:	08 95       	ret

00000d92 <shift>:
// Shift the entire contents of the cube along an axis
// This is great for effects where you want to draw something
// on one side of the cube and have it flow towards the other
// side. Like rain flowing down the Z axiz.
void shift (char axis, int direction)
{
     d92:	2f 92       	push	r2
     d94:	3f 92       	push	r3
     d96:	4f 92       	push	r4
     d98:	5f 92       	push	r5
     d9a:	6f 92       	push	r6
     d9c:	7f 92       	push	r7
     d9e:	9f 92       	push	r9
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	98 2e       	mov	r9, r24
     db6:	5b 01       	movw	r10, r22
     db8:	cc 24       	eor	r12, r12
     dba:	dd 24       	eor	r13, r13
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
	{
		if (direction == -1)
     dbc:	47 e0       	ldi	r20, 0x07	; 7
     dbe:	24 2e       	mov	r2, r20
     dc0:	31 2c       	mov	r3, r1
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	a8 16       	cp	r10, r24
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	b8 06       	cpc	r11, r24
     dca:	11 f4       	brne	.+4      	; 0xdd0 <shift+0x3e>
     dcc:	76 01       	movw	r14, r12
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <shift+0x44>
     dd0:	71 01       	movw	r14, r2
     dd2:	ec 18       	sub	r14, r12
     dd4:	fd 08       	sbc	r15, r13
     dd6:	00 e0       	ldi	r16, 0x00	; 0
     dd8:	10 e0       	ldi	r17, 0x00	; 0
				if (direction == -1)
				{
					iii = ii+1;
				} else
				{
					iii = ii-1;
     dda:	27 01       	movw	r4, r14
     ddc:	08 94       	sec
     dde:	41 08       	sbc	r4, r1
     de0:	51 08       	sbc	r5, r1
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
				{
					iii = ii+1;
     de2:	37 01       	movw	r6, r14
     de4:	08 94       	sec
     de6:	61 1c       	adc	r6, r1
     de8:	71 1c       	adc	r7, r1
     dea:	3a c0       	rjmp	.+116    	; 0xe60 <shift+0xce>
	
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	a8 16       	cp	r10, r24
     df0:	8f ef       	ldi	r24, 0xFF	; 255
     df2:	b8 06       	cpc	r11, r24
     df4:	11 f4       	brne	.+4      	; 0xdfa <shift+0x68>
				{
					iii = ii+1;
     df6:	c3 01       	movw	r24, r6
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <shift+0x6a>
				} else
				{
					iii = ii-1;
     dfa:	c2 01       	movw	r24, r4
     dfc:	ac 01       	movw	r20, r24
				}
				
				if (axis == AXIS_Z)
     dfe:	8a e7       	ldi	r24, 0x7A	; 122
     e00:	98 16       	cp	r9, r24
     e02:	49 f4       	brne	.+18     	; 0xe16 <shift+0x84>
				{
					state = getvoxel(x,y,iii);
     e04:	c8 01       	movw	r24, r16
     e06:	be 01       	movw	r22, r28
     e08:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
     e0c:	28 2f       	mov	r18, r24
					altervoxel(x,y,ii,state);
     e0e:	c8 01       	movw	r24, r16
     e10:	be 01       	movw	r22, r28
     e12:	a7 01       	movw	r20, r14
     e14:	19 c0       	rjmp	.+50     	; 0xe48 <shift+0xb6>
				}
				
				if (axis == AXIS_Y)
     e16:	89 e7       	ldi	r24, 0x79	; 121
     e18:	98 16       	cp	r9, r24
     e1a:	51 f4       	brne	.+20     	; 0xe30 <shift+0x9e>
				{
					state = getvoxel(x,iii,y);
     e1c:	c8 01       	movw	r24, r16
     e1e:	ba 01       	movw	r22, r20
     e20:	ae 01       	movw	r20, r28
     e22:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
     e26:	28 2f       	mov	r18, r24
					altervoxel(x,ii,y,state);
     e28:	c8 01       	movw	r24, r16
     e2a:	b7 01       	movw	r22, r14
     e2c:	ae 01       	movw	r20, r28
     e2e:	0c c0       	rjmp	.+24     	; 0xe48 <shift+0xb6>
				}
				
				if (axis == AXIS_X)
     e30:	88 e7       	ldi	r24, 0x78	; 120
     e32:	98 16       	cp	r9, r24
     e34:	61 f4       	brne	.+24     	; 0xe4e <shift+0xbc>
				{
					state = getvoxel(iii,y,x);
     e36:	ca 01       	movw	r24, r20
     e38:	be 01       	movw	r22, r28
     e3a:	a8 01       	movw	r20, r16
     e3c:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
     e40:	28 2f       	mov	r18, r24
					altervoxel(ii,y,x,state);
     e42:	c7 01       	movw	r24, r14
     e44:	be 01       	movw	r22, r28
     e46:	a8 01       	movw	r20, r16
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	0e 94 26 02 	call	0x44c	; 0x44c <altervoxel>
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
     e4e:	21 96       	adiw	r28, 0x01	; 1
     e50:	c8 30       	cpi	r28, 0x08	; 8
     e52:	d1 05       	cpc	r29, r1
     e54:	59 f6       	brne	.-106    	; 0xdec <shift+0x5a>
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
     e56:	0f 5f       	subi	r16, 0xFF	; 255
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	08 30       	cpi	r16, 0x08	; 8
     e5c:	11 05       	cpc	r17, r1
     e5e:	19 f0       	breq	.+6      	; 0xe66 <shift+0xd4>
     e60:	c0 e0       	ldi	r28, 0x00	; 0
     e62:	d0 e0       	ldi	r29, 0x00	; 0
     e64:	c3 cf       	rjmp	.-122    	; 0xdec <shift+0x5a>
{
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
     e66:	08 94       	sec
     e68:	c1 1c       	adc	r12, r1
     e6a:	d1 1c       	adc	r13, r1
     e6c:	88 e0       	ldi	r24, 0x08	; 8
     e6e:	c8 16       	cp	r12, r24
     e70:	d1 04       	cpc	r13, r1
     e72:	09 f0       	breq	.+2      	; 0xe76 <shift+0xe4>
     e74:	a6 cf       	rjmp	.-180    	; 0xdc2 <shift+0x30>
				}
			}
		}
	}
	
	if (direction == -1)
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	a8 16       	cp	r10, r24
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	b8 06       	cpc	r11, r24
     e7e:	19 f0       	breq	.+6      	; 0xe86 <shift+0xf4>
     e80:	ee 24       	eor	r14, r14
     e82:	ff 24       	eor	r15, r15
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <shift+0xfa>
     e86:	37 e0       	ldi	r19, 0x07	; 7
     e88:	e3 2e       	mov	r14, r19
     e8a:	f1 2c       	mov	r15, r1
     e8c:	00 e0       	ldi	r16, 0x00	; 0
     e8e:	10 e0       	ldi	r17, 0x00	; 0
     e90:	1f c0       	rjmp	.+62     	; 0xed0 <shift+0x13e>
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
		{
			if (axis == AXIS_Z)
     e92:	8a e7       	ldi	r24, 0x7A	; 122
     e94:	98 16       	cp	r9, r24
     e96:	21 f4       	brne	.+8      	; 0xea0 <shift+0x10e>
				clrvoxel(x,y,i);
     e98:	c8 01       	movw	r24, r16
     e9a:	be 01       	movw	r22, r28
     e9c:	a7 01       	movw	r20, r14
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <shift+0x128>
				
			if (axis == AXIS_Y)
     ea0:	89 e7       	ldi	r24, 0x79	; 121
     ea2:	98 16       	cp	r9, r24
     ea4:	21 f4       	brne	.+8      	; 0xeae <shift+0x11c>
				clrvoxel(x,i,y);
     ea6:	c8 01       	movw	r24, r16
     ea8:	b7 01       	movw	r22, r14
     eaa:	ae 01       	movw	r20, r28
     eac:	06 c0       	rjmp	.+12     	; 0xeba <shift+0x128>
			
			if (axis == AXIS_X)
     eae:	88 e7       	ldi	r24, 0x78	; 120
     eb0:	98 16       	cp	r9, r24
     eb2:	29 f4       	brne	.+10     	; 0xebe <shift+0x12c>
				clrvoxel(i,y,x);
     eb4:	c7 01       	movw	r24, r14
     eb6:	be 01       	movw	r22, r28
     eb8:	a8 01       	movw	r20, r16
     eba:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
     ebe:	21 96       	adiw	r28, 0x01	; 1
     ec0:	c8 30       	cpi	r28, 0x08	; 8
     ec2:	d1 05       	cpc	r29, r1
     ec4:	31 f7       	brne	.-52     	; 0xe92 <shift+0x100>
	} else
	{
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
     ec6:	0f 5f       	subi	r16, 0xFF	; 255
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	08 30       	cpi	r16, 0x08	; 8
     ecc:	11 05       	cpc	r17, r1
     ece:	19 f0       	breq	.+6      	; 0xed6 <shift+0x144>
     ed0:	c0 e0       	ldi	r28, 0x00	; 0
     ed2:	d0 e0       	ldi	r29, 0x00	; 0
     ed4:	de cf       	rjmp	.-68     	; 0xe92 <shift+0x100>
			
			if (axis == AXIS_X)
				clrvoxel(i,y,x);
		}
	}
}
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	df 90       	pop	r13
     ee4:	cf 90       	pop	r12
     ee6:	bf 90       	pop	r11
     ee8:	af 90       	pop	r10
     eea:	9f 90       	pop	r9
     eec:	7f 90       	pop	r7
     eee:	6f 90       	pop	r6
     ef0:	5f 90       	pop	r5
     ef2:	4f 90       	pop	r4
     ef4:	3f 90       	pop	r3
     ef6:	2f 90       	pop	r2
     ef8:	08 95       	ret

00000efa <drawCircle>:
        }
    }
}

//Circle Draw
void drawCircle(int x0, int y0, int z0, int radius){
     efa:	2f 92       	push	r2
     efc:	3f 92       	push	r3
     efe:	4f 92       	push	r4
     f00:	5f 92       	push	r5
     f02:	6f 92       	push	r6
     f04:	7f 92       	push	r7
     f06:	8f 92       	push	r8
     f08:	9f 92       	push	r9
     f0a:	af 92       	push	r10
     f0c:	bf 92       	push	r11
     f0e:	cf 92       	push	r12
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <drawCircle+0x26>
     f20:	00 d0       	rcall	.+0      	; 0xf22 <drawCircle+0x28>
     f22:	00 d0       	rcall	.+0      	; 0xf24 <drawCircle+0x2a>
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	9a 83       	std	Y+2, r25	; 0x02
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	7c 83       	std	Y+4, r23	; 0x04
     f2e:	6b 83       	std	Y+3, r22	; 0x03
     f30:	1a 01       	movw	r2, r20
  int r = radius, t = 0;
  int radiusError = 1-r;
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	66 2e       	mov	r6, r22
     f36:	71 2c       	mov	r7, r1
     f38:	62 1a       	sub	r6, r18
     f3a:	73 0a       	sbc	r7, r19
     f3c:	29 01       	movw	r4, r18
     f3e:	1e 82       	std	Y+6, r1	; 0x06
     f40:	1d 82       	std	Y+5, r1	; 0x05
     f42:	67 c0       	rjmp	.+206    	; 0x1012 <drawCircle+0x118>
 
  while(r >= t){
    setvoxel(r + x0, t + y0,z0);
     f44:	89 80       	ldd	r8, Y+1	; 0x01
     f46:	9a 80       	ldd	r9, Y+2	; 0x02
     f48:	84 0c       	add	r8, r4
     f4a:	95 1c       	adc	r9, r5
        }
    }
}

//Circle Draw
void drawCircle(int x0, int y0, int z0, int radius){
     f4c:	eb 80       	ldd	r14, Y+3	; 0x03
     f4e:	fc 80       	ldd	r15, Y+4	; 0x04
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	e8 0e       	add	r14, r24
     f56:	f9 1e       	adc	r15, r25
  int r = radius, t = 0;
  int radiusError = 1-r;
 
  while(r >= t){
    setvoxel(r + x0, t + y0,z0);
     f58:	c4 01       	movw	r24, r8
     f5a:	b7 01       	movw	r22, r14
     f5c:	a1 01       	movw	r20, r2
     f5e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
        }
    }
}

//Circle Draw
void drawCircle(int x0, int y0, int z0, int radius){
     f62:	a9 80       	ldd	r10, Y+1	; 0x01
     f64:	ba 80       	ldd	r11, Y+2	; 0x02
     f66:	ed 81       	ldd	r30, Y+5	; 0x05
     f68:	fe 81       	ldd	r31, Y+6	; 0x06
     f6a:	ae 0e       	add	r10, r30
     f6c:	bf 1e       	adc	r11, r31
  int r = radius, t = 0;
  int radiusError = 1-r;
 
  while(r >= t){
    setvoxel(r + x0, t + y0,z0);
    setvoxel(t + x0, r + y0,z0);
     f6e:	cb 80       	ldd	r12, Y+3	; 0x03
     f70:	dc 80       	ldd	r13, Y+4	; 0x04
     f72:	c4 0c       	add	r12, r4
     f74:	d5 1c       	adc	r13, r5
     f76:	c5 01       	movw	r24, r10
     f78:	b6 01       	movw	r22, r12
     f7a:	a1 01       	movw	r20, r2
     f7c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    setvoxel(-r + x0, t + y0,z0);
     f80:	09 81       	ldd	r16, Y+1	; 0x01
     f82:	1a 81       	ldd	r17, Y+2	; 0x02
     f84:	04 19       	sub	r16, r4
     f86:	15 09       	sbc	r17, r5
     f88:	c8 01       	movw	r24, r16
     f8a:	b7 01       	movw	r22, r14
     f8c:	a1 01       	movw	r20, r2
     f8e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
     f92:	e9 80       	ldd	r14, Y+1	; 0x01
     f94:	fa 80       	ldd	r15, Y+2	; 0x02
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	e8 1a       	sub	r14, r24
     f9c:	f9 0a       	sbc	r15, r25
    setvoxel(-t + x0, r + y0,z0);
     f9e:	c7 01       	movw	r24, r14
     fa0:	b6 01       	movw	r22, r12
     fa2:	a1 01       	movw	r20, r2
     fa4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
     fa8:	cb 80       	ldd	r12, Y+3	; 0x03
     faa:	dc 80       	ldd	r13, Y+4	; 0x04
     fac:	ed 81       	ldd	r30, Y+5	; 0x05
     fae:	fe 81       	ldd	r31, Y+6	; 0x06
     fb0:	ce 1a       	sub	r12, r30
     fb2:	df 0a       	sbc	r13, r31
    setvoxel(-r + x0, -t + y0,z0);
     fb4:	c8 01       	movw	r24, r16
     fb6:	b6 01       	movw	r22, r12
     fb8:	a1 01       	movw	r20, r2
     fba:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    setvoxel(-t + x0, -r + y0,z0);
     fbe:	0b 81       	ldd	r16, Y+3	; 0x03
     fc0:	1c 81       	ldd	r17, Y+4	; 0x04
     fc2:	04 19       	sub	r16, r4
     fc4:	15 09       	sbc	r17, r5
     fc6:	c7 01       	movw	r24, r14
     fc8:	b8 01       	movw	r22, r16
     fca:	a1 01       	movw	r20, r2
     fcc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    setvoxel(r + x0, -t + y0,z0);
     fd0:	c4 01       	movw	r24, r8
     fd2:	b6 01       	movw	r22, r12
     fd4:	a1 01       	movw	r20, r2
     fd6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    setvoxel(t + x0, -r + y0,z0);
     fda:	c5 01       	movw	r24, r10
     fdc:	b8 01       	movw	r22, r16
     fde:	a1 01       	movw	r20, r2
     fe0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    t++;
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
    if (radiusError<0){
     fee:	77 fe       	sbrs	r7, 7
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <drawCircle+0x100>
      radiusError += 2 * t + 1;
     ff2:	08 94       	sec
     ff4:	61 1c       	adc	r6, r1
     ff6:	71 1c       	adc	r7, r1
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <drawCircle+0x110>
    }
    else{
      r--;
     ffa:	08 94       	sec
     ffc:	41 08       	sbc	r4, r1
     ffe:	51 08       	sbc	r5, r1
      radiusError += 2 * (t - r + 1);
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	84 19       	sub	r24, r4
    1008:	95 09       	sbc	r25, r5
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	68 0e       	add	r6, r24
    1010:	79 1e       	adc	r7, r25
//Circle Draw
void drawCircle(int x0, int y0, int z0, int radius){
  int r = radius, t = 0;
  int radiusError = 1-r;
 
  while(r >= t){
    1012:	ed 81       	ldd	r30, Y+5	; 0x05
    1014:	fe 81       	ldd	r31, Y+6	; 0x06
    1016:	4e 16       	cp	r4, r30
    1018:	5f 06       	cpc	r5, r31
    101a:	0c f0       	brlt	.+2      	; 0x101e <drawCircle+0x124>
    101c:	93 cf       	rjmp	.-218    	; 0xf44 <drawCircle+0x4a>
    else{
      r--;
      radiusError += 2 * (t - r + 1);
    }
  }
}
    101e:	26 96       	adiw	r28, 0x06	; 6
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	bf 90       	pop	r11
    103c:	af 90       	pop	r10
    103e:	9f 90       	pop	r9
    1040:	8f 90       	pop	r8
    1042:	7f 90       	pop	r7
    1044:	6f 90       	pop	r6
    1046:	5f 90       	pop	r5
    1048:	4f 90       	pop	r4
    104a:	3f 90       	pop	r3
    104c:	2f 90       	pop	r2
    104e:	08 95       	ret

00001050 <draw3DSphere>:
		else{
		  x--;
		  radiusError+=2*(y-x+1);
		}
	}*/
}
    1050:	08 95       	ret

00001052 <arrayCopy>:
		  radiusError+=2*(y-x+1);
		}
	}
}*/

void arrayCopy(int arrayTo[], int arrayFrom[], int arrSize){
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ea 01       	movw	r28, r20
    1058:	db 01       	movw	r26, r22
    105a:	fc 01       	movw	r30, r24
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	06 c0       	rjmp	.+12     	; 0x106e <arrayCopy+0x1c>
	int i;
	
	for(i=0; i<arrSize; i++){
		arrayTo[i] = arrayFrom[i];
    1062:	8d 91       	ld	r24, X+
    1064:	9d 91       	ld	r25, X+
    1066:	81 93       	st	Z+, r24
    1068:	91 93       	st	Z+, r25
}*/

void arrayCopy(int arrayTo[], int arrayFrom[], int arrSize){
	int i;
	
	for(i=0; i<arrSize; i++){
    106a:	2f 5f       	subi	r18, 0xFF	; 255
    106c:	3f 4f       	sbci	r19, 0xFF	; 255
    106e:	2c 17       	cp	r18, r28
    1070:	3d 07       	cpc	r19, r29
    1072:	bc f3       	brlt	.-18     	; 0x1062 <arrayCopy+0x10>
		arrayTo[i] = arrayFrom[i];
	}

    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <mirror_z>:
    }
}

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	c0 54       	subi	r28, 0x40	; 64
    1084:	d0 40       	sbci	r29, 0x00	; 0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    1090:	de 01       	movw	r26, r28
    1092:	11 96       	adiw	r26, 0x01	; 1
    1094:	e5 ea       	ldi	r30, 0xA5	; 165
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 e4       	ldi	r24, 0x40	; 64
    109a:	01 90       	ld	r0, Z+
    109c:	0d 92       	st	X+, r0
    109e:	81 50       	subi	r24, 0x01	; 1
    10a0:	e1 f7       	brne	.-8      	; 0x109a <mirror_z+0x20>
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	50 e0       	ldi	r21, 0x00	; 0

    for (y=0; y<CUBE_SIZE; y++)
    10a6:	be 01       	movw	r22, r28
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	18 c0       	rjmp	.+48     	; 0x10de <mirror_z+0x64>
    {
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
    10ae:	8c 91       	ld	r24, X
    10b0:	f9 01       	movw	r30, r18
    10b2:	93 e0       	ldi	r25, 0x03	; 3
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	9a 95       	dec	r25
    10ba:	e1 f7       	brne	.-8      	; 0x10b4 <mirror_z+0x3a>
    10bc:	e4 0f       	add	r30, r20
    10be:	f5 1f       	adc	r31, r21
    10c0:	eb 55       	subi	r30, 0x5B	; 91
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	80 83       	st	Z, r24
    10c6:	18 96       	adiw	r26, 0x08	; 8
    10c8:	21 50       	subi	r18, 0x01	; 1
    10ca:	30 40       	sbci	r19, 0x00	; 0

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    for (y=0; y<CUBE_SIZE; y++)
    {
        for (z=0; z<CUBE_SIZE; z++)
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	2f 3f       	cpi	r18, 0xFF	; 255
    10d0:	38 07       	cpc	r19, r24
    10d2:	69 f7       	brne	.-38     	; 0x10ae <mirror_z+0x34>
    10d4:	4f 5f       	subi	r20, 0xFF	; 255
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    for (y=0; y<CUBE_SIZE; y++)
    10d8:	48 30       	cpi	r20, 0x08	; 8
    10da:	51 05       	cpc	r21, r1
    10dc:	31 f0       	breq	.+12     	; 0x10ea <mirror_z+0x70>
    10de:	db 01       	movw	r26, r22
    10e0:	a4 0f       	add	r26, r20
    10e2:	b5 1f       	adc	r27, r21
    10e4:	27 e0       	ldi	r18, 0x07	; 7
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	e2 cf       	rjmp	.-60     	; 0x10ae <mirror_z+0x34>
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
        }
    }
}
    10ea:	c0 5c       	subi	r28, 0xC0	; 192
    10ec:	df 4f       	sbci	r29, 0xFF	; 255
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <mirror_x>:

}

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
    10fe:	8f 92       	push	r8
    1100:	9f 92       	push	r9
    1102:	af 92       	push	r10
    1104:	bf 92       	push	r11
    1106:	cf 92       	push	r12
    1108:	df 92       	push	r13
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	c0 54       	subi	r28, 0x40	; 64
    111c:	d0 40       	sbci	r29, 0x00	; 0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    1128:	de 01       	movw	r26, r28
    112a:	11 96       	adiw	r26, 0x01	; 1
    112c:	e5 ea       	ldi	r30, 0xA5	; 165
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 e4       	ldi	r24, 0x40	; 64
    1132:	01 90       	ld	r0, Z+
    1134:	0d 92       	st	X+, r0
    1136:	81 50       	subi	r24, 0x01	; 1
    1138:	e1 f7       	brne	.-8      	; 0x1132 <mirror_x+0x34>

    fill(0x00);
    113a:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    113e:	ee 24       	eor	r14, r14
    1140:	ff 24       	eor	r15, r15
    
    for (z=0; z<CUBE_SIZE; z++)
    1142:	4e 01       	movw	r8, r28
    1144:	08 94       	sec
    1146:	81 1c       	adc	r8, r1
    1148:	91 1c       	adc	r9, r1
    114a:	17 c0       	rjmp	.+46     	; 0x117a <mirror_x+0x7c>
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
    114c:	f6 01       	movw	r30, r12
    114e:	81 91       	ld	r24, Z+
    1150:	6f 01       	movw	r12, r30
    1152:	0e 94 38 05 	call	0xa70	; 0xa70 <flipbyte>
    1156:	f5 01       	movw	r30, r10
    1158:	e0 0f       	add	r30, r16
    115a:	f1 1f       	adc	r31, r17
    115c:	eb 55       	subi	r30, 0x5B	; 91
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	80 83       	st	Z, r24
    1162:	0f 5f       	subi	r16, 0xFF	; 255
    1164:	1f 4f       	sbci	r17, 0xFF	; 255

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
    1166:	08 30       	cpi	r16, 0x08	; 8
    1168:	11 05       	cpc	r17, r1
    116a:	81 f7       	brne	.-32     	; 0x114c <mirror_x+0x4e>
    116c:	08 94       	sec
    116e:	e1 1c       	adc	r14, r1
    1170:	f1 1c       	adc	r15, r1

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
    1172:	f8 e0       	ldi	r31, 0x08	; 8
    1174:	ef 16       	cp	r14, r31
    1176:	f1 04       	cpc	r15, r1
    1178:	69 f0       	breq	.+26     	; 0x1194 <mirror_x+0x96>
    117a:	c7 01       	movw	r24, r14
    117c:	23 e0       	ldi	r18, 0x03	; 3
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	2a 95       	dec	r18
    1184:	e1 f7       	brne	.-8      	; 0x117e <mirror_x+0x80>
    1186:	64 01       	movw	r12, r8
    1188:	c8 0e       	add	r12, r24
    118a:	d9 1e       	adc	r13, r25
    118c:	00 e0       	ldi	r16, 0x00	; 0
    118e:	10 e0       	ldi	r17, 0x00	; 0
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
    1190:	5c 01       	movw	r10, r24
    1192:	dc cf       	rjmp	.-72     	; 0x114c <mirror_x+0x4e>
        }
    }
}
    1194:	c0 5c       	subi	r28, 0xC0	; 192
    1196:	df 4f       	sbci	r29, 0xFF	; 255
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	8f 90       	pop	r8
    11ba:	08 95       	ret

000011bc <mirror_y>:
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
    11bc:	8f 92       	push	r8
    11be:	9f 92       	push	r9
    11c0:	af 92       	push	r10
    11c2:	bf 92       	push	r11
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	c0 54       	subi	r28, 0x40	; 64
    11da:	d0 40       	sbci	r29, 0x00	; 0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    11e6:	de 01       	movw	r26, r28
    11e8:	11 96       	adiw	r26, 0x01	; 1
    11ea:	e5 ea       	ldi	r30, 0xA5	; 165
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 e4       	ldi	r24, 0x40	; 64
    11f0:	01 90       	ld	r0, Z+
    11f2:	0d 92       	st	X+, r0
    11f4:	81 50       	subi	r24, 0x01	; 1
    11f6:	e1 f7       	brne	.-8      	; 0x11f0 <mirror_y+0x34>

    fill(0x00);
    11f8:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    11fc:	aa 24       	eor	r10, r10
    11fe:	bb 24       	eor	r11, r11
    for (z=0; z<CUBE_SIZE; z++)
    1200:	4e 01       	movw	r8, r28
    1202:	08 94       	sec
    1204:	81 1c       	adc	r8, r1
    1206:	91 1c       	adc	r9, r1
    1208:	2a c0       	rjmp	.+84     	; 0x125e <mirror_y+0xa2>
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
            {
                if (buffer[z][y] & (0x01 << x))
    120a:	f7 01       	movw	r30, r14
    120c:	80 81       	ld	r24, Z
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	00 2e       	mov	r0, r16
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <mirror_y+0x5c>
    1214:	95 95       	asr	r25
    1216:	87 95       	ror	r24
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <mirror_y+0x58>
    121c:	80 ff       	sbrs	r24, 0
    121e:	05 c0       	rjmp	.+10     	; 0x122a <mirror_y+0x6e>
                    setvoxel(x,CUBE_SIZE-1-y,z);
    1220:	c8 01       	movw	r24, r16
    1222:	b6 01       	movw	r22, r12
    1224:	a5 01       	movw	r20, r10
    1226:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    122a:	0f 5f       	subi	r16, 0xFF	; 255
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
    122e:	08 30       	cpi	r16, 0x08	; 8
    1230:	11 05       	cpc	r17, r1
    1232:	59 f7       	brne	.-42     	; 0x120a <mirror_y+0x4e>
    1234:	08 94       	sec
    1236:	e1 1c       	adc	r14, r1
    1238:	f1 1c       	adc	r15, r1
    123a:	08 94       	sec
    123c:	c1 08       	sbc	r12, r1
    123e:	d1 08       	sbc	r13, r1
    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
    1240:	ff ef       	ldi	r31, 0xFF	; 255
    1242:	cf 16       	cp	r12, r31
    1244:	ff ef       	ldi	r31, 0xFF	; 255
    1246:	df 06       	cpc	r13, r31
    1248:	19 f0       	breq	.+6      	; 0x1250 <mirror_y+0x94>
    124a:	00 e0       	ldi	r16, 0x00	; 0
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	dd cf       	rjmp	.-70     	; 0x120a <mirror_y+0x4e>
    1250:	08 94       	sec
    1252:	a1 1c       	adc	r10, r1
    1254:	b1 1c       	adc	r11, r1
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    1256:	88 e0       	ldi	r24, 0x08	; 8
    1258:	a8 16       	cp	r10, r24
    125a:	b1 04       	cpc	r11, r1
    125c:	61 f0       	breq	.+24     	; 0x1276 <mirror_y+0xba>
    125e:	75 01       	movw	r14, r10
    1260:	43 e0       	ldi	r20, 0x03	; 3
    1262:	ee 0c       	add	r14, r14
    1264:	ff 1c       	adc	r15, r15
    1266:	4a 95       	dec	r20
    1268:	e1 f7       	brne	.-8      	; 0x1262 <mirror_y+0xa6>
    126a:	e8 0c       	add	r14, r8
    126c:	f9 1c       	adc	r15, r9
    126e:	37 e0       	ldi	r19, 0x07	; 7
    1270:	c3 2e       	mov	r12, r19
    1272:	d1 2c       	mov	r13, r1
    1274:	ea cf       	rjmp	.-44     	; 0x124a <mirror_y+0x8e>
                    setvoxel(x,CUBE_SIZE-1-y,z);
            }
        }
    }

}
    1276:	c0 5c       	subi	r28, 0xC0	; 192
    1278:	df 4f       	sbci	r29, 0xFF	; 255
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	9f 90       	pop	r9
    129a:	8f 90       	pop	r8
    129c:	08 95       	ret

0000129e <tmp2cube>:
}

// Copies the contents of fb (temp cube buffer) into the rendering buffer
void tmp2cube (void)
{	
    memcpy(cube, fb, 64); // copy the current cube into a buffer.
    129e:	a5 ea       	ldi	r26, 0xA5	; 165
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e5 e6       	ldi	r30, 0x65	; 101
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 e4       	ldi	r24, 0x40	; 64
    12a8:	01 90       	ld	r0, Z+
    12aa:	0d 92       	st	X+, r0
    12ac:	81 50       	subi	r24, 0x01	; 1
    12ae:	e1 f7       	brne	.-8      	; 0x12a8 <tmp2cube+0xa>
}
    12b0:	08 95       	ret

000012b2 <effect_loadbar>:


//EFFECT 8
// Light all leds layer by layer,
// then unset layer by layer
void effect_loadbar(int delay){
    12b2:	df 92       	push	r13
    12b4:	ef 92       	push	r14
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	8c 01       	movw	r16, r24
	fill(0x00);
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    12c8:	c0 e0       	ldi	r28, 0x00	; 0
    12ca:	d0 e0       	ldi	r29, 0x00	; 0
	
	int z,y;
	
	for (z=0;z<8;z++){
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    12cc:	dd 24       	eor	r13, r13
    12ce:	da 94       	dec	r13
			
		delay_ms(delay);
    12d0:	78 01       	movw	r14, r16
    12d2:	11 c0       	rjmp	.+34     	; 0x12f6 <effect_loadbar+0x44>
	
	int z,y;
	
	for (z=0;z<8;z++){
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    12d4:	f9 01       	movw	r30, r18
    12d6:	e8 0f       	add	r30, r24
    12d8:	f9 1f       	adc	r31, r25
    12da:	eb 55       	subi	r30, 0x5B	; 91
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	d0 82       	st	Z, r13
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++){
		for (y=0;y<8;y++)
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	88 30       	cpi	r24, 0x08	; 8
    12e4:	91 05       	cpc	r25, r1
    12e6:	b1 f7       	brne	.-20     	; 0x12d4 <effect_loadbar+0x22>
			cube[z][y] = 0xff;
			
		delay_ms(delay);
    12e8:	c7 01       	movw	r24, r14
    12ea:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
void effect_loadbar(int delay){
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++){
    12ee:	21 96       	adiw	r28, 0x01	; 1
    12f0:	c8 30       	cpi	r28, 0x08	; 8
    12f2:	d1 05       	cpc	r29, r1
    12f4:	49 f0       	breq	.+18     	; 0x1308 <effect_loadbar+0x56>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    12fa:	9e 01       	movw	r18, r28
    12fc:	63 e0       	ldi	r22, 0x03	; 3
    12fe:	22 0f       	add	r18, r18
    1300:	33 1f       	adc	r19, r19
    1302:	6a 95       	dec	r22
    1304:	e1 f7       	brne	.-8      	; 0x12fe <effect_loadbar+0x4c>
    1306:	e6 cf       	rjmp	.-52     	; 0x12d4 <effect_loadbar+0x22>
			
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
    1308:	c8 01       	movw	r24, r16
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	80 0f       	add	r24, r16
    1310:	91 1f       	adc	r25, r17
    1312:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    1316:	c0 e0       	ldi	r28, 0x00	; 0
    1318:	d0 e0       	ldi	r29, 0x00	; 0
    131a:	11 c0       	rjmp	.+34     	; 0x133e <effect_loadbar+0x8c>
	
	for (z=0;z<8;z++){
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
    131c:	f9 01       	movw	r30, r18
    131e:	e8 0f       	add	r30, r24
    1320:	f9 1f       	adc	r31, r25
    1322:	eb 55       	subi	r30, 0x5B	; 91
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	10 82       	st	Z, r1
	}
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++){
		for (y=0;y<8;y++)
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	88 30       	cpi	r24, 0x08	; 8
    132c:	91 05       	cpc	r25, r1
    132e:	b1 f7       	brne	.-20     	; 0x131c <effect_loadbar+0x6a>
			cube[z][y] = 0x00;
			
		delay_ms(delay);
    1330:	c7 01       	movw	r24, r14
    1332:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++){
    1336:	21 96       	adiw	r28, 0x01	; 1
    1338:	c8 30       	cpi	r28, 0x08	; 8
    133a:	d1 05       	cpc	r29, r1
    133c:	49 f0       	breq	.+18     	; 0x1350 <effect_loadbar+0x9e>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
    1342:	9e 01       	movw	r18, r28
    1344:	43 e0       	ldi	r20, 0x03	; 3
    1346:	22 0f       	add	r18, r18
    1348:	33 1f       	adc	r19, r19
    134a:	4a 95       	dec	r20
    134c:	e1 f7       	brne	.-8      	; 0x1346 <effect_loadbar+0x94>
    134e:	e6 cf       	rjmp	.-52     	; 0x131c <effect_loadbar+0x6a>
			
		delay_ms(delay);
	}
}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	df 90       	pop	r13
    135e:	08 95       	ret

00001360 <effect_telcstairs_do>:
		delay_ms(speed);
	}
}

//EFFECT 7
int effect_telcstairs_do(int x, int val, int delay){
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	ec 01       	movw	r28, r24
    1366:	dc 01       	movw	r26, r24
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	14 c0       	rjmp	.+40     	; 0x1396 <effect_telcstairs_do+0x36>
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--){
		if(x < CUBE_SIZE && y < CUBE_SIZE){
    136e:	a8 30       	cpi	r26, 0x08	; 8
    1370:	b1 05       	cpc	r27, r1
    1372:	74 f4       	brge	.+28     	; 0x1390 <effect_telcstairs_do+0x30>
    1374:	28 30       	cpi	r18, 0x08	; 8
    1376:	31 05       	cpc	r19, r1
    1378:	5c f4       	brge	.+22     	; 0x1390 <effect_telcstairs_do+0x30>
			cube[x][y] = val;
    137a:	fd 01       	movw	r30, r26
    137c:	73 e0       	ldi	r23, 0x03	; 3
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	7a 95       	dec	r23
    1384:	e1 f7       	brne	.-8      	; 0x137e <effect_telcstairs_do+0x1e>
    1386:	e2 0f       	add	r30, r18
    1388:	f3 1f       	adc	r31, r19
    138a:	eb 55       	subi	r30, 0x5B	; 91
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	60 83       	st	Z, r22

//EFFECT 7
int effect_telcstairs_do(int x, int val, int delay){
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--){
    1390:	2f 5f       	subi	r18, 0xFF	; 255
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	11 97       	sbiw	r26, 0x01	; 1
    1396:	c2 17       	cp	r28, r18
    1398:	d3 07       	cpc	r29, r19
    139a:	4c f7       	brge	.-46     	; 0x136e <effect_telcstairs_do+0xe>
		if(x < CUBE_SIZE && y < CUBE_SIZE){
			cube[x][y] = val;
		}
	}
	delay_ms(delay);
    139c:	ca 01       	movw	r24, r20
    139e:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
	return z;
}
    13a2:	ce 01       	movw	r24, r28
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <effect_telcstairs>:
void effect_telcstairs (int invert, int delay, int val){
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	8b 01       	movw	r16, r22
    13b4:	ea 01       	movw	r28, r20
	int x;

	if(invert){
    13b6:	89 2b       	or	r24, r25
    13b8:	51 f0       	breq	.+20     	; 0x13ce <effect_telcstairs+0x24>
    13ba:	80 e1       	ldi	r24, 0x10	; 16
    13bc:	90 e0       	ldi	r25, 0x00	; 0
		for(x = CUBE_SIZE*2; x >= 0; x--){
			x = effect_telcstairs_do(x,val,delay);
    13be:	be 01       	movw	r22, r28
    13c0:	a8 01       	movw	r20, r16
    13c2:	0e 94 b0 09 	call	0x1360	; 0x1360 <effect_telcstairs_do>
}
void effect_telcstairs (int invert, int delay, int val){
	int x;

	if(invert){
		for(x = CUBE_SIZE*2; x >= 0; x--){
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	97 ff       	sbrs	r25, 7
    13ca:	f9 cf       	rjmp	.-14     	; 0x13be <effect_telcstairs+0x14>
    13cc:	0a c0       	rjmp	.+20     	; 0x13e2 <effect_telcstairs+0x38>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
			x = effect_telcstairs_do(x,val,delay);
		}
	}
	else {
		for(x = 0; x < CUBE_SIZE*2; x++) {
			x = effect_telcstairs_do(x,val,delay);
    13d2:	be 01       	movw	r22, r28
    13d4:	a8 01       	movw	r20, r16
    13d6:	0e 94 b0 09 	call	0x1360	; 0x1360 <effect_telcstairs_do>
		for(x = CUBE_SIZE*2; x >= 0; x--){
			x = effect_telcstairs_do(x,val,delay);
		}
	}
	else {
		for(x = 0; x < CUBE_SIZE*2; x++) {
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	80 31       	cpi	r24, 0x10	; 16
    13de:	91 05       	cpc	r25, r1
    13e0:	c4 f3       	brlt	.-16     	; 0x13d2 <effect_telcstairs+0x28>
			x = effect_telcstairs_do(x,val,delay);
		}
	}
}
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	08 95       	ret

000013ec <effect_blinky2>:
		}
	}
}

//EFFECT 4
void effect_blinky2(int delay, int delayFill, int wait){
    13ec:	cf 92       	push	r12
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	ec 01       	movw	r28, r24
    13fe:	6b 01       	movw	r12, r22
    1400:	7a 01       	movw	r14, r20
	int r;
	fill(0x00);
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    1408:	00 e0       	ldi	r16, 0x00	; 0
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	19 c0       	rjmp	.+50     	; 0x1440 <effect_blinky2+0x54>
	
	for (r=0;r<2;r++){
		while (delay>0){
			fill(0x00);
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
			delay_ms(delay);
    1414:	ce 01       	movw	r24, r28
    1416:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			
			fill(0xff);
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
			delay_ms(delayFill);
    1420:	c6 01       	movw	r24, r12
    1422:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			
			delay = delay - (15+(1000/(delay/10)));
    1426:	ce 01       	movw	r24, r28
    1428:	66 ef       	ldi	r22, 0xF6	; 246
    142a:	7f ef       	ldi	r23, 0xFF	; 255
    142c:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    1430:	88 ee       	ldi	r24, 0xE8	; 232
    1432:	93 e0       	ldi	r25, 0x03	; 3
    1434:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    1438:	6f 50       	subi	r22, 0x0F	; 15
    143a:	70 40       	sbci	r23, 0x00	; 0
    143c:	c6 0f       	add	r28, r22
    143e:	d7 1f       	adc	r29, r23
void effect_blinky2(int delay, int delayFill, int wait){
	int r;
	fill(0x00);
	
	for (r=0;r<2;r++){
		while (delay>0){
    1440:	1c 16       	cp	r1, r28
    1442:	1d 06       	cpc	r1, r29
    1444:	24 f3       	brlt	.-56     	; 0x140e <effect_blinky2+0x22>
			delay_ms(delayFill);
			
			delay = delay - (15+(1000/(delay/10)));
		}
		
		delay_ms(wait);
    1446:	c7 01       	movw	r24, r14
    1448:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
//EFFECT 4
void effect_blinky2(int delay, int delayFill, int wait){
	int r;
	fill(0x00);
	
	for (r=0;r<2;r++){
    144c:	0f 5f       	subi	r16, 0xFF	; 255
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	02 30       	cpi	r16, 0x02	; 2
    1452:	11 05       	cpc	r17, r1
    1454:	a9 f7       	brne	.-22     	; 0x1440 <effect_blinky2+0x54>
			delay_ms(delayFill);
			
			delay = delay - (15+(1000/(delay/10)));
		}
	}
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	08 95       	ret

00001468 <drawSnake.2831>:
	uint8_t c, k, rnd, flag = 1;
	int8_t snake_length = (rand()%11 + 10) * 3, sum;	//make the length of snake between 10 and 20
	int i, j, snake_array[snake_length], temp_array[snake_length];	//, temp_array2[3];
	uint16_t cc;
	
	void drawSnake(int delay, int delay_off){
    1468:	2f 92       	push	r2
    146a:	3f 92       	push	r3
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	7c 01       	movw	r14, r24
    147a:	8b 01       	movw	r16, r22
    147c:	e1 01       	movw	r28, r2
		fill(0x00);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
		delay_ms(delay_off);
    1484:	c8 01       	movw	r24, r16
    1486:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
		//Draw the snake
		for(cc=0; cc<snake_length; cc+=3){
    148a:	1d 86       	std	Y+13, r1	; 0x0d
    148c:	1c 86       	std	Y+12, r1	; 0x0c
    148e:	22 c0       	rjmp	.+68     	; 0x14d4 <drawSnake.2831+0x6c>
			setvoxel(snake_array[cc], snake_array[cc+1], snake_array[cc+2]);
    1490:	aa 85       	ldd	r26, Y+10	; 0x0a
    1492:	bb 85       	ldd	r27, Y+11	; 0x0b
    1494:	c9 01       	movw	r24, r18
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	8a 0f       	add	r24, r26
    149c:	9b 1f       	adc	r25, r27
    149e:	2f 5f       	subi	r18, 0xFF	; 255
    14a0:	3f 4f       	sbci	r19, 0xFF	; 255
    14a2:	f9 01       	movw	r30, r18
    14a4:	ee 0f       	add	r30, r30
    14a6:	ff 1f       	adc	r31, r31
    14a8:	ea 0f       	add	r30, r26
    14aa:	fb 1f       	adc	r31, r27
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	2f 5f       	subi	r18, 0xFF	; 255
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	22 0f       	add	r18, r18
    14b6:	33 1f       	adc	r19, r19
    14b8:	a2 0f       	add	r26, r18
    14ba:	b3 1f       	adc	r27, r19
    14bc:	4d 91       	ld	r20, X+
    14be:	5c 91       	ld	r21, X
    14c0:	fc 01       	movw	r30, r24
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
	
	void drawSnake(int delay, int delay_off){
		fill(0x00);
		delay_ms(delay_off);
		//Draw the snake
		for(cc=0; cc<snake_length; cc+=3){
    14ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    14cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    14ce:	03 96       	adiw	r24, 0x03	; 3
    14d0:	9d 87       	std	Y+13, r25	; 0x0d
    14d2:	8c 87       	std	Y+12, r24	; 0x0c
    14d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    14d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	99 27       	eor	r25, r25
    14dc:	87 fd       	sbrc	r24, 7
    14de:	90 95       	com	r25
    14e0:	28 17       	cp	r18, r24
    14e2:	39 07       	cpc	r19, r25
    14e4:	a8 f2       	brcs	.-86     	; 0x1490 <drawSnake.2831+0x28>
			setvoxel(snake_array[cc], snake_array[cc+1], snake_array[cc+2]);
		}
		delay_ms(delay);
    14e6:	c7 01       	movw	r24, r14
    14e8:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
	}
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	3f 90       	pop	r3
    14fa:	2f 90       	pop	r2
    14fc:	08 95       	ret

000014fe <snakeFillAndMove.2840>:
		else{
			return 0;
		}
	}

	void snakeFillAndMove(uint8_t action){
    14fe:	2f 92       	push	r2
    1500:	3f 92       	push	r3
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	f8 2e       	mov	r15, r24
    150e:	81 01       	movw	r16, r2
		if(checkWay(snake_array)){
    1510:	f1 01       	movw	r30, r2
    1512:	c2 85       	ldd	r28, Z+10	; 0x0a
    1514:	d3 85       	ldd	r29, Z+11	; 0x0b
		}
		delay_ms(delay);
	}
	
	int checkWay(int array[]){
		if(
    1516:	88 81       	ld	r24, Y
    1518:	99 81       	ldd	r25, Y+1	; 0x01
    151a:	6a 81       	ldd	r22, Y+2	; 0x02
    151c:	7b 81       	ldd	r23, Y+3	; 0x03
    151e:	4c 81       	ldd	r20, Y+4	; 0x04
    1520:	5d 81       	ldd	r21, Y+5	; 0x05
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
    1528:	88 23       	and	r24, r24
    152a:	61 f0       	breq	.+24     	; 0x1544 <snakeFillAndMove.2840+0x46>
    152c:	88 81       	ld	r24, Y
    152e:	99 81       	ldd	r25, Y+1	; 0x01
    1530:	6a 81       	ldd	r22, Y+2	; 0x02
    1532:	7b 81       	ldd	r23, Y+3	; 0x03
    1534:	4c 81       	ldd	r20, Y+4	; 0x04
    1536:	5d 81       	ldd	r21, Y+5	; 0x05
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    153e:	88 23       	and	r24, r24
    1540:	09 f4       	brne	.+2      	; 0x1544 <snakeFillAndMove.2840+0x46>
    1542:	7a c0       	rjmp	.+244    	; 0x1638 <snakeFillAndMove.2840+0x13a>
    1544:	88 81       	ld	r24, Y
    1546:	99 81       	ldd	r25, Y+1	; 0x01
    1548:	6a 81       	ldd	r22, Y+2	; 0x02
    154a:	7b 81       	ldd	r23, Y+3	; 0x03
    154c:	4c 81       	ldd	r20, Y+4	; 0x04
    154e:	5d 81       	ldd	r21, Y+5	; 0x05
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
    1556:	88 23       	and	r24, r24
    1558:	61 f0       	breq	.+24     	; 0x1572 <snakeFillAndMove.2840+0x74>
    155a:	88 81       	ld	r24, Y
    155c:	99 81       	ldd	r25, Y+1	; 0x01
    155e:	6a 81       	ldd	r22, Y+2	; 0x02
    1560:	7b 81       	ldd	r23, Y+3	; 0x03
    1562:	4c 81       	ldd	r20, Y+4	; 0x04
    1564:	5d 81       	ldd	r21, Y+5	; 0x05
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    156c:	88 23       	and	r24, r24
    156e:	09 f4       	brne	.+2      	; 0x1572 <snakeFillAndMove.2840+0x74>
    1570:	63 c0       	rjmp	.+198    	; 0x1638 <snakeFillAndMove.2840+0x13a>
    1572:	6a 81       	ldd	r22, Y+2	; 0x02
    1574:	7b 81       	ldd	r23, Y+3	; 0x03
    1576:	6f 5f       	subi	r22, 0xFF	; 255
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	4c 81       	ldd	r20, Y+4	; 0x04
    157c:	5d 81       	ldd	r21, Y+5	; 0x05
    157e:	88 81       	ld	r24, Y
    1580:	99 81       	ldd	r25, Y+1	; 0x01
    1582:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
    1586:	88 23       	and	r24, r24
    1588:	69 f0       	breq	.+26     	; 0x15a4 <snakeFillAndMove.2840+0xa6>
    158a:	6a 81       	ldd	r22, Y+2	; 0x02
    158c:	7b 81       	ldd	r23, Y+3	; 0x03
    158e:	6f 5f       	subi	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	4c 81       	ldd	r20, Y+4	; 0x04
    1594:	5d 81       	ldd	r21, Y+5	; 0x05
    1596:	88 81       	ld	r24, Y
    1598:	99 81       	ldd	r25, Y+1	; 0x01
    159a:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    159e:	88 23       	and	r24, r24
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <snakeFillAndMove.2840+0xa6>
    15a2:	4a c0       	rjmp	.+148    	; 0x1638 <snakeFillAndMove.2840+0x13a>
    15a4:	6a 81       	ldd	r22, Y+2	; 0x02
    15a6:	7b 81       	ldd	r23, Y+3	; 0x03
    15a8:	61 50       	subi	r22, 0x01	; 1
    15aa:	70 40       	sbci	r23, 0x00	; 0
    15ac:	4c 81       	ldd	r20, Y+4	; 0x04
    15ae:	5d 81       	ldd	r21, Y+5	; 0x05
    15b0:	88 81       	ld	r24, Y
    15b2:	99 81       	ldd	r25, Y+1	; 0x01
    15b4:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
    15b8:	88 23       	and	r24, r24
    15ba:	61 f0       	breq	.+24     	; 0x15d4 <snakeFillAndMove.2840+0xd6>
    15bc:	6a 81       	ldd	r22, Y+2	; 0x02
    15be:	7b 81       	ldd	r23, Y+3	; 0x03
    15c0:	61 50       	subi	r22, 0x01	; 1
    15c2:	70 40       	sbci	r23, 0x00	; 0
    15c4:	4c 81       	ldd	r20, Y+4	; 0x04
    15c6:	5d 81       	ldd	r21, Y+5	; 0x05
    15c8:	88 81       	ld	r24, Y
    15ca:	99 81       	ldd	r25, Y+1	; 0x01
    15cc:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    15d0:	88 23       	and	r24, r24
    15d2:	91 f1       	breq	.+100    	; 0x1638 <snakeFillAndMove.2840+0x13a>
    15d4:	6a 81       	ldd	r22, Y+2	; 0x02
    15d6:	7b 81       	ldd	r23, Y+3	; 0x03
    15d8:	4c 81       	ldd	r20, Y+4	; 0x04
    15da:	5d 81       	ldd	r21, Y+5	; 0x05
    15dc:	4f 5f       	subi	r20, 0xFF	; 255
    15de:	5f 4f       	sbci	r21, 0xFF	; 255
    15e0:	88 81       	ld	r24, Y
    15e2:	99 81       	ldd	r25, Y+1	; 0x01
    15e4:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
    15e8:	88 23       	and	r24, r24
    15ea:	61 f0       	breq	.+24     	; 0x1604 <snakeFillAndMove.2840+0x106>
    15ec:	6a 81       	ldd	r22, Y+2	; 0x02
    15ee:	7b 81       	ldd	r23, Y+3	; 0x03
    15f0:	4c 81       	ldd	r20, Y+4	; 0x04
    15f2:	5d 81       	ldd	r21, Y+5	; 0x05
    15f4:	4f 5f       	subi	r20, 0xFF	; 255
    15f6:	5f 4f       	sbci	r21, 0xFF	; 255
    15f8:	88 81       	ld	r24, Y
    15fa:	99 81       	ldd	r25, Y+1	; 0x01
    15fc:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    1600:	88 23       	and	r24, r24
    1602:	d1 f0       	breq	.+52     	; 0x1638 <snakeFillAndMove.2840+0x13a>
    1604:	6a 81       	ldd	r22, Y+2	; 0x02
    1606:	7b 81       	ldd	r23, Y+3	; 0x03
    1608:	4c 81       	ldd	r20, Y+4	; 0x04
    160a:	5d 81       	ldd	r21, Y+5	; 0x05
    160c:	41 50       	subi	r20, 0x01	; 1
    160e:	50 40       	sbci	r21, 0x00	; 0
    1610:	88 81       	ld	r24, Y
    1612:	99 81       	ldd	r25, Y+1	; 0x01
    1614:	0e 94 55 01 	call	0x2aa	; 0x2aa <inrange>
    1618:	88 23       	and	r24, r24
    161a:	09 f4       	brne	.+2      	; 0x161e <snakeFillAndMove.2840+0x120>
    161c:	ed c0       	rjmp	.+474    	; 0x17f8 <snakeFillAndMove.2840+0x2fa>
    161e:	6a 81       	ldd	r22, Y+2	; 0x02
    1620:	7b 81       	ldd	r23, Y+3	; 0x03
    1622:	4c 81       	ldd	r20, Y+4	; 0x04
    1624:	5d 81       	ldd	r21, Y+5	; 0x05
    1626:	41 50       	subi	r20, 0x01	; 1
    1628:	50 40       	sbci	r21, 0x00	; 0
    162a:	88 81       	ld	r24, Y
    162c:	99 81       	ldd	r25, Y+1	; 0x01
    162e:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    1632:	88 23       	and	r24, r24
    1634:	09 f0       	breq	.+2      	; 0x1638 <snakeFillAndMove.2840+0x13a>
    1636:	e0 c0       	rjmp	.+448    	; 0x17f8 <snakeFillAndMove.2840+0x2fa>
				//Sum 1 or -1
				if(rand()%2){
					sum = 1;
				}
				else{
					sum = -1;
    1638:	22 24       	eor	r2, r2
    163a:	2a 94       	dec	r2
				}
				//Generate random number in range 0..2
				rnd = rand()%3;
				//Sum 1 or -1
				if(rand()%2){
					sum = 1;
    163c:	33 24       	eor	r3, r3
    163e:	33 94       	inc	r3
    1640:	e8 01       	movw	r28, r16
    1642:	aa 85       	ldd	r26, Y+10	; 0x0a
    1644:	bb 85       	ldd	r27, Y+11	; 0x0b
    1646:	0d 80       	ldd	r0, Y+5	; 0x05
    1648:	de 81       	ldd	r29, Y+6	; 0x06
    164a:	c0 2d       	mov	r28, r0
	}

	void snakeFillAndMove(uint8_t action){
		if(checkWay(snake_array)){
			while(1){
				if(action == 1){
    164c:	e1 e0       	ldi	r30, 0x01	; 1
    164e:	fe 16       	cp	r15, r30
    1650:	f9 f4       	brne	.+62     	; 0x1690 <snakeFillAndMove.2840+0x192>
					temp_array[0] = snake_array[j-3];
    1652:	f8 01       	movw	r30, r16
    1654:	87 81       	ldd	r24, Z+7	; 0x07
    1656:	90 85       	ldd	r25, Z+8	; 0x08
    1658:	fc 01       	movw	r30, r24
    165a:	33 97       	sbiw	r30, 0x03	; 3
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	ea 0f       	add	r30, r26
    1662:	fb 1f       	adc	r31, r27
    1664:	20 81       	ld	r18, Z
    1666:	31 81       	ldd	r19, Z+1	; 0x01
    1668:	39 83       	std	Y+1, r19	; 0x01
    166a:	28 83       	st	Y, r18
					temp_array[1] = snake_array[j-2];
    166c:	02 97       	sbiw	r24, 0x02	; 2
    166e:	fc 01       	movw	r30, r24
    1670:	ee 0f       	add	r30, r30
    1672:	ff 1f       	adc	r31, r31
    1674:	ea 0f       	add	r30, r26
    1676:	fb 1f       	adc	r31, r27
    1678:	20 81       	ld	r18, Z
    167a:	31 81       	ldd	r19, Z+1	; 0x01
    167c:	3b 83       	std	Y+3, r19	; 0x03
    167e:	2a 83       	std	Y+2, r18	; 0x02
					temp_array[2] = snake_array[j-1];
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	a8 0f       	add	r26, r24
    1688:	b9 1f       	adc	r27, r25
    168a:	8d 91       	ld	r24, X+
    168c:	9c 91       	ld	r25, X
    168e:	0f c0       	rjmp	.+30     	; 0x16ae <snakeFillAndMove.2840+0x1b0>
				}
				else{
					temp_array[0] = snake_array[0];
    1690:	8d 91       	ld	r24, X+
    1692:	9c 91       	ld	r25, X
    1694:	11 97       	sbiw	r26, 0x01	; 1
    1696:	99 83       	std	Y+1, r25	; 0x01
    1698:	88 83       	st	Y, r24
					temp_array[1] = snake_array[1];
    169a:	12 96       	adiw	r26, 0x02	; 2
    169c:	8d 91       	ld	r24, X+
    169e:	9c 91       	ld	r25, X
    16a0:	13 97       	sbiw	r26, 0x03	; 3
    16a2:	9b 83       	std	Y+3, r25	; 0x03
    16a4:	8a 83       	std	Y+2, r24	; 0x02
					temp_array[2] = snake_array[2];
    16a6:	14 96       	adiw	r26, 0x04	; 4
    16a8:	8d 91       	ld	r24, X+
    16aa:	9c 91       	ld	r25, X
    16ac:	15 97       	sbiw	r26, 0x05	; 5
    16ae:	9d 83       	std	Y+5, r25	; 0x05
    16b0:	8c 83       	std	Y+4, r24	; 0x04
				}
				//Generate random number in range 0..2
				rnd = rand()%3;
    16b2:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    16b6:	63 e0       	ldi	r22, 0x03	; 3
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    16be:	e8 01       	movw	r28, r16
    16c0:	8c 83       	std	Y+4, r24	; 0x04
				//Sum 1 or -1
				if(rand()%2){
    16c2:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    16c6:	80 ff       	sbrs	r24, 0
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <snakeFillAndMove.2840+0x1d0>
					sum = 1;
    16ca:	3b 82       	std	Y+3, r3	; 0x03
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <snakeFillAndMove.2840+0x1d4>
				}
				else{
					sum = -1;
    16ce:	f8 01       	movw	r30, r16
    16d0:	23 82       	std	Z+3, r2	; 0x03
				}
				sum += temp_array[rnd];
    16d2:	e8 01       	movw	r28, r16
    16d4:	ad 81       	ldd	r26, Y+5	; 0x05
    16d6:	be 81       	ldd	r27, Y+6	; 0x06
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	e8 2f       	mov	r30, r24
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	ea 0f       	add	r30, r26
    16e4:	fb 1f       	adc	r31, r27
    16e6:	90 81       	ld	r25, Z
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	98 0f       	add	r25, r24
    16ec:	9b 83       	std	Y+3, r25	; 0x03
				
				if(sum >= 0 && sum < CUBE_SIZE){
    16ee:	98 30       	cpi	r25, 0x08	; 8
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <snakeFillAndMove.2840+0x1f6>
    16f2:	a6 cf       	rjmp	.-180    	; 0x1640 <snakeFillAndMove.2840+0x142>
					temp_array[rnd] = sum;
    16f4:	89 2f       	mov	r24, r25
    16f6:	99 27       	eor	r25, r25
    16f8:	87 fd       	sbrc	r24, 7
    16fa:	90 95       	com	r25
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	80 83       	st	Z, r24
					//Check if the newly chosen LED is switched off
					if(!getvoxel(temp_array[0], temp_array[1], temp_array[2])){
    1700:	12 96       	adiw	r26, 0x02	; 2
    1702:	6d 91       	ld	r22, X+
    1704:	7c 91       	ld	r23, X
    1706:	13 97       	sbiw	r26, 0x03	; 3
    1708:	14 96       	adiw	r26, 0x04	; 4
    170a:	4d 91       	ld	r20, X+
    170c:	5c 91       	ld	r21, X
    170e:	15 97       	sbiw	r26, 0x05	; 5
    1710:	8d 91       	ld	r24, X+
    1712:	9c 91       	ld	r25, X
    1714:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    1718:	88 23       	and	r24, r24
    171a:	09 f0       	breq	.+2      	; 0x171e <snakeFillAndMove.2840+0x220>
    171c:	91 cf       	rjmp	.-222    	; 0x1640 <snakeFillAndMove.2840+0x142>
						if(action == 1){
    171e:	e1 e0       	ldi	r30, 0x01	; 1
    1720:	fe 16       	cp	r15, r30
    1722:	21 f5       	brne	.+72     	; 0x176c <snakeFillAndMove.2840+0x26e>
							snake_array[j] = temp_array[0];
    1724:	8f 81       	ldd	r24, Y+7	; 0x07
    1726:	98 85       	ldd	r25, Y+8	; 0x08
    1728:	4d 81       	ldd	r20, Y+5	; 0x05
    172a:	5e 81       	ldd	r21, Y+6	; 0x06
    172c:	aa 85       	ldd	r26, Y+10	; 0x0a
    172e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1730:	fc 01       	movw	r30, r24
    1732:	ee 0f       	add	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	ea 0f       	add	r30, r26
    1738:	fb 1f       	adc	r31, r27
    173a:	ea 01       	movw	r28, r20
    173c:	28 81       	ld	r18, Y
    173e:	39 81       	ldd	r19, Y+1	; 0x01
    1740:	31 83       	std	Z+1, r19	; 0x01
    1742:	20 83       	st	Z, r18
							snake_array[j+1] = temp_array[1];
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	fc 01       	movw	r30, r24
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	ea 0f       	add	r30, r26
    174e:	fb 1f       	adc	r31, r27
    1750:	2a 81       	ldd	r18, Y+2	; 0x02
    1752:	3b 81       	ldd	r19, Y+3	; 0x03
    1754:	31 83       	std	Z+1, r19	; 0x01
    1756:	20 83       	st	Z, r18
							snake_array[j+2] = temp_array[2];
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	a8 0f       	add	r26, r24
    1760:	b9 1f       	adc	r27, r25
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	9d 81       	ldd	r25, Y+5	; 0x05
    1766:	8d 93       	st	X+, r24
    1768:	9c 93       	st	X, r25
    176a:	4f c0       	rjmp	.+158    	; 0x180a <snakeFillAndMove.2840+0x30c>
						}
						else{
							for(c=0; c<3; c++){
    176c:	f8 01       	movw	r30, r16
    176e:	12 82       	std	Z+2, r1	; 0x02
								//Shift right 3 times
								for(k=snake_length-1; k>0; k--){
									snake_array[k] = snake_array[k-1]; 
								}
								snake_array[0] = -1;
    1770:	4f ef       	ldi	r20, 0xFF	; 255
    1772:	5f ef       	ldi	r21, 0xFF	; 255
    1774:	23 c0       	rjmp	.+70     	; 0x17bc <snakeFillAndMove.2840+0x2be>
							snake_array[j+2] = temp_array[2];
						}
						else{
							for(c=0; c<3; c++){
								//Shift right 3 times
								for(k=snake_length-1; k>0; k--){
    1776:	e8 01       	movw	r28, r16
    1778:	89 85       	ldd	r24, Y+9	; 0x09
    177a:	81 50       	subi	r24, 0x01	; 1
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	13 c0       	rjmp	.+38     	; 0x17a6 <snakeFillAndMove.2840+0x2a8>
									snake_array[k] = snake_array[k-1]; 
    1780:	82 2f       	mov	r24, r18
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	fc 01       	movw	r30, r24
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	ea 0f       	add	r30, r26
    178c:	fb 1f       	adc	r31, r27
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	a8 0f       	add	r26, r24
    1796:	b9 1f       	adc	r27, r25
    1798:	8d 91       	ld	r24, X+
    179a:	9c 91       	ld	r25, X
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
							snake_array[j+2] = temp_array[2];
						}
						else{
							for(c=0; c<3; c++){
								//Shift right 3 times
								for(k=snake_length-1; k>0; k--){
    17a0:	21 50       	subi	r18, 0x01	; 1
    17a2:	f8 01       	movw	r30, r16
    17a4:	21 83       	std	Z+1, r18	; 0x01
    17a6:	e8 01       	movw	r28, r16
    17a8:	29 81       	ldd	r18, Y+1	; 0x01
    17aa:	aa 85       	ldd	r26, Y+10	; 0x0a
    17ac:	bb 85       	ldd	r27, Y+11	; 0x0b
    17ae:	22 23       	and	r18, r18
    17b0:	39 f7       	brne	.-50     	; 0x1780 <snakeFillAndMove.2840+0x282>
									snake_array[k] = snake_array[k-1]; 
								}
								snake_array[0] = -1;
    17b2:	4d 93       	st	X+, r20
    17b4:	5c 93       	st	X, r21
							snake_array[j] = temp_array[0];
							snake_array[j+1] = temp_array[1];
							snake_array[j+2] = temp_array[2];
						}
						else{
							for(c=0; c<3; c++){
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	8f 5f       	subi	r24, 0xFF	; 255
    17ba:	8a 83       	std	Y+2, r24	; 0x02
    17bc:	f8 01       	movw	r30, r16
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	c8 f2       	brcs	.-78     	; 0x1776 <snakeFillAndMove.2840+0x278>
								for(k=snake_length-1; k>0; k--){
									snake_array[k] = snake_array[k-1]; 
								}
								snake_array[0] = -1;
							}
							for(c=0;c<3;c++){
    17c4:	12 82       	std	Z+2, r1	; 0x02
    17c6:	13 c0       	rjmp	.+38     	; 0x17ee <snakeFillAndMove.2840+0x2f0>
								snake_array[c] = temp_array[c];
    17c8:	82 2f       	mov	r24, r18
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	e8 01       	movw	r28, r16
    17ce:	aa 85       	ldd	r26, Y+10	; 0x0a
    17d0:	bb 85       	ldd	r27, Y+11	; 0x0b
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	a8 0f       	add	r26, r24
    17d8:	b9 1f       	adc	r27, r25
    17da:	ed 81       	ldd	r30, Y+5	; 0x05
    17dc:	fe 81       	ldd	r31, Y+6	; 0x06
    17de:	e8 0f       	add	r30, r24
    17e0:	f9 1f       	adc	r31, r25
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	8d 93       	st	X+, r24
    17e8:	9c 93       	st	X, r25
								for(k=snake_length-1; k>0; k--){
									snake_array[k] = snake_array[k-1]; 
								}
								snake_array[0] = -1;
							}
							for(c=0;c<3;c++){
    17ea:	2f 5f       	subi	r18, 0xFF	; 255
    17ec:	2a 83       	std	Y+2, r18	; 0x02
    17ee:	f8 01       	movw	r30, r16
    17f0:	22 81       	ldd	r18, Z+2	; 0x02
    17f2:	23 30       	cpi	r18, 0x03	; 3
    17f4:	48 f3       	brcs	.-46     	; 0x17c8 <snakeFillAndMove.2840+0x2ca>
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <snakeFillAndMove.2840+0x30c>
					}
				}				
			}
		}
		else{
			drawSnake(2000, 2000);
    17f8:	18 01       	movw	r2, r16
    17fa:	80 ed       	ldi	r24, 0xD0	; 208
    17fc:	97 e0       	ldi	r25, 0x07	; 7
    17fe:	60 ed       	ldi	r22, 0xD0	; 208
    1800:	77 e0       	ldi	r23, 0x07	; 7
    1802:	0e 94 34 0a 	call	0x1468	; 0x1468 <drawSnake.2831>
			flag = 0;	
    1806:	e8 01       	movw	r28, r16
    1808:	18 82       	st	Y, r1
		}
	}
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	3f 90       	pop	r3
    1816:	2f 90       	pop	r2
    1818:	08 95       	ret

0000181a <snake>:
		delay_ms(delay);
		fill(0x00);
	}
}*/

void snake(int delay, int iterations) {
    181a:	2f 92       	push	r2
    181c:	3f 92       	push	r3
    181e:	6f 92       	push	r6
    1820:	7f 92       	push	r7
    1822:	8f 92       	push	r8
    1824:	9f 92       	push	r9
    1826:	af 92       	push	r10
    1828:	bf 92       	push	r11
    182a:	cf 92       	push	r12
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	1f 93       	push	r17
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	2e 97       	sbiw	r28, 0x0e	; 14
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	4c 01       	movw	r8, r24
    184a:	5b 01       	movw	r10, r22
			}
		}
		
		drawSnake(delay, 0);
	}
}
    184c:	6d b6       	in	r6, 0x3d	; 61
    184e:	7e b6       	in	r7, 0x3e	; 62
		fill(0x00);
	}
}*/

void snake(int delay, int iterations) {
	uint8_t c, k, rnd, flag = 1;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	89 83       	std	Y+1, r24	; 0x01
	int8_t snake_length = (rand()%11 + 10) * 3, sum;	//make the length of snake between 10 and 20
    1854:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    1858:	6b e0       	ldi	r22, 0x0B	; 11
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    1860:	9c 01       	movw	r18, r24
    1862:	22 0f       	add	r18, r18
    1864:	33 1f       	adc	r19, r19
    1866:	28 0f       	add	r18, r24
    1868:	39 1f       	adc	r19, r25
    186a:	22 5e       	subi	r18, 0xE2	; 226
    186c:	2a 87       	std	Y+10, r18	; 0x0a
	int i, j, snake_array[snake_length], temp_array[snake_length];	//, temp_array2[3];
    186e:	82 2f       	mov	r24, r18
    1870:	99 27       	eor	r25, r25
    1872:	87 fd       	sbrc	r24, 7
    1874:	90 95       	com	r25
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	2d b7       	in	r18, 0x3d	; 61
    187c:	3e b7       	in	r19, 0x3e	; 62
    187e:	28 1b       	sub	r18, r24
    1880:	39 0b       	sbc	r19, r25
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	3e bf       	out	0x3e, r19	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	2d bf       	out	0x3d, r18	; 61
    188c:	2f 5f       	subi	r18, 0xFF	; 255
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	3c 87       	std	Y+12, r19	; 0x0c
    1892:	2b 87       	std	Y+11, r18	; 0x0b
    1894:	2d b7       	in	r18, 0x3d	; 61
    1896:	3e b7       	in	r19, 0x3e	; 62
    1898:	28 1b       	sub	r18, r24
    189a:	39 0b       	sbc	r19, r25
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	3e bf       	out	0x3e, r19	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	2d bf       	out	0x3d, r18	; 61
    18a6:	8d b7       	in	r24, 0x3d	; 61
    18a8:	9e b7       	in	r25, 0x3e	; 62
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	9f 83       	std	Y+7, r25	; 0x07
    18ae:	8e 83       	std	Y+6, r24	; 0x06
    18b0:	ee 24       	eor	r14, r14
    18b2:	ff 24       	eor	r15, r15
					for(k=0;k<3;k++){
						snake_array[k] = rand() % CUBE_SIZE;	//In my case, 8
					}
				}
				else{
					snakeFillAndMove(1);	//action = 1 means fill the array, while any other number means shift the array
    18b4:	6e 01       	movw	r12, r28
    18b6:	08 94       	sec
    18b8:	c1 1c       	adc	r12, r1
    18ba:	d1 1c       	adc	r13, r1
    18bc:	44 c0       	rjmp	.+136    	; 0x1946 <snake+0x12c>
			flag = 0;	
		}
	}
		
	for(i=0;i<iterations && flag;i++){
		if(i){
    18be:	e1 14       	cp	r14, r1
    18c0:	f1 04       	cpc	r15, r1
    18c2:	29 f0       	breq	.+10     	; 0x18ce <snake+0xb4>
				snake_array[j] = snake_array[j-1] = 0;
				snake_array[j-2] = c;
			}
			*/
			
			snakeFillAndMove(2);
    18c4:	16 01       	movw	r2, r12
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <snakeFillAndMove.2840>
    18cc:	33 c0       	rjmp	.+102    	; 0x1934 <snake+0x11a>
		}
		else{
			//WORKS FOR LENGTH 8+ or less, random creation
			for(j=0; j<snake_length && flag; j+=3){
    18ce:	19 86       	std	Y+9, r1	; 0x09
    18d0:	18 86       	std	Y+8, r1	; 0x08
    18d2:	24 c0       	rjmp	.+72     	; 0x191c <snake+0x102>
				if(j==0){
    18d4:	23 2b       	or	r18, r19
    18d6:	c9 f4       	brne	.+50     	; 0x190a <snake+0xf0>
					for(k=0;k<3;k++){
    18d8:	1a 82       	std	Y+2, r1	; 0x02
    18da:	13 c0       	rjmp	.+38     	; 0x1902 <snake+0xe8>
						snake_array[k] = rand() % CUBE_SIZE;	//In my case, 8
    18dc:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    18e0:	eb 85       	ldd	r30, Y+11	; 0x0b
    18e2:	fc 85       	ldd	r31, Y+12	; 0x0c
    18e4:	21 2f       	mov	r18, r17
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	22 0f       	add	r18, r18
    18ea:	33 1f       	adc	r19, r19
    18ec:	e2 0f       	add	r30, r18
    18ee:	f3 1f       	adc	r31, r19
    18f0:	68 e0       	ldi	r22, 0x08	; 8
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
		}
		else{
			//WORKS FOR LENGTH 8+ or less, random creation
			for(j=0; j<snake_length && flag; j+=3){
				if(j==0){
					for(k=0;k<3;k++){
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	8a 83       	std	Y+2, r24	; 0x02
    1902:	1a 81       	ldd	r17, Y+2	; 0x02
    1904:	13 30       	cpi	r17, 0x03	; 3
    1906:	50 f3       	brcs	.-44     	; 0x18dc <snake+0xc2>
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <snake+0xf8>
						snake_array[k] = rand() % CUBE_SIZE;	//In my case, 8
					}
				}
				else{
					snakeFillAndMove(1);	//action = 1 means fill the array, while any other number means shift the array
    190a:	16 01       	movw	r2, r12
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <snakeFillAndMove.2840>
			
			snakeFillAndMove(2);
		}
		else{
			//WORKS FOR LENGTH 8+ or less, random creation
			for(j=0; j<snake_length && flag; j+=3){
    1912:	88 85       	ldd	r24, Y+8	; 0x08
    1914:	99 85       	ldd	r25, Y+9	; 0x09
    1916:	03 96       	adiw	r24, 0x03	; 3
    1918:	99 87       	std	Y+9, r25	; 0x09
    191a:	88 87       	std	Y+8, r24	; 0x08
    191c:	28 85       	ldd	r18, Y+8	; 0x08
    191e:	39 85       	ldd	r19, Y+9	; 0x09
    1920:	8a 85       	ldd	r24, Y+10	; 0x0a
    1922:	99 27       	eor	r25, r25
    1924:	87 fd       	sbrc	r24, 7
    1926:	90 95       	com	r25
    1928:	28 17       	cp	r18, r24
    192a:	39 07       	cpc	r19, r25
    192c:	1c f4       	brge	.+6      	; 0x1934 <snake+0x11a>
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	88 23       	and	r24, r24
    1932:	81 f6       	brne	.-96     	; 0x18d4 <snake+0xba>
					snakeFillAndMove(1);	//action = 1 means fill the array, while any other number means shift the array
				}
			}
		}
		
		drawSnake(delay, 0);
    1934:	16 01       	movw	r2, r12
    1936:	c4 01       	movw	r24, r8
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	0e 94 34 0a 	call	0x1468	; 0x1468 <drawSnake.2831>
			drawSnake(2000, 2000);
			flag = 0;	
		}
	}
		
	for(i=0;i<iterations && flag;i++){
    1940:	08 94       	sec
    1942:	e1 1c       	adc	r14, r1
    1944:	f1 1c       	adc	r15, r1
    1946:	ea 14       	cp	r14, r10
    1948:	fb 04       	cpc	r15, r11
    194a:	24 f4       	brge	.+8      	; 0x1954 <snake+0x13a>
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	88 23       	and	r24, r24
    1950:	09 f0       	breq	.+2      	; 0x1954 <snake+0x13a>
    1952:	b5 cf       	rjmp	.-150    	; 0x18be <snake+0xa4>
			}
		}
		
		drawSnake(delay, 0);
	}
}
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	7e be       	out	0x3e, r7	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	6d be       	out	0x3d, r6	; 61
    195e:	2e 96       	adiw	r28, 0x0e	; 14
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	1f 91       	pop	r17
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	df 90       	pop	r13
    1976:	cf 90       	pop	r12
    1978:	bf 90       	pop	r11
    197a:	af 90       	pop	r10
    197c:	9f 90       	pop	r9
    197e:	8f 90       	pop	r8
    1980:	7f 90       	pop	r7
    1982:	6f 90       	pop	r6
    1984:	3f 90       	pop	r3
    1986:	2f 90       	pop	r2
    1988:	08 95       	ret

0000198a <diagonal_triangle>:
		}
	}
}

//DIAGONAL TRIANGLE
void diagonal_triangle(int delay, int iterations) {
    198a:	3f 92       	push	r3
    198c:	4f 92       	push	r4
    198e:	5f 92       	push	r5
    1990:	6f 92       	push	r6
    1992:	7f 92       	push	r7
    1994:	8f 92       	push	r8
    1996:	9f 92       	push	r9
    1998:	af 92       	push	r10
    199a:	bf 92       	push	r11
    199c:	cf 92       	push	r12
    199e:	df 92       	push	r13
    19a0:	ef 92       	push	r14
    19a2:	ff 92       	push	r15
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <diagonal_triangle+0x24>
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <diagonal_triangle+0x26>
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <diagonal_triangle+0x28>
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	7c 83       	std	Y+4, r23	; 0x04
    19bc:	6b 83       	std	Y+3, r22	; 0x03
    19be:	11 e0       	ldi	r17, 0x01	; 1
    19c0:	44 24       	eor	r4, r4
    19c2:	55 24       	eor	r5, r5
    19c4:	8b c0       	rjmp	.+278    	; 0x1adc <diagonal_triangle+0x152>
	int8_t i,j,xx,jj,yy,b,c=1,s;
	s=CUBE_SIZE-1;
	for(i=0;i<iterations;i++) {
		do b=rand()%8;
    19c6:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    19ca:	68 e0       	ldi	r22, 0x08	; 8
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    19d2:	98 2e       	mov	r9, r24
		while(b==c);
    19d4:	81 17       	cp	r24, r17
    19d6:	b9 f3       	breq	.-18     	; 0x19c6 <diagonal_triangle+0x3c>
    19d8:	88 24       	eor	r8, r8
    19da:	75 c0       	rjmp	.+234    	; 0x1ac6 <diagonal_triangle+0x13c>
    19dc:	83 2d       	mov	r24, r3
    19de:	99 27       	eor	r25, r25
    19e0:	87 fd       	sbrc	r24, 7
    19e2:	90 95       	com	r25
    19e4:	a7 e0       	ldi	r26, 0x07	; 7
    19e6:	ca 2e       	mov	r12, r26
    19e8:	d1 2c       	mov	r13, r1
    19ea:	c8 1a       	sub	r12, r24
    19ec:	d9 0a       	sbc	r13, r25
    19ee:	1e 82       	std	Y+6, r1	; 0x06
    19f0:	1d 82       	std	Y+5, r1	; 0x05
    19f2:	f7 e0       	ldi	r31, 0x07	; 7
    19f4:	ef 2e       	mov	r14, r31
    19f6:	f1 2c       	mov	r15, r1
					else if(b==1) setvoxel(s-xx,s-yy,s-jj);
					else if(b==2) setvoxel(s-xx,yy,jj);
					else if(b==3) setvoxel(xx,s-yy,jj);
					else if(b==4) setvoxel(xx,yy,s-jj);
					else if(b==5) setvoxel(s-xx,yy,s-jj);
					else if(b==6) setvoxel(xx,s-yy,s-jj);
    19f8:	3c 01       	movw	r6, r24
    19fa:	4c c0       	rjmp	.+152    	; 0x1a94 <diagonal_triangle+0x10a>
		while(b==c);
		c = b;
		for(j=0;j<=s*3;j++) {
			for(yy=0;yy<=j;yy++) {
				for(xx=j-yy,jj=0;xx>=0;xx--,jj++) {
					if(b==0) setvoxel(xx,yy,jj);
    19fc:	99 20       	and	r9, r9
    19fe:	41 f4       	brne	.+16     	; 0x1a10 <diagonal_triangle+0x86>
    1a00:	c3 01       	movw	r24, r6
    1a02:	2d 81       	ldd	r18, Y+5	; 0x05
    1a04:	3e 81       	ldd	r19, Y+6	; 0x06
    1a06:	82 1b       	sub	r24, r18
    1a08:	93 0b       	sbc	r25, r19
    1a0a:	b8 01       	movw	r22, r16
    1a0c:	a9 01       	movw	r20, r18
    1a0e:	34 c0       	rjmp	.+104    	; 0x1a78 <diagonal_triangle+0xee>
					else if(b==1) setvoxel(s-xx,s-yy,s-jj);
    1a10:	31 e0       	ldi	r19, 0x01	; 1
    1a12:	93 16       	cp	r9, r19
    1a14:	11 f4       	brne	.+4      	; 0x1a1a <diagonal_triangle+0x90>
    1a16:	c6 01       	movw	r24, r12
    1a18:	28 c0       	rjmp	.+80     	; 0x1a6a <diagonal_triangle+0xe0>
					else if(b==2) setvoxel(s-xx,yy,jj);
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	98 16       	cp	r9, r24
    1a1e:	19 f4       	brne	.+6      	; 0x1a26 <diagonal_triangle+0x9c>
    1a20:	c6 01       	movw	r24, r12
    1a22:	b8 01       	movw	r22, r16
    1a24:	27 c0       	rjmp	.+78     	; 0x1a74 <diagonal_triangle+0xea>
					else if(b==3) setvoxel(xx,s-yy,jj);
    1a26:	93 e0       	ldi	r25, 0x03	; 3
    1a28:	99 16       	cp	r9, r25
    1a2a:	41 f4       	brne	.+16     	; 0x1a3c <diagonal_triangle+0xb2>
    1a2c:	c3 01       	movw	r24, r6
    1a2e:	ed 81       	ldd	r30, Y+5	; 0x05
    1a30:	fe 81       	ldd	r31, Y+6	; 0x06
    1a32:	8e 1b       	sub	r24, r30
    1a34:	9f 0b       	sbc	r25, r31
    1a36:	b5 01       	movw	r22, r10
    1a38:	af 01       	movw	r20, r30
    1a3a:	1e c0       	rjmp	.+60     	; 0x1a78 <diagonal_triangle+0xee>
					else if(b==4) setvoxel(xx,yy,s-jj);
    1a3c:	f4 e0       	ldi	r31, 0x04	; 4
    1a3e:	9f 16       	cp	r9, r31
    1a40:	31 f4       	brne	.+12     	; 0x1a4e <diagonal_triangle+0xc4>
    1a42:	c3 01       	movw	r24, r6
    1a44:	2d 81       	ldd	r18, Y+5	; 0x05
    1a46:	3e 81       	ldd	r19, Y+6	; 0x06
    1a48:	82 1b       	sub	r24, r18
    1a4a:	93 0b       	sbc	r25, r19
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <diagonal_triangle+0xcc>
					else if(b==5) setvoxel(s-xx,yy,s-jj);
    1a4e:	35 e0       	ldi	r19, 0x05	; 5
    1a50:	93 16       	cp	r9, r19
    1a52:	19 f4       	brne	.+6      	; 0x1a5a <diagonal_triangle+0xd0>
    1a54:	c6 01       	movw	r24, r12
    1a56:	b8 01       	movw	r22, r16
    1a58:	09 c0       	rjmp	.+18     	; 0x1a6c <diagonal_triangle+0xe2>
					else if(b==6) setvoxel(xx,s-yy,s-jj);
    1a5a:	86 e0       	ldi	r24, 0x06	; 6
    1a5c:	98 16       	cp	r9, r24
    1a5e:	41 f4       	brne	.+16     	; 0x1a70 <diagonal_triangle+0xe6>
    1a60:	c3 01       	movw	r24, r6
    1a62:	ed 81       	ldd	r30, Y+5	; 0x05
    1a64:	fe 81       	ldd	r31, Y+6	; 0x06
    1a66:	8e 1b       	sub	r24, r30
    1a68:	9f 0b       	sbc	r25, r31
    1a6a:	b5 01       	movw	r22, r10
    1a6c:	a7 01       	movw	r20, r14
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <diagonal_triangle+0xee>
					else setvoxel(s-xx,s-yy,jj);					
    1a70:	c6 01       	movw	r24, r12
    1a72:	b5 01       	movw	r22, r10
    1a74:	4d 81       	ldd	r20, Y+5	; 0x05
    1a76:	5e 81       	ldd	r21, Y+6	; 0x06
    1a78:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    1a7c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a7e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a80:	2f 5f       	subi	r18, 0xFF	; 255
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	3e 83       	std	Y+6, r19	; 0x06
    1a86:	2d 83       	std	Y+5, r18	; 0x05
    1a88:	08 94       	sec
    1a8a:	c1 1c       	adc	r12, r1
    1a8c:	d1 1c       	adc	r13, r1
    1a8e:	08 94       	sec
    1a90:	e1 08       	sbc	r14, r1
    1a92:	f1 08       	sbc	r15, r1
		do b=rand()%8;
		while(b==c);
		c = b;
		for(j=0;j<=s*3;j++) {
			for(yy=0;yy<=j;yy++) {
				for(xx=j-yy,jj=0;xx>=0;xx--,jj++) {
    1a94:	83 2d       	mov	r24, r3
    1a96:	3d 81       	ldd	r19, Y+5	; 0x05
    1a98:	83 1b       	sub	r24, r19
    1a9a:	87 ff       	sbrs	r24, 7
    1a9c:	af cf       	rjmp	.-162    	; 0x19fc <diagonal_triangle+0x72>
    1a9e:	0f 5f       	subi	r16, 0xFF	; 255
    1aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa2:	3a 94       	dec	r3
    1aa4:	08 94       	sec
    1aa6:	a1 08       	sbc	r10, r1
    1aa8:	b1 08       	sbc	r11, r1
	for(i=0;i<iterations;i++) {
		do b=rand()%8;
		while(b==c);
		c = b;
		for(j=0;j<=s*3;j++) {
			for(yy=0;yy<=j;yy++) {
    1aaa:	80 16       	cp	r8, r16
    1aac:	0c f0       	brlt	.+2      	; 0x1ab0 <diagonal_triangle+0x126>
    1aae:	96 cf       	rjmp	.-212    	; 0x19dc <diagonal_triangle+0x52>
					else if(b==5) setvoxel(s-xx,yy,s-jj);
					else if(b==6) setvoxel(xx,s-yy,s-jj);
					else setvoxel(s-xx,s-yy,jj);					
				}
			}
			delay_ms(delay);
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			fill(0x00);
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
	s=CUBE_SIZE-1;
	for(i=0;i<iterations;i++) {
		do b=rand()%8;
		while(b==c);
		c = b;
		for(j=0;j<=s*3;j++) {
    1abe:	83 94       	inc	r8
    1ac0:	86 e1       	ldi	r24, 0x16	; 22
    1ac2:	88 16       	cp	r8, r24
    1ac4:	39 f0       	breq	.+14     	; 0x1ad4 <diagonal_triangle+0x14a>
    1ac6:	38 2c       	mov	r3, r8
    1ac8:	00 e0       	ldi	r16, 0x00	; 0
    1aca:	10 e0       	ldi	r17, 0x00	; 0
    1acc:	e7 e0       	ldi	r30, 0x07	; 7
    1ace:	ae 2e       	mov	r10, r30
    1ad0:	b1 2c       	mov	r11, r1
    1ad2:	84 cf       	rjmp	.-248    	; 0x19dc <diagonal_triangle+0x52>
    1ad4:	08 94       	sec
    1ad6:	41 1c       	adc	r4, r1
    1ad8:	51 1c       	adc	r5, r1
    1ada:	19 2d       	mov	r17, r9

//DIAGONAL TRIANGLE
void diagonal_triangle(int delay, int iterations) {
	int8_t i,j,xx,jj,yy,b,c=1,s;
	s=CUBE_SIZE-1;
	for(i=0;i<iterations;i++) {
    1adc:	eb 81       	ldd	r30, Y+3	; 0x03
    1ade:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae0:	4e 16       	cp	r4, r30
    1ae2:	5f 06       	cpc	r5, r31
    1ae4:	0c f4       	brge	.+2      	; 0x1ae8 <diagonal_triangle+0x15e>
    1ae6:	6f cf       	rjmp	.-290    	; 0x19c6 <diagonal_triangle+0x3c>
			}
			delay_ms(delay);
			fill(0x00);
		}
	}
}
    1ae8:	26 96       	adiw	r28, 0x06	; 6
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	bf 90       	pop	r11
    1b06:	af 90       	pop	r10
    1b08:	9f 90       	pop	r9
    1b0a:	8f 90       	pop	r8
    1b0c:	7f 90       	pop	r7
    1b0e:	6f 90       	pop	r6
    1b10:	5f 90       	pop	r5
    1b12:	4f 90       	pop	r4
    1b14:	3f 90       	pop	r3
    1b16:	08 95       	ret

00001b18 <fireworks>:
	}
	
}

//FIREWORKS
void fireworks(int iterations, int delay, int explode_speed, uint8_t explode_range, uint8_t explode_density) {
    1b18:	2f 92       	push	r2
    1b1a:	3f 92       	push	r3
    1b1c:	4f 92       	push	r4
    1b1e:	5f 92       	push	r5
    1b20:	6f 92       	push	r6
    1b22:	7f 92       	push	r7
    1b24:	8f 92       	push	r8
    1b26:	9f 92       	push	r9
    1b28:	af 92       	push	r10
    1b2a:	bf 92       	push	r11
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	65 97       	sbiw	r28, 0x15	; 21
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	99 87       	std	Y+9, r25	; 0x09
    1b4e:	88 87       	std	Y+8, r24	; 0x08
    1b50:	7b 87       	std	Y+11, r23	; 0x0b
    1b52:	6a 87       	std	Y+10, r22	; 0x0a
    1b54:	21 e0       	ldi	r18, 0x01	; 1
    1b56:	2e 83       	std	Y+6, r18	; 0x06
    1b58:	1c 82       	std	Y+4, r1	; 0x04
    1b5a:	1b 82       	std	Y+3, r1	; 0x03
    1b5c:	f7 c0       	rjmp	.+494    	; 0x1d4c <fireworks+0x234>
	int8_t i,j,k,m=1,d;
	int8_t x,y,z,zz;
	
	for (i=0;i<iterations;i++) {
		x = rand()%4+2;	//two to five [x,y] = [2,2] to [5,5]. This makes fireworks inner in the cube
    1b5e:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    1b62:	64 e0       	ldi	r22, 0x04	; 4
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    1b6a:	12 e0       	ldi	r17, 0x02	; 2
    1b6c:	b1 2e       	mov	r11, r17
    1b6e:	b8 0e       	add	r11, r24
		y = rand()%4+2;
    1b70:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    1b74:	64 e0       	ldi	r22, 0x04	; 4
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    1b7c:	b2 e0       	ldi	r27, 0x02	; 2
    1b7e:	eb 2e       	mov	r14, r27
    1b80:	e8 0e       	add	r14, r24
		z = rand()%5+3;	//floor from 3 to 7
    1b82:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    1b86:	65 e0       	ldi	r22, 0x05	; 5
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    1b8e:	f8 2e       	mov	r15, r24
    1b90:	38 2f       	mov	r19, r24
    1b92:	3d 5f       	subi	r19, 0xFD	; 253
    1b94:	3f 83       	std	Y+7, r19	; 0x07
    1b96:	88 24       	eor	r8, r8
    1b98:	99 24       	eor	r9, r9
		for (j=0; j<z; j++) {	//up to 5th floor;
			setvoxel(x, y, j);	//[x,y,z] = [3,3,0]
    1b9a:	cb 2c       	mov	r12, r11
    1b9c:	dd 24       	eor	r13, r13
    1b9e:	c7 fc       	sbrc	r12, 7
    1ba0:	d0 94       	com	r13
    1ba2:	0e 2d       	mov	r16, r14
    1ba4:	11 27       	eor	r17, r17
    1ba6:	07 fd       	sbrc	r16, 7
    1ba8:	10 95       	com	r17
    1baa:	0f c0       	rjmp	.+30     	; 0x1bca <fireworks+0xb2>
    1bac:	c6 01       	movw	r24, r12
    1bae:	b8 01       	movw	r22, r16
    1bb0:	a4 01       	movw	r20, r8
    1bb2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
			delay_ms(delay);
    1bb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bba:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			fill(0x00);
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    1bc4:	08 94       	sec
    1bc6:	81 1c       	adc	r8, r1
    1bc8:	91 1c       	adc	r9, r1
	
	for (i=0;i<iterations;i++) {
		x = rand()%4+2;	//two to five [x,y] = [2,2] to [5,5]. This makes fireworks inner in the cube
		y = rand()%4+2;
		z = rand()%5+3;	//floor from 3 to 7
		for (j=0; j<z; j++) {	//up to 5th floor;
    1bca:	8f 81       	ldd	r24, Y+7	; 0x07
    1bcc:	88 16       	cp	r8, r24
    1bce:	74 f3       	brlt	.-36     	; 0x1bac <fireworks+0x94>
    1bd0:	00 e0       	ldi	r16, 0x00	; 0
    1bd2:	10 e0       	ldi	r17, 0x00	; 0
	}
	
}

//FIREWORKS
void fireworks(int iterations, int delay, int explode_speed, uint8_t explode_range, uint8_t explode_density) {
    1bd4:	9f 2d       	mov	r25, r15
    1bd6:	9b 5f       	subi	r25, 0xFB	; 251
    1bd8:	98 8b       	std	Y+16, r25	; 0x10
							zz=z-(j-4);
						}
					}
					else if(k==1){
						if(j==1){
							zz=z+1;
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	89 8b       	std	Y+17, r24	; 0x11
							zz=z+1;
						}
						if(j==1||j==2){
							zz=z+2;
						}
						if(j>4){
    1bde:	ef 2d       	mov	r30, r15
    1be0:	e9 5f       	subi	r30, 0xF9	; 249
    1be2:	ea 8b       	std	Y+18, r30	; 0x12
					if(k==0){
						if(j==0||j==3){
							zz=z+1;
						}
						if(j==1||j==2){
							zz=z+2;
    1be4:	ff 81       	ldd	r31, Y+7	; 0x07
    1be6:	fe 5f       	subi	r31, 0xFE	; 254
    1be8:	fb 8b       	std	Y+19, r31	; 0x13
    1bea:	ab 2c       	mov	r10, r11
    1bec:	bb 24       	eor	r11, r11
    1bee:	a7 fc       	sbrc	r10, 7
    1bf0:	b0 94       	com	r11
    1bf2:	ce 2c       	mov	r12, r14
    1bf4:	dd 24       	eor	r13, r13
    1bf6:	c7 fc       	sbrc	r12, 7
    1bf8:	d0 94       	com	r13
    1bfa:	82 c0       	rjmp	.+260    	; 0x1d00 <fireworks+0x1e8>

		for(j=0;j<CUBE_SIZE;j++) {
			d=2;
			while(d){
			
				fill(0x00);
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    1c02:	1c 86       	std	Y+12, r1	; 0x0c
    1c04:	2e 81       	ldd	r18, Y+6	; 0x06
    1c06:	22 23       	and	r18, r18
    1c08:	11 f4       	brne	.+4      	; 0x1c0e <fireworks+0xf6>
    1c0a:	31 e0       	ldi	r19, 0x01	; 1
    1c0c:	3c 87       	std	Y+12, r19	; 0x0c
    1c0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c10:	8e 83       	std	Y+6, r24	; 0x06
    1c12:	ee 24       	eor	r14, r14
				if(m) m=0;
				else m=1;
				
				for(k=0;k<4;k++){
					zz=z;
					if(k==0){
    1c14:	ee 20       	and	r14, r14
    1c16:	89 f4       	brne	.+34     	; 0x1c3a <fireworks+0x122>
						if(j==0||j==3){
    1c18:	00 23       	and	r16, r16
    1c1a:	29 f0       	breq	.+10     	; 0x1c26 <fireworks+0x10e>
    1c1c:	93 e0       	ldi	r25, 0x03	; 3
    1c1e:	f9 16       	cp	r15, r25
    1c20:	11 f0       	breq	.+4      	; 0x1c26 <fireworks+0x10e>
    1c22:	4f 81       	ldd	r20, Y+7	; 0x07
    1c24:	01 c0       	rjmp	.+2      	; 0x1c28 <fireworks+0x110>
							zz=z+1;
    1c26:	49 89       	ldd	r20, Y+17	; 0x11
						}
						if(j==1||j==2){
    1c28:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c2a:	e2 30       	cpi	r30, 0x02	; 2
    1c2c:	08 f4       	brcc	.+2      	; 0x1c30 <fireworks+0x118>
							zz=z+2;
    1c2e:	4b 89       	ldd	r20, Y+19	; 0x13
						}
						if(j>4){
    1c30:	f4 e0       	ldi	r31, 0x04	; 4
    1c32:	ff 15       	cp	r31, r15
    1c34:	d4 f4       	brge	.+52     	; 0x1c6a <fireworks+0x152>
    1c36:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c38:	18 c0       	rjmp	.+48     	; 0x1c6a <fireworks+0x152>
							zz=z-(j-4);
						}
					}
					else if(k==1){
    1c3a:	21 e0       	ldi	r18, 0x01	; 1
    1c3c:	e2 16       	cp	r14, r18
    1c3e:	49 f4       	brne	.+18     	; 0x1c52 <fireworks+0x13a>
						if(j==1){
    1c40:	f2 16       	cp	r15, r18
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <fireworks+0x130>
							zz=z+1;
    1c44:	49 89       	ldd	r20, Y+17	; 0x11
    1c46:	11 c0       	rjmp	.+34     	; 0x1c6a <fireworks+0x152>
						}
						if(j>2){
    1c48:	32 e0       	ldi	r19, 0x02	; 2
    1c4a:	3f 15       	cp	r19, r15
    1c4c:	6c f4       	brge	.+26     	; 0x1c68 <fireworks+0x150>
    1c4e:	4d 85       	ldd	r20, Y+13	; 0x0d
    1c50:	0c c0       	rjmp	.+24     	; 0x1c6a <fireworks+0x152>
							zz=z-(j-2);
						}
					}
					else if(k==2){
    1c52:	82 e0       	ldi	r24, 0x02	; 2
    1c54:	e8 16       	cp	r14, r24
    1c56:	21 f4       	brne	.+8      	; 0x1c60 <fireworks+0x148>
						if(j>1){
    1c58:	02 30       	cpi	r16, 0x02	; 2
    1c5a:	34 f0       	brlt	.+12     	; 0x1c68 <fireworks+0x150>
    1c5c:	4a 81       	ldd	r20, Y+2	; 0x02
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <fireworks+0x152>
							zz=z-(2*j-2);
						}
					}
					else{
						if(j>0){
    1c60:	00 23       	and	r16, r16
    1c62:	11 f0       	breq	.+4      	; 0x1c68 <fireworks+0x150>
    1c64:	49 81       	ldd	r20, Y+1	; 0x01
    1c66:	01 c0       	rjmp	.+2      	; 0x1c6a <fireworks+0x152>
    1c68:	4f 81       	ldd	r20, Y+7	; 0x07
    1c6a:	e4 2f       	mov	r30, r20
    1c6c:	ff 27       	eor	r31, r31
    1c6e:	e7 fd       	sbrc	r30, 7
    1c70:	f0 95       	com	r31
    1c72:	fd 8b       	std	Y+21, r31	; 0x15
    1c74:	ec 8b       	std	Y+20, r30	; 0x14
							zz=z-(2*j);
						}
					}
					
					if(m==0){
    1c76:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c78:	ff 23       	and	r31, r31
    1c7a:	a9 f4       	brne	.+42     	; 0x1ca6 <fireworks+0x18e>
						setvoxel(x-j,y,zz);
    1c7c:	c3 01       	movw	r24, r6
    1c7e:	b6 01       	movw	r22, r12
    1c80:	4c 89       	ldd	r20, Y+20	; 0x14
    1c82:	5d 89       	ldd	r21, Y+21	; 0x15
    1c84:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
						
						setvoxel(x,y-j,zz);
    1c88:	c5 01       	movw	r24, r10
    1c8a:	b4 01       	movw	r22, r8
    1c8c:	4c 89       	ldd	r20, Y+20	; 0x14
    1c8e:	5d 89       	ldd	r21, Y+21	; 0x15
    1c90:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
						setvoxel(x+j,y-j,zz);
    1c94:	c1 01       	movw	r24, r2
    1c96:	b4 01       	movw	r22, r8
    1c98:	4c 89       	ldd	r20, Y+20	; 0x14
    1c9a:	5d 89       	ldd	r21, Y+21	; 0x15
    1c9c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
						setvoxel(x-j,y-j,zz);
    1ca0:	c3 01       	movw	r24, r6
    1ca2:	b4 01       	movw	r22, r8
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <fireworks+0x1b6>
						
					}
					else{
						setvoxel(x+j,y,zz);
    1ca6:	c1 01       	movw	r24, r2
    1ca8:	b6 01       	movw	r22, r12
    1caa:	4c 89       	ldd	r20, Y+20	; 0x14
    1cac:	5d 89       	ldd	r21, Y+21	; 0x15
    1cae:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
					
						setvoxel(x,y+j,zz);
    1cb2:	c5 01       	movw	r24, r10
    1cb4:	b2 01       	movw	r22, r4
    1cb6:	4c 89       	ldd	r20, Y+20	; 0x14
    1cb8:	5d 89       	ldd	r21, Y+21	; 0x15
    1cba:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
						
						
						setvoxel(x-j,y+j,zz);
    1cbe:	c3 01       	movw	r24, r6
    1cc0:	b2 01       	movw	r22, r4
    1cc2:	4c 89       	ldd	r20, Y+20	; 0x14
    1cc4:	5d 89       	ldd	r21, Y+21	; 0x15
    1cc6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
						setvoxel(x+j,y+j,zz);
    1cca:	c1 01       	movw	r24, r2
    1ccc:	b2 01       	movw	r22, r4
    1cce:	4c 89       	ldd	r20, Y+20	; 0x14
    1cd0:	5d 89       	ldd	r21, Y+21	; 0x15
    1cd2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
				fill(0x00);
				
				if(m) m=0;
				else m=1;
				
				for(k=0;k<4;k++){
    1cd6:	e3 94       	inc	r14
    1cd8:	24 e0       	ldi	r18, 0x04	; 4
    1cda:	e2 16       	cp	r14, r18
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <fireworks+0x1c8>
    1cde:	9a cf       	rjmp	.-204    	; 0x1c14 <fireworks+0xfc>
					}
					
					
					
				}
				d--;
    1ce0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce2:	31 50       	subi	r19, 0x01	; 1
    1ce4:	3d 83       	std	Y+5, r19	; 0x05
				delay_ms(delay);
    1ce6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cea:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			fill(0x00);
		}

		for(j=0;j<CUBE_SIZE;j++) {
			d=2;
			while(d){
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf0:	88 23       	and	r24, r24
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <fireworks+0x1de>
    1cf4:	83 cf       	rjmp	.-250    	; 0x1bfc <fireworks+0xe4>
    1cf6:	0f 5f       	subi	r16, 0xFF	; 255
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
			setvoxel(x, y, j);	//[x,y,z] = [3,3,0]
			delay_ms(delay);
			fill(0x00);
		}

		for(j=0;j<CUBE_SIZE;j++) {
    1cfa:	08 30       	cpi	r16, 0x08	; 8
    1cfc:	11 05       	cpc	r17, r1
    1cfe:	09 f1       	breq	.+66     	; 0x1d42 <fireworks+0x22a>
	}
	
}

//FIREWORKS
void fireworks(int iterations, int delay, int explode_speed, uint8_t explode_range, uint8_t explode_density) {
    1d00:	80 2f       	mov	r24, r16
    1d02:	88 0f       	add	r24, r24
    1d04:	98 89       	ldd	r25, Y+16	; 0x10
    1d06:	98 1b       	sub	r25, r24
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	ef 81       	ldd	r30, Y+7	; 0x07
    1d0c:	e8 1b       	sub	r30, r24
    1d0e:	e9 83       	std	Y+1, r30	; 0x01
    1d10:	f2 e0       	ldi	r31, 0x02	; 2
    1d12:	fd 83       	std	Y+5, r31	; 0x05
						}
						if(j>4){
							zz=z-(j-4);
						}
					}
					else if(k==1){
    1d14:	f0 2e       	mov	r15, r16
						if(j==1){
							zz=z+1;
						}
						if(j>2){
    1d16:	28 89       	ldd	r18, Y+16	; 0x10
    1d18:	20 1b       	sub	r18, r16
    1d1a:	2d 87       	std	Y+13, r18	; 0x0d
					zz=z;
					if(k==0){
						if(j==0||j==3){
							zz=z+1;
						}
						if(j==1||j==2){
    1d1c:	30 2f       	mov	r19, r16
    1d1e:	31 50       	subi	r19, 0x01	; 1
    1d20:	3e 87       	std	Y+14, r19	; 0x0e
							zz=z+2;
						}
						if(j>4){
    1d22:	8a 89       	ldd	r24, Y+18	; 0x12
    1d24:	80 1b       	sub	r24, r16
    1d26:	8f 87       	std	Y+15, r24	; 0x0f
	}
	
}

//FIREWORKS
void fireworks(int iterations, int delay, int explode_speed, uint8_t explode_range, uint8_t explode_density) {
    1d28:	18 01       	movw	r2, r16
    1d2a:	2a 0c       	add	r2, r10
    1d2c:	3b 1c       	adc	r3, r11
						setvoxel(x+j,y-j,zz);
						setvoxel(x-j,y-j,zz);
						
					}
					else{
						setvoxel(x+j,y,zz);
    1d2e:	28 01       	movw	r4, r16
    1d30:	4c 0c       	add	r4, r12
    1d32:	5d 1c       	adc	r5, r13
					
						setvoxel(x,y+j,zz);
						
						
						setvoxel(x-j,y+j,zz);
    1d34:	35 01       	movw	r6, r10
    1d36:	60 1a       	sub	r6, r16
    1d38:	71 0a       	sbc	r7, r17
							zz=z-(2*j);
						}
					}
					
					if(m==0){
						setvoxel(x-j,y,zz);
    1d3a:	46 01       	movw	r8, r12
    1d3c:	80 1a       	sub	r8, r16
    1d3e:	91 0a       	sbc	r9, r17
    1d40:	5d cf       	rjmp	.-326    	; 0x1bfc <fireworks+0xe4>
	}
	
}

//FIREWORKS
void fireworks(int iterations, int delay, int explode_speed, uint8_t explode_range, uint8_t explode_density) {
    1d42:	eb 81       	ldd	r30, Y+3	; 0x03
    1d44:	fc 81       	ldd	r31, Y+4	; 0x04
    1d46:	31 96       	adiw	r30, 0x01	; 1
    1d48:	fc 83       	std	Y+4, r31	; 0x04
    1d4a:	eb 83       	std	Y+3, r30	; 0x03
	int8_t i,j,k,m=1,d;
	int8_t x,y,z,zz;
	
	for (i=0;i<iterations;i++) {
    1d4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d50:	88 85       	ldd	r24, Y+8	; 0x08
    1d52:	99 85       	ldd	r25, Y+9	; 0x09
    1d54:	28 17       	cp	r18, r24
    1d56:	39 07       	cpc	r19, r25
    1d58:	0c f4       	brge	.+2      	; 0x1d5c <fireworks+0x244>
    1d5a:	01 cf       	rjmp	.-510    	; 0x1b5e <fireworks+0x46>
				delay_ms(delay);
			}
		//	delay_ms(3000);
		}
	}
}
    1d5c:	65 96       	adiw	r28, 0x15	; 21
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	cf 90       	pop	r12
    1d78:	bf 90       	pop	r11
    1d7a:	af 90       	pop	r10
    1d7c:	9f 90       	pop	r9
    1d7e:	8f 90       	pop	r8
    1d80:	7f 90       	pop	r7
    1d82:	6f 90       	pop	r6
    1d84:	5f 90       	pop	r5
    1d86:	4f 90       	pop	r4
    1d88:	3f 90       	pop	r3
    1d8a:	2f 90       	pop	r2
    1d8c:	08 95       	ret

00001d8e <effect_random_sparkle_flash>:
	}
	for (i=20;i>=1;i--){
		effect_random_sparkle_flash(iterations, i, delay);
	}
}
void effect_random_sparkle_flash (int iterations, int voxels, int delay){
    1d8e:	6f 92       	push	r6
    1d90:	7f 92       	push	r7
    1d92:	8f 92       	push	r8
    1d94:	9f 92       	push	r9
    1d96:	af 92       	push	r10
    1d98:	bf 92       	push	r11
    1d9a:	cf 92       	push	r12
    1d9c:	df 92       	push	r13
    1d9e:	ef 92       	push	r14
    1da0:	ff 92       	push	r15
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	3c 01       	movw	r6, r24
    1dac:	4b 01       	movw	r8, r22
    1dae:	5a 01       	movw	r10, r20
    1db0:	cc 24       	eor	r12, r12
    1db2:	dd 24       	eor	r13, r13
    1db4:	2c c0       	rjmp	.+88     	; 0x1e0e <effect_random_sparkle_flash+0x80>
	int i;
	int v;
	for (i = 0; i < iterations; i++){
		for (v=0;v<=voxels;v++) {
			setvoxel(rand()%8,rand()%8,rand()%8);
    1db6:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    1dba:	8c 01       	movw	r16, r24
    1dbc:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    1dc0:	7c 01       	movw	r14, r24
    1dc2:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	c8 01       	movw	r24, r16
    1dca:	68 e0       	ldi	r22, 0x08	; 8
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    1dd2:	8c 01       	movw	r16, r24
    1dd4:	c7 01       	movw	r24, r14
    1dd6:	68 e0       	ldi	r22, 0x08	; 8
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    1dde:	9c 01       	movw	r18, r24
    1de0:	cf 01       	movw	r24, r30
    1de2:	68 e0       	ldi	r22, 0x08	; 8
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    1dea:	ac 01       	movw	r20, r24
    1dec:	c8 01       	movw	r24, r16
    1dee:	b9 01       	movw	r22, r18
    1df0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
}
void effect_random_sparkle_flash (int iterations, int voxels, int delay){
	int i;
	int v;
	for (i = 0; i < iterations; i++){
		for (v=0;v<=voxels;v++) {
    1df4:	21 96       	adiw	r28, 0x01	; 1
    1df6:	8c 16       	cp	r8, r28
    1df8:	9d 06       	cpc	r9, r29
    1dfa:	ec f6       	brge	.-70     	; 0x1db6 <effect_random_sparkle_flash+0x28>
			setvoxel(rand()%8,rand()%8,rand()%8);
		}
		delay_ms(delay);
    1dfc:	c5 01       	movw	r24, r10
    1dfe:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
		fill(0x00);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
	}
}
void effect_random_sparkle_flash (int iterations, int voxels, int delay){
	int i;
	int v;
	for (i = 0; i < iterations; i++){
    1e08:	08 94       	sec
    1e0a:	c1 1c       	adc	r12, r1
    1e0c:	d1 1c       	adc	r13, r1
    1e0e:	c6 14       	cp	r12, r6
    1e10:	d7 04       	cpc	r13, r7
    1e12:	1c f4       	brge	.+6      	; 0x1e1a <effect_random_sparkle_flash+0x8c>
    1e14:	c0 e0       	ldi	r28, 0x00	; 0
    1e16:	d0 e0       	ldi	r29, 0x00	; 0
    1e18:	ee cf       	rjmp	.-36     	; 0x1df6 <effect_random_sparkle_flash+0x68>
			setvoxel(rand()%8,rand()%8,rand()%8);
		}
		delay_ms(delay);
		fill(0x00);
	}
}
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	ff 90       	pop	r15
    1e24:	ef 90       	pop	r14
    1e26:	df 90       	pop	r13
    1e28:	cf 90       	pop	r12
    1e2a:	bf 90       	pop	r11
    1e2c:	af 90       	pop	r10
    1e2e:	9f 90       	pop	r9
    1e30:	8f 90       	pop	r8
    1e32:	7f 90       	pop	r7
    1e34:	6f 90       	pop	r6
    1e36:	08 95       	ret

00001e38 <effect_random_sparkle>:

//EFFECT 13
// blink 1 random voxel, blink 2 random voxels..... blink 20 random voxels
// and back to 1 again.
// Set n number of voxels at random positions
void effect_random_sparkle (int iterations, int delay){
    1e38:	ef 92       	push	r14
    1e3a:	ff 92       	push	r15
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	7c 01       	movw	r14, r24
    1e46:	8b 01       	movw	r16, r22
    1e48:	c1 e0       	ldi	r28, 0x01	; 1
    1e4a:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for (i=1;i<20;i++){
		effect_random_sparkle_flash(iterations, i, delay);
    1e4c:	c7 01       	movw	r24, r14
    1e4e:	be 01       	movw	r22, r28
    1e50:	a8 01       	movw	r20, r16
    1e52:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <effect_random_sparkle_flash>
// blink 1 random voxel, blink 2 random voxels..... blink 20 random voxels
// and back to 1 again.
// Set n number of voxels at random positions
void effect_random_sparkle (int iterations, int delay){
	int i;
	for (i=1;i<20;i++){
    1e56:	21 96       	adiw	r28, 0x01	; 1
    1e58:	c4 31       	cpi	r28, 0x14	; 20
    1e5a:	d1 05       	cpc	r29, r1
    1e5c:	b9 f7       	brne	.-18     	; 0x1e4c <effect_random_sparkle+0x14>
		effect_random_sparkle_flash(iterations, i, delay);
	}
	for (i=20;i>=1;i--){
		effect_random_sparkle_flash(iterations, i, delay);
    1e5e:	c7 01       	movw	r24, r14
    1e60:	be 01       	movw	r22, r28
    1e62:	a8 01       	movw	r20, r16
    1e64:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <effect_random_sparkle_flash>
void effect_random_sparkle (int iterations, int delay){
	int i;
	for (i=1;i<20;i++){
		effect_random_sparkle_flash(iterations, i, delay);
	}
	for (i=20;i>=1;i--){
    1e68:	21 97       	sbiw	r28, 0x01	; 1
    1e6a:	c9 f7       	brne	.-14     	; 0x1e5e <effect_random_sparkle+0x26>
		effect_random_sparkle_flash(iterations, i, delay);
	}
}
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	08 95       	ret

00001e7a <draw_positions_axis>:
			positions[px]--;
		}
	}
	draw_positions_axis (AXIS_Z, positions,0);
}
void draw_positions_axis (char axis, unsigned char positions[64], int invert){
    1e7a:	4f 92       	push	r4
    1e7c:	5f 92       	push	r5
    1e7e:	6f 92       	push	r6
    1e80:	7f 92       	push	r7
    1e82:	9f 92       	push	r9
    1e84:	af 92       	push	r10
    1e86:	bf 92       	push	r11
    1e88:	cf 92       	push	r12
    1e8a:	df 92       	push	r13
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	98 2e       	mov	r9, r24
    1e9a:	16 2f       	mov	r17, r22
    1e9c:	07 2f       	mov	r16, r23
    1e9e:	3a 01       	movw	r6, r20
	int x, y, p;
	fill(0x00);
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    1ea6:	21 2f       	mov	r18, r17
    1ea8:	30 2f       	mov	r19, r16
    1eaa:	c9 01       	movw	r24, r18
    1eac:	6c 01       	movw	r12, r24
    1eae:	c0 e0       	ldi	r28, 0x00	; 0
    1eb0:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (x=0; x<8; x++){
		for (y=0; y<8; y++){
			if (invert){
				p = (7-positions[(x*8)+y]);
    1eb2:	07 e0       	ldi	r16, 0x07	; 7
    1eb4:	40 2e       	mov	r4, r16
    1eb6:	51 2c       	mov	r5, r1
    1eb8:	35 c0       	rjmp	.+106    	; 0x1f24 <draw_positions_axis+0xaa>
	int x, y, p;
	fill(0x00);
	
	for (x=0; x<8; x++){
		for (y=0; y<8; y++){
			if (invert){
    1eba:	61 14       	cp	r6, r1
    1ebc:	71 04       	cpc	r7, r1
    1ebe:	31 f0       	breq	.+12     	; 0x1ecc <draw_positions_axis+0x52>
				p = (7-positions[(x*8)+y]);
    1ec0:	f5 01       	movw	r30, r10
    1ec2:	80 81       	ld	r24, Z
    1ec4:	a2 01       	movw	r20, r4
    1ec6:	48 1b       	sub	r20, r24
    1ec8:	51 09       	sbc	r21, r1
    1eca:	04 c0       	rjmp	.+8      	; 0x1ed4 <draw_positions_axis+0x5a>
			}
			else{
				p = positions[(x*8)+y];
    1ecc:	f7 01       	movw	r30, r14
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	50 e0       	ldi	r21, 0x00	; 0

			}
			if (axis == AXIS_Z) {
    1ed4:	fa e7       	ldi	r31, 0x7A	; 122
    1ed6:	9f 16       	cp	r9, r31
    1ed8:	19 f4       	brne	.+6      	; 0x1ee0 <draw_positions_axis+0x66>
				setvoxel(x,y,p);
    1eda:	ce 01       	movw	r24, r28
    1edc:	b8 01       	movw	r22, r16
    1ede:	0d c0       	rjmp	.+26     	; 0x1efa <draw_positions_axis+0x80>
			}
			if (axis == AXIS_Y) {
    1ee0:	89 e7       	ldi	r24, 0x79	; 121
    1ee2:	98 16       	cp	r9, r24
    1ee4:	21 f4       	brne	.+8      	; 0x1eee <draw_positions_axis+0x74>
				setvoxel(x,p,y);
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	ba 01       	movw	r22, r20
    1eea:	a8 01       	movw	r20, r16
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <draw_positions_axis+0x80>
			}	
			if (axis == AXIS_X) {
    1eee:	98 e7       	ldi	r25, 0x78	; 120
    1ef0:	99 16       	cp	r9, r25
    1ef2:	29 f4       	brne	.+10     	; 0x1efe <draw_positions_axis+0x84>
				setvoxel(p,y,x);
    1ef4:	ca 01       	movw	r24, r20
    1ef6:	b8 01       	movw	r22, r16
    1ef8:	ae 01       	movw	r20, r28
    1efa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
void draw_positions_axis (char axis, unsigned char positions[64], int invert){
	int x, y, p;
	fill(0x00);
	
	for (x=0; x<8; x++){
		for (y=0; y<8; y++){
    1efe:	0f 5f       	subi	r16, 0xFF	; 255
    1f00:	1f 4f       	sbci	r17, 0xFF	; 255
    1f02:	08 94       	sec
    1f04:	a1 1c       	adc	r10, r1
    1f06:	b1 1c       	adc	r11, r1
    1f08:	08 94       	sec
    1f0a:	e1 1c       	adc	r14, r1
    1f0c:	f1 1c       	adc	r15, r1
    1f0e:	08 30       	cpi	r16, 0x08	; 8
    1f10:	11 05       	cpc	r17, r1
    1f12:	99 f6       	brne	.-90     	; 0x1eba <draw_positions_axis+0x40>
}
void draw_positions_axis (char axis, unsigned char positions[64], int invert){
	int x, y, p;
	fill(0x00);
	
	for (x=0; x<8; x++){
    1f14:	21 96       	adiw	r28, 0x01	; 1
    1f16:	e8 e0       	ldi	r30, 0x08	; 8
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	ce 0e       	add	r12, r30
    1f1c:	df 1e       	adc	r13, r31
    1f1e:	c8 30       	cpi	r28, 0x08	; 8
    1f20:	d1 05       	cpc	r29, r1
    1f22:	29 f0       	breq	.+10     	; 0x1f2e <draw_positions_axis+0xb4>
    1f24:	56 01       	movw	r10, r12
    1f26:	76 01       	movw	r14, r12
    1f28:	00 e0       	ldi	r16, 0x00	; 0
    1f2a:	10 e0       	ldi	r17, 0x00	; 0
    1f2c:	c6 cf       	rjmp	.-116    	; 0x1eba <draw_positions_axis+0x40>
			if (axis == AXIS_X) {
				setvoxel(p,y,x);
			}
		}
	}
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	df 90       	pop	r13
    1f3c:	cf 90       	pop	r12
    1f3e:	bf 90       	pop	r11
    1f40:	af 90       	pop	r10
    1f42:	9f 90       	pop	r9
    1f44:	7f 90       	pop	r7
    1f46:	6f 90       	pop	r6
    1f48:	5f 90       	pop	r5
    1f4a:	4f 90       	pop	r4
    1f4c:	08 95       	ret

00001f4e <effect_boxside_randsend_parallel>:
	}
}

//EFFECT 10
void effect_boxside_randsend_parallel (char axis, int origin, int delay, int mode)
{
    1f4e:	2f 92       	push	r2
    1f50:	3f 92       	push	r3
    1f52:	4f 92       	push	r4
    1f54:	5f 92       	push	r5
    1f56:	6f 92       	push	r6
    1f58:	7f 92       	push	r7
    1f5a:	8f 92       	push	r8
    1f5c:	9f 92       	push	r9
    1f5e:	af 92       	push	r10
    1f60:	bf 92       	push	r11
    1f62:	cf 92       	push	r12
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	c1 58       	subi	r28, 0x81	; 129
    1f78:	d0 40       	sbci	r29, 0x00	; 0
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	cf 57       	subi	r28, 0x7F	; 127
    1f86:	df 4f       	sbci	r29, 0xFF	; 255
    1f88:	88 83       	st	Y, r24
    1f8a:	c1 58       	subi	r28, 0x81	; 129
    1f8c:	d0 40       	sbci	r29, 0x00	; 0
    1f8e:	2b 01       	movw	r4, r22
    1f90:	3a 01       	movw	r6, r20
    1f92:	49 01       	movw	r8, r18
    1f94:	91 e4       	ldi	r25, 0x41	; 65
    1f96:	a9 2e       	mov	r10, r25
    1f98:	b1 2c       	mov	r11, r1
    1f9a:	ac 0e       	add	r10, r28
    1f9c:	bd 1e       	adc	r11, r29
    1f9e:	f5 01       	movw	r30, r10
    1fa0:	81 e8       	ldi	r24, 0x81	; 129
    1fa2:	c8 2e       	mov	r12, r24
    1fa4:	d1 2c       	mov	r13, r1
    1fa6:	cc 0e       	add	r12, r28
    1fa8:	dd 1e       	adc	r13, r29
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
    1faa:	11 92       	st	Z+, r1
	unsigned char pos[64];
	int notdone = 1;
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
    1fac:	ec 15       	cp	r30, r12
    1fae:	fd 05       	cpc	r31, r13
    1fb0:	e1 f7       	brne	.-8      	; 0x1faa <effect_boxside_randsend_parallel+0x5c>
    1fb2:	00 e0       	ldi	r16, 0x00	; 0
    1fb4:	10 e0       	ldi	r17, 0x00	; 0
				sent++;
			}
		}
		
		done = 0;
		for (i=0;i<64;i++)
    1fb6:	1e 01       	movw	r2, r28
    1fb8:	08 94       	sec
    1fba:	21 1c       	adc	r2, r1
    1fbc:	31 1c       	adc	r3, r1
		pos[i] = 0;
	}
	
	while (notdone)
	{
		if (mode == 1)
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	88 16       	cp	r8, r24
    1fc2:	91 04       	cpc	r9, r1
    1fc4:	c9 f4       	brne	.+50     	; 0x1ff8 <effect_boxside_randsend_parallel+0xaa>
    1fc6:	14 c0       	rjmp	.+40     	; 0x1ff0 <effect_boxside_randsend_parallel+0xa2>
		{
			notdone2 = 1;
			while (notdone2 && sent<64)
			{
				i = rand()%64;
    1fc8:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    1fcc:	60 e4       	ldi	r22, 0x40	; 64
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
				if (pos[i] == 0)
    1fd4:	e1 e4       	ldi	r30, 0x41	; 65
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	ec 0f       	add	r30, r28
    1fda:	fd 1f       	adc	r31, r29
    1fdc:	e8 0f       	add	r30, r24
    1fde:	f9 1f       	adc	r31, r25
    1fe0:	80 81       	ld	r24, Z
    1fe2:	88 23       	and	r24, r24
    1fe4:	89 f7       	brne	.-30     	; 0x1fc8 <effect_boxside_randsend_parallel+0x7a>
				{
					sent++;
    1fe6:	0f 5f       	subi	r16, 0xFF	; 255
    1fe8:	1f 4f       	sbci	r17, 0xFF	; 255
					pos[i] += 1;
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	90 83       	st	Z, r25
    1fee:	16 c0       	rjmp	.+44     	; 0x201c <effect_boxside_randsend_parallel+0xce>
	while (notdone)
	{
		if (mode == 1)
		{
			notdone2 = 1;
			while (notdone2 && sent<64)
    1ff0:	00 34       	cpi	r16, 0x40	; 64
    1ff2:	11 05       	cpc	r17, r1
    1ff4:	4c f3       	brlt	.-46     	; 0x1fc8 <effect_boxside_randsend_parallel+0x7a>
    1ff6:	12 c0       	rjmp	.+36     	; 0x201c <effect_boxside_randsend_parallel+0xce>
					sent++;
					pos[i] += 1;
					notdone2 = 0;
				}
			}
		} else if (mode == 2)
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	88 16       	cp	r8, r24
    1ffc:	91 04       	cpc	r9, r1
    1ffe:	71 f4       	brne	.+28     	; 0x201c <effect_boxside_randsend_parallel+0xce>
		{
			if (sent<64)
    2000:	00 34       	cpi	r16, 0x40	; 64
    2002:	11 05       	cpc	r17, r1
    2004:	5c f4       	brge	.+22     	; 0x201c <effect_boxside_randsend_parallel+0xce>
			{
				pos[sent] += 1;
    2006:	e1 e4       	ldi	r30, 0x41	; 65
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	ec 0f       	add	r30, r28
    200c:	fd 1f       	adc	r31, r29
    200e:	e0 0f       	add	r30, r16
    2010:	f1 1f       	adc	r31, r17
    2012:	80 81       	ld	r24, Z
    2014:	8f 5f       	subi	r24, 0xFF	; 255
    2016:	80 83       	st	Z, r24
				sent++;
    2018:	0f 5f       	subi	r16, 0xFF	; 255
    201a:	1f 4f       	sbci	r17, 0xFF	; 255
    201c:	f5 01       	movw	r30, r10
    201e:	ee 24       	eor	r14, r14
    2020:	ff 24       	eor	r15, r15
		}
		
		done = 0;
		for (i=0;i<64;i++)
		{
			if (pos[i] > 0 && pos[i] <7)
    2022:	90 81       	ld	r25, Z
    2024:	89 2f       	mov	r24, r25
    2026:	81 50       	subi	r24, 0x01	; 1
    2028:	86 30       	cpi	r24, 0x06	; 6
    202a:	10 f4       	brcc	.+4      	; 0x2030 <effect_boxside_randsend_parallel+0xe2>
			{
				pos[i] += 1;
    202c:	9f 5f       	subi	r25, 0xFF	; 255
    202e:	90 83       	st	Z, r25
			}
				
			if (pos[i] == 7)
    2030:	80 81       	ld	r24, Z
    2032:	87 30       	cpi	r24, 0x07	; 7
    2034:	19 f4       	brne	.+6      	; 0x203c <effect_boxside_randsend_parallel+0xee>
				done++;
    2036:	08 94       	sec
    2038:	e1 1c       	adc	r14, r1
    203a:	f1 1c       	adc	r15, r1
    203c:	31 96       	adiw	r30, 0x01	; 1
				sent++;
			}
		}
		
		done = 0;
		for (i=0;i<64;i++)
    203e:	ec 15       	cp	r30, r12
    2040:	fd 05       	cpc	r31, r13
    2042:	79 f7       	brne	.-34     	; 0x2022 <effect_boxside_randsend_parallel+0xd4>
    2044:	d1 01       	movw	r26, r2
    2046:	f5 01       	movw	r30, r10
    2048:	80 81       	ld	r24, Z
		if (done == 64)
			notdone = 0;
		
		for (i=0;i<64;i++)
		{
			if (origin == 0)
    204a:	41 14       	cp	r4, r1
    204c:	51 04       	cpc	r5, r1
    204e:	19 f0       	breq	.+6      	; 0x2056 <effect_boxside_randsend_parallel+0x108>
			{
				cubepos[i] = pos[i];
			} else
			{
				cubepos[i] = (7-pos[i]);
    2050:	97 e0       	ldi	r25, 0x07	; 7
    2052:	98 1b       	sub	r25, r24
    2054:	89 2f       	mov	r24, r25
    2056:	8c 93       	st	X, r24
    2058:	31 96       	adiw	r30, 0x01	; 1
    205a:	11 96       	adiw	r26, 0x01	; 1
		}
		
		if (done == 64)
			notdone = 0;
		
		for (i=0;i<64;i++)
    205c:	ec 15       	cp	r30, r12
    205e:	fd 05       	cpc	r31, r13
    2060:	99 f7       	brne	.-26     	; 0x2048 <effect_boxside_randsend_parallel+0xfa>
				cubepos[i] = (7-pos[i]);
			}
		}
		
		
		delay_ms(delay);
    2062:	c3 01       	movw	r24, r6
    2064:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
		draw_positions_axis(axis,cubepos,0);
    2068:	cf 57       	subi	r28, 0x7F	; 127
    206a:	df 4f       	sbci	r29, 0xFF	; 255
    206c:	88 81       	ld	r24, Y
    206e:	c1 58       	subi	r28, 0x81	; 129
    2070:	d0 40       	sbci	r29, 0x00	; 0
    2072:	b1 01       	movw	r22, r2
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <draw_positions_axis>
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
	}
	
	while (notdone)
    207c:	80 e4       	ldi	r24, 0x40	; 64
    207e:	e8 16       	cp	r14, r24
    2080:	f1 04       	cpc	r15, r1
    2082:	09 f0       	breq	.+2      	; 0x2086 <effect_boxside_randsend_parallel+0x138>
    2084:	9c cf       	rjmp	.-200    	; 0x1fbe <effect_boxside_randsend_parallel+0x70>
		delay_ms(delay);
		draw_positions_axis(axis,cubepos,0);
	//	LED_PORT ^= LED_RED;
	}
	
}
    2086:	cf 57       	subi	r28, 0x7F	; 127
    2088:	df 4f       	sbci	r29, 0xFF	; 255
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	df 90       	pop	r13
    20a2:	cf 90       	pop	r12
    20a4:	bf 90       	pop	r11
    20a6:	af 90       	pop	r10
    20a8:	9f 90       	pop	r9
    20aa:	8f 90       	pop	r8
    20ac:	7f 90       	pop	r7
    20ae:	6f 90       	pop	r6
    20b0:	5f 90       	pop	r5
    20b2:	4f 90       	pop	r4
    20b4:	3f 90       	pop	r3
    20b6:	2f 90       	pop	r2
    20b8:	08 95       	ret

000020ba <effect_axis_updown_randsuspend>:
		delay_ms(delay);
	}
}

//EFFECT 9
void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert){
    20ba:	3f 92       	push	r3
    20bc:	4f 92       	push	r4
    20be:	5f 92       	push	r5
    20c0:	6f 92       	push	r6
    20c2:	7f 92       	push	r7
    20c4:	8f 92       	push	r8
    20c6:	9f 92       	push	r9
    20c8:	af 92       	push	r10
    20ca:	bf 92       	push	r11
    20cc:	cf 92       	push	r12
    20ce:	df 92       	push	r13
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	c0 58       	subi	r28, 0x80	; 128
    20e2:	d0 40       	sbci	r29, 0x00	; 0
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	38 2e       	mov	r3, r24
    20f0:	2b 01       	movw	r4, r22
    20f2:	4a 01       	movw	r8, r20
    20f4:	39 01       	movw	r6, r18
    20f6:	00 e0       	ldi	r16, 0x00	; 0
    20f8:	10 e0       	ldi	r17, 0x00	; 0

	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++){
		positions[i] = 0; // Set all starting positions to 0
    20fa:	6e 01       	movw	r12, r28
    20fc:	08 94       	sec
    20fe:	c1 1c       	adc	r12, r1
    2100:	d1 1c       	adc	r13, r1
		destinations[i] = rand()%8;
    2102:	31 e4       	ldi	r19, 0x41	; 65
    2104:	e3 2e       	mov	r14, r19
    2106:	f1 2c       	mov	r15, r1
    2108:	ec 0e       	add	r14, r28
    210a:	fd 1e       	adc	r15, r29

	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++){
		positions[i] = 0; // Set all starting positions to 0
    210c:	f6 01       	movw	r30, r12
    210e:	e0 0f       	add	r30, r16
    2110:	f1 1f       	adc	r31, r17
    2112:	10 82       	st	Z, r1
		destinations[i] = rand()%8;
    2114:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2118:	f7 01       	movw	r30, r14
    211a:	e0 0f       	add	r30, r16
    211c:	f1 1f       	adc	r31, r17
    211e:	68 e0       	ldi	r22, 0x08	; 8
    2120:	70 e0       	ldi	r23, 0x00	; 0
    2122:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    2126:	80 83       	st	Z, r24
	unsigned char destinations[64];

	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++){
    2128:	0f 5f       	subi	r16, 0xFF	; 255
    212a:	1f 4f       	sbci	r17, 0xFF	; 255
    212c:	00 34       	cpi	r16, 0x40	; 64
    212e:	11 05       	cpc	r17, r1
    2130:	69 f7       	brne	.-38     	; 0x210c <effect_axis_updown_randsuspend+0x52>
    2132:	ee 24       	eor	r14, r14
    2134:	ff 24       	eor	r15, r15
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++){
    2136:	5e 01       	movw	r10, r28
    2138:	08 94       	sec
    213a:	a1 1c       	adc	r10, r1
    213c:	b1 1c       	adc	r11, r1
    213e:	21 e4       	ldi	r18, 0x41	; 65
    2140:	c2 2e       	mov	r12, r18
    2142:	d1 2c       	mov	r13, r1
    2144:	cc 0e       	add	r12, r28
    2146:	dd 1e       	adc	r13, r29
    2148:	1c c0       	rjmp	.+56     	; 0x2182 <effect_axis_updown_randsuspend+0xc8>
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++){
			if (positions[px]<destinations[px]){
    214a:	d8 01       	movw	r26, r16
    214c:	9c 91       	ld	r25, X
    214e:	80 81       	ld	r24, Z
    2150:	98 17       	cp	r25, r24
    2152:	10 f4       	brcc	.+4      	; 0x2158 <effect_axis_updown_randsuspend+0x9e>
				positions[px]++;
    2154:	9f 5f       	subi	r25, 0xFF	; 255
    2156:	9c 93       	st	X, r25
    2158:	0f 5f       	subi	r16, 0xFF	; 255
    215a:	1f 4f       	sbci	r17, 0xFF	; 255
    215c:	31 96       	adiw	r30, 0x01	; 1
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++){
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++){
    215e:	0c 15       	cp	r16, r12
    2160:	1d 05       	cpc	r17, r13
    2162:	99 f7       	brne	.-26     	; 0x214a <effect_axis_updown_randsuspend+0x90>
			if (positions[px]<destinations[px]){
				positions[px]++;
			}
		}
        // Draw the positions and take a nap
		draw_positions_axis (axis, positions,invert);
    2164:	83 2d       	mov	r24, r3
    2166:	b5 01       	movw	r22, r10
    2168:	a3 01       	movw	r20, r6
    216a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <draw_positions_axis>
		delay_ms(delay);
    216e:	c2 01       	movw	r24, r4
    2170:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++){
    2174:	08 94       	sec
    2176:	e1 1c       	adc	r14, r1
    2178:	f1 1c       	adc	r15, r1
    217a:	b8 e0       	ldi	r27, 0x08	; 8
    217c:	eb 16       	cp	r14, r27
    217e:	f1 04       	cpc	r15, r1
    2180:	19 f0       	breq	.+6      	; 0x2188 <effect_axis_updown_randsuspend+0xce>
    2182:	85 01       	movw	r16, r10
    2184:	f6 01       	movw	r30, r12
    2186:	e1 cf       	rjmp	.-62     	; 0x214a <effect_axis_updown_randsuspend+0x90>
    2188:	f8 01       	movw	r30, r16
		delay_ms(delay);
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++){
		destinations[i] = 7;
    218a:	27 e0       	ldi	r18, 0x07	; 7
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++){
    218c:	ce 01       	movw	r24, r28
    218e:	8f 57       	subi	r24, 0x7F	; 127
    2190:	9f 4f       	sbci	r25, 0xFF	; 255
		destinations[i] = 7;
    2192:	21 93       	st	Z+, r18
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++){
    2194:	e8 17       	cp	r30, r24
    2196:	f9 07       	cpc	r31, r25
    2198:	e1 f7       	brne	.-8      	; 0x2192 <effect_axis_updown_randsuspend+0xd8>
		destinations[i] = 7;
	}
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
    219a:	c4 01       	movw	r24, r8
    219c:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    21a0:	ee 24       	eor	r14, r14
    21a2:	ff 24       	eor	r15, r15
			}
			if (positions[px]>destinations[px]){
				positions[px]--;
			}
		}
		draw_positions_axis (axis, positions,invert);
    21a4:	4e 01       	movw	r8, r28
    21a6:	08 94       	sec
    21a8:	81 1c       	adc	r8, r1
    21aa:	91 1c       	adc	r9, r1
    21ac:	1f c0       	rjmp	.+62     	; 0x21ec <effect_axis_updown_randsuspend+0x132>
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++){
		for (px=0; px<64; px++){
			if (positions[px]<destinations[px]){
    21ae:	80 81       	ld	r24, Z
    21b0:	9c 91       	ld	r25, X
    21b2:	89 17       	cp	r24, r25
    21b4:	10 f4       	brcc	.+4      	; 0x21ba <effect_axis_updown_randsuspend+0x100>
				positions[px]++;
    21b6:	8f 5f       	subi	r24, 0xFF	; 255
    21b8:	80 83       	st	Z, r24
			}
			if (positions[px]>destinations[px]){
    21ba:	80 81       	ld	r24, Z
    21bc:	98 17       	cp	r25, r24
    21be:	10 f4       	brcc	.+4      	; 0x21c4 <effect_axis_updown_randsuspend+0x10a>
				positions[px]--;
    21c0:	81 50       	subi	r24, 0x01	; 1
    21c2:	80 83       	st	Z, r24
    21c4:	31 96       	adiw	r30, 0x01	; 1
    21c6:	11 96       	adiw	r26, 0x01	; 1
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++){
		for (px=0; px<64; px++){
    21c8:	e0 17       	cp	r30, r16
    21ca:	f1 07       	cpc	r31, r17
    21cc:	81 f7       	brne	.-32     	; 0x21ae <effect_axis_updown_randsuspend+0xf4>
			}
			if (positions[px]>destinations[px]){
				positions[px]--;
			}
		}
		draw_positions_axis (axis, positions,invert);
    21ce:	83 2d       	mov	r24, r3
    21d0:	b4 01       	movw	r22, r8
    21d2:	a3 01       	movw	r20, r6
    21d4:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <draw_positions_axis>
		delay_ms(delay);
    21d8:	c2 01       	movw	r24, r4
    21da:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++){
    21de:	08 94       	sec
    21e0:	e1 1c       	adc	r14, r1
    21e2:	f1 1c       	adc	r15, r1
    21e4:	88 e0       	ldi	r24, 0x08	; 8
    21e6:	e8 16       	cp	r14, r24
    21e8:	f1 04       	cpc	r15, r1
    21ea:	19 f0       	breq	.+6      	; 0x21f2 <effect_axis_updown_randsuspend+0x138>
    21ec:	f5 01       	movw	r30, r10
    21ee:	d6 01       	movw	r26, r12
    21f0:	de cf       	rjmp	.-68     	; 0x21ae <effect_axis_updown_randsuspend+0xf4>
			}
		}
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
}
    21f2:	c0 58       	subi	r28, 0x80	; 128
    21f4:	df 4f       	sbci	r29, 0xFF	; 255
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	ff 90       	pop	r15
    220a:	ef 90       	pop	r14
    220c:	df 90       	pop	r13
    220e:	cf 90       	pop	r12
    2210:	bf 90       	pop	r11
    2212:	af 90       	pop	r10
    2214:	9f 90       	pop	r9
    2216:	8f 90       	pop	r8
    2218:	7f 90       	pop	r7
    221a:	6f 90       	pop	r6
    221c:	5f 90       	pop	r5
    221e:	4f 90       	pop	r4
    2220:	3f 90       	pop	r3
    2222:	08 95       	ret

00002224 <effect_z_updown_move>:
		for (y=0;y<32;y++){
			destinations[rand()%64] = rand()%8;
		}
	}
}
void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis){
    2224:	ac 01       	movw	r20, r24
    2226:	dc 01       	movw	r26, r24
    2228:	fb 01       	movw	r30, r22
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
	int px;
	for (px=0; px<64; px++){
		if (positions[px]<destinations[px]){
    222e:	9c 91       	ld	r25, X
    2230:	80 81       	ld	r24, Z
    2232:	98 17       	cp	r25, r24
    2234:	10 f4       	brcc	.+4      	; 0x223a <effect_z_updown_move+0x16>
			positions[px]++;
    2236:	9f 5f       	subi	r25, 0xFF	; 255
    2238:	9c 93       	st	X, r25
		}
		if (positions[px]>destinations[px]){
    223a:	9c 91       	ld	r25, X
    223c:	80 81       	ld	r24, Z
    223e:	89 17       	cp	r24, r25
    2240:	10 f4       	brcc	.+4      	; 0x2246 <effect_z_updown_move+0x22>
			positions[px]--;
    2242:	91 50       	subi	r25, 0x01	; 1
    2244:	9c 93       	st	X, r25
		}
	}
}
void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis){
	int px;
	for (px=0; px<64; px++){
    2246:	2f 5f       	subi	r18, 0xFF	; 255
    2248:	3f 4f       	sbci	r19, 0xFF	; 255
    224a:	11 96       	adiw	r26, 0x01	; 1
    224c:	31 96       	adiw	r30, 0x01	; 1
    224e:	20 34       	cpi	r18, 0x40	; 64
    2250:	31 05       	cpc	r19, r1
    2252:	69 f7       	brne	.-38     	; 0x222e <effect_z_updown_move+0xa>
		}
		if (positions[px]>destinations[px]){
			positions[px]--;
		}
	}
	draw_positions_axis (AXIS_Z, positions,0);
    2254:	8a e7       	ldi	r24, 0x7A	; 122
    2256:	ba 01       	movw	r22, r20
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <draw_positions_axis>
}
    2260:	08 95       	ret

00002262 <effect_z_updown>:
		}	
	}
}

//EFFECT 3
void effect_z_updown (int iterations, int delay){
    2262:	2f 92       	push	r2
    2264:	3f 92       	push	r3
    2266:	4f 92       	push	r4
    2268:	5f 92       	push	r5
    226a:	6f 92       	push	r6
    226c:	7f 92       	push	r7
    226e:	8f 92       	push	r8
    2270:	9f 92       	push	r9
    2272:	af 92       	push	r10
    2274:	bf 92       	push	r11
    2276:	cf 92       	push	r12
    2278:	df 92       	push	r13
    227a:	ef 92       	push	r14
    227c:	ff 92       	push	r15
    227e:	0f 93       	push	r16
    2280:	1f 93       	push	r17
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	c0 58       	subi	r28, 0x80	; 128
    228c:	d0 40       	sbci	r29, 0x00	; 0
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
    2298:	2c 01       	movw	r4, r24
    229a:	7b 01       	movw	r14, r22
    229c:	00 e0       	ldi	r16, 0x00	; 0
    229e:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char destinations[64];

	int i,y,move;
	
	for (i=0; i<64; i++){
		positions[i] = 4;
    22a0:	5e 01       	movw	r10, r28
    22a2:	08 94       	sec
    22a4:	a1 1c       	adc	r10, r1
    22a6:	b1 1c       	adc	r11, r1
    22a8:	e4 e0       	ldi	r30, 0x04	; 4
    22aa:	9e 2e       	mov	r9, r30
		destinations[i] = rand()%8;
    22ac:	71 e4       	ldi	r23, 0x41	; 65
    22ae:	c7 2e       	mov	r12, r23
    22b0:	d1 2c       	mov	r13, r1
    22b2:	cc 0e       	add	r12, r28
    22b4:	dd 1e       	adc	r13, r29
	unsigned char destinations[64];

	int i,y,move;
	
	for (i=0; i<64; i++){
		positions[i] = 4;
    22b6:	f5 01       	movw	r30, r10
    22b8:	e0 0f       	add	r30, r16
    22ba:	f1 1f       	adc	r31, r17
    22bc:	90 82       	st	Z, r9
		destinations[i] = rand()%8;
    22be:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    22c2:	f6 01       	movw	r30, r12
    22c4:	e0 0f       	add	r30, r16
    22c6:	f1 1f       	adc	r31, r17
    22c8:	68 e0       	ldi	r22, 0x08	; 8
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    22d0:	80 83       	st	Z, r24
	unsigned char positions[64];
	unsigned char destinations[64];

	int i,y,move;
	
	for (i=0; i<64; i++){
    22d2:	0f 5f       	subi	r16, 0xFF	; 255
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
    22d6:	00 34       	cpi	r16, 0x40	; 64
    22d8:	11 05       	cpc	r17, r1
    22da:	69 f7       	brne	.-38     	; 0x22b6 <effect_z_updown+0x54>
    22dc:	00 e0       	ldi	r16, 0x00	; 0
    22de:	10 e0       	ldi	r17, 0x00	; 0
		positions[i] = 4;
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++){
		effect_z_updown_move(positions, destinations, AXIS_Z);
    22e0:	61 e4       	ldi	r22, 0x41	; 65
    22e2:	a6 2e       	mov	r10, r22
    22e4:	b1 2c       	mov	r11, r1
    22e6:	ac 0e       	add	r10, r28
    22e8:	bd 1e       	adc	r11, r29
    22ea:	6e 01       	movw	r12, r28
    22ec:	08 94       	sec
    22ee:	c1 1c       	adc	r12, r1
    22f0:	d1 1c       	adc	r13, r1
		delay_ms(delay);
    22f2:	37 01       	movw	r6, r14
		positions[i] = 4;
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++){
		effect_z_updown_move(positions, destinations, AXIS_Z);
    22f4:	c6 01       	movw	r24, r12
    22f6:	b5 01       	movw	r22, r10
    22f8:	4a e7       	ldi	r20, 0x7A	; 122
    22fa:	0e 94 12 11 	call	0x2224	; 0x2224 <effect_z_updown_move>
		delay_ms(delay);
    22fe:	c3 01       	movw	r24, r6
    2300:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
	for (i=0; i<64; i++){
		positions[i] = 4;
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++){
    2304:	0f 5f       	subi	r16, 0xFF	; 255
    2306:	1f 4f       	sbci	r17, 0xFF	; 255
    2308:	08 30       	cpi	r16, 0x08	; 8
    230a:	11 05       	cpc	r17, r1
    230c:	99 f7       	brne	.-26     	; 0x22f4 <effect_z_updown+0x92>
		for (move=0;move<8;move++){
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    230e:	57 01       	movw	r10, r14
    2310:	aa 0c       	add	r10, r10
    2312:	bb 1c       	adc	r11, r11
    2314:	aa 0c       	add	r10, r10
    2316:	bb 1c       	adc	r11, r11
    2318:	cc 24       	eor	r12, r12
    231a:	dd 24       	eor	r13, r13
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++){
		for (move=0;move<8;move++){
			effect_z_updown_move(positions, destinations, AXIS_Z);
    231c:	41 e4       	ldi	r20, 0x41	; 65
    231e:	84 2e       	mov	r8, r20
    2320:	91 2c       	mov	r9, r1
    2322:	8c 0e       	add	r8, r28
    2324:	9d 1e       	adc	r9, r29
    2326:	1e 01       	movw	r2, r28
    2328:	08 94       	sec
    232a:	21 1c       	adc	r2, r1
    232c:	31 1c       	adc	r3, r1
    232e:	32 c0       	rjmp	.+100    	; 0x2394 <effect_z_updown+0x132>
			delay_ms(delay);
		}

		delay_ms(delay*4);
    2330:	00 e0       	ldi	r16, 0x00	; 0
    2332:	10 e0       	ldi	r17, 0x00	; 0
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++){
		for (move=0;move<8;move++){
			effect_z_updown_move(positions, destinations, AXIS_Z);
    2334:	c1 01       	movw	r24, r2
    2336:	b4 01       	movw	r22, r8
    2338:	4a e7       	ldi	r20, 0x7A	; 122
    233a:	0e 94 12 11 	call	0x2224	; 0x2224 <effect_z_updown_move>
			delay_ms(delay);
    233e:	c3 01       	movw	r24, r6
    2340:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++){
		for (move=0;move<8;move++){
    2344:	0f 5f       	subi	r16, 0xFF	; 255
    2346:	1f 4f       	sbci	r17, 0xFF	; 255
    2348:	08 30       	cpi	r16, 0x08	; 8
    234a:	11 05       	cpc	r17, r1
    234c:	99 f7       	brne	.-26     	; 0x2334 <effect_z_updown+0xd2>
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    234e:	c5 01       	movw	r24, r10
    2350:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    2354:	ee 24       	eor	r14, r14
    2356:	ff 24       	eor	r15, r15

		for (y=0;y<32;y++){
			destinations[rand()%64] = rand()%8;
    2358:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    235c:	8c 01       	movw	r16, r24
    235e:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2362:	9c 01       	movw	r18, r24
    2364:	c8 01       	movw	r24, r16
    2366:	60 e4       	ldi	r22, 0x40	; 64
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    236e:	f4 01       	movw	r30, r8
    2370:	e8 0f       	add	r30, r24
    2372:	f9 1f       	adc	r31, r25
    2374:	c9 01       	movw	r24, r18
    2376:	68 e0       	ldi	r22, 0x08	; 8
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    237e:	80 83       	st	Z, r24
			delay_ms(delay);
		}

		delay_ms(delay*4);

		for (y=0;y<32;y++){
    2380:	08 94       	sec
    2382:	e1 1c       	adc	r14, r1
    2384:	f1 1c       	adc	r15, r1
    2386:	80 e2       	ldi	r24, 0x20	; 32
    2388:	e8 16       	cp	r14, r24
    238a:	f1 04       	cpc	r15, r1
    238c:	29 f7       	brne	.-54     	; 0x2358 <effect_z_updown+0xf6>
	for (i=0; i<8; i++){
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++){
    238e:	08 94       	sec
    2390:	c1 1c       	adc	r12, r1
    2392:	d1 1c       	adc	r13, r1
    2394:	c4 14       	cp	r12, r4
    2396:	d5 04       	cpc	r13, r5
    2398:	5c f2       	brlt	.-106    	; 0x2330 <effect_z_updown+0xce>

		for (y=0;y<32;y++){
			destinations[rand()%64] = rand()%8;
		}
	}
}
    239a:	c0 58       	subi	r28, 0x80	; 128
    239c:	df 4f       	sbci	r29, 0xFF	; 255
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	1f 91       	pop	r17
    23ae:	0f 91       	pop	r16
    23b0:	ff 90       	pop	r15
    23b2:	ef 90       	pop	r14
    23b4:	df 90       	pop	r13
    23b6:	cf 90       	pop	r12
    23b8:	bf 90       	pop	r11
    23ba:	af 90       	pop	r10
    23bc:	9f 90       	pop	r9
    23be:	8f 90       	pop	r8
    23c0:	7f 90       	pop	r7
    23c2:	6f 90       	pop	r6
    23c4:	5f 90       	pop	r5
    23c6:	4f 90       	pop	r4
    23c8:	3f 90       	pop	r3
    23ca:	2f 90       	pop	r2
    23cc:	08 95       	ret

000023ce <walk_through_walls>:
		}
		delay_ms(800);
	}
}

void walk_through_walls(int delay, int iterations){
    23ce:	2f 92       	push	r2
    23d0:	3f 92       	push	r3
    23d2:	4f 92       	push	r4
    23d4:	5f 92       	push	r5
    23d6:	6f 92       	push	r6
    23d8:	7f 92       	push	r7
    23da:	8f 92       	push	r8
    23dc:	9f 92       	push	r9
    23de:	af 92       	push	r10
    23e0:	bf 92       	push	r11
    23e2:	cf 92       	push	r12
    23e4:	df 92       	push	r13
    23e6:	ef 92       	push	r14
    23e8:	ff 92       	push	r15
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	2c 01       	movw	r4, r24
    23f4:	1b 01       	movw	r2, r22
	int i,j,c,k;
	
	for(i=0;i<iterations*2;i++){	
    23f6:	22 0c       	add	r2, r2
    23f8:	33 1c       	adc	r3, r3
    23fa:	66 24       	eor	r6, r6
    23fc:	77 24       	eor	r7, r7
    23fe:	7d c0       	rjmp	.+250    	; 0x24fa <walk_through_walls+0x12c>
		for(c=0;c<CUBE_SIZE;c++){
			for(k=0;k<4;k++){
				for(j=0;j<CUBE_SIZE;j++){
					if(k==0){
    2400:	c1 14       	cp	r12, r1
    2402:	d1 04       	cpc	r13, r1
    2404:	a1 f4       	brne	.+40     	; 0x242e <walk_through_walls+0x60>
						if(!(i%2)) setvoxel(j,0,c);
    2406:	81 14       	cp	r8, r1
    2408:	91 04       	cpc	r9, r1
    240a:	39 f4       	brne	.+14     	; 0x241a <walk_through_walls+0x4c>
    240c:	c8 01       	movw	r24, r16
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	70 e0       	ldi	r23, 0x00	; 0
    2412:	ae 01       	movw	r20, r28
    2414:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    2418:	06 c0       	rjmp	.+12     	; 0x2426 <walk_through_walls+0x58>
						else clrvoxel(j,0,c);
    241a:	c8 01       	movw	r24, r16
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	ae 01       	movw	r20, r28
    2422:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
						delay_ms(delay);
    2426:	c2 01       	movw	r24, r4
    2428:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    242c:	40 c0       	rjmp	.+128    	; 0x24ae <walk_through_walls+0xe0>
					}
					else if(k==1){
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	c8 16       	cp	r12, r24
    2432:	d1 04       	cpc	r13, r1
    2434:	59 f4       	brne	.+22     	; 0x244c <walk_through_walls+0x7e>
						if(!(i%2))	setvoxel(CUBE_SIZE-1,j+1,c);
    2436:	81 14       	cp	r8, r1
    2438:	91 04       	cpc	r9, r1
    243a:	21 f4       	brne	.+8      	; 0x2444 <walk_through_walls+0x76>
    243c:	87 e0       	ldi	r24, 0x07	; 7
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	b5 01       	movw	r22, r10
    2442:	0e c0       	rjmp	.+28     	; 0x2460 <walk_through_walls+0x92>
						else clrvoxel(CUBE_SIZE-1,j+1,c);
    2444:	87 e0       	ldi	r24, 0x07	; 7
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	b5 01       	movw	r22, r10
    244a:	11 c0       	rjmp	.+34     	; 0x246e <walk_through_walls+0xa0>
						delay_ms(delay);
						if(j==CUBE_SIZE-2) break;
					}
					else if(k==2){
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	c8 16       	cp	r12, r24
    2450:	d1 04       	cpc	r13, r1
    2452:	b9 f4       	brne	.+46     	; 0x2482 <walk_through_walls+0xb4>
						if(!(i%2)) setvoxel(CUBE_SIZE-2-j,CUBE_SIZE-1,c);
    2454:	81 14       	cp	r8, r1
    2456:	91 04       	cpc	r9, r1
    2458:	39 f4       	brne	.+14     	; 0x2468 <walk_through_walls+0x9a>
    245a:	c7 01       	movw	r24, r14
    245c:	67 e0       	ldi	r22, 0x07	; 7
    245e:	70 e0       	ldi	r23, 0x00	; 0
    2460:	ae 01       	movw	r20, r28
    2462:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    2466:	06 c0       	rjmp	.+12     	; 0x2474 <walk_through_walls+0xa6>
						else clrvoxel(CUBE_SIZE-2-j,CUBE_SIZE-1,c);
    2468:	c7 01       	movw	r24, r14
    246a:	67 e0       	ldi	r22, 0x07	; 7
    246c:	70 e0       	ldi	r23, 0x00	; 0
    246e:	ae 01       	movw	r20, r28
    2470:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
						delay_ms(delay);
    2474:	c2 01       	movw	r24, r4
    2476:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
						if(j==CUBE_SIZE-2) break;
    247a:	06 30       	cpi	r16, 0x06	; 6
    247c:	11 05       	cpc	r17, r1
    247e:	b9 f4       	brne	.+46     	; 0x24ae <walk_through_walls+0xe0>
    2480:	22 c0       	rjmp	.+68     	; 0x24c6 <walk_through_walls+0xf8>
					}
					else{
						if(!(i%2))	setvoxel(0,CUBE_SIZE-2-j,c);
    2482:	81 14       	cp	r8, r1
    2484:	91 04       	cpc	r9, r1
    2486:	39 f4       	brne	.+14     	; 0x2496 <walk_through_walls+0xc8>
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	b7 01       	movw	r22, r14
    248e:	ae 01       	movw	r20, r28
    2490:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    2494:	06 c0       	rjmp	.+12     	; 0x24a2 <walk_through_walls+0xd4>
						else clrvoxel(0,CUBE_SIZE-2-j,c);
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	b7 01       	movw	r22, r14
    249c:	ae 01       	movw	r20, r28
    249e:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
						delay_ms(delay);
    24a2:	c2 01       	movw	r24, r4
    24a4:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
						if(j==CUBE_SIZE-3) break;
    24a8:	05 30       	cpi	r16, 0x05	; 5
    24aa:	11 05       	cpc	r17, r1
    24ac:	61 f0       	breq	.+24     	; 0x24c6 <walk_through_walls+0xf8>
	int i,j,c,k;
	
	for(i=0;i<iterations*2;i++){	
		for(c=0;c<CUBE_SIZE;c++){
			for(k=0;k<4;k++){
				for(j=0;j<CUBE_SIZE;j++){
    24ae:	0f 5f       	subi	r16, 0xFF	; 255
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	08 94       	sec
    24b4:	a1 1c       	adc	r10, r1
    24b6:	b1 1c       	adc	r11, r1
    24b8:	08 94       	sec
    24ba:	e1 08       	sbc	r14, r1
    24bc:	f1 08       	sbc	r15, r1
    24be:	08 30       	cpi	r16, 0x08	; 8
    24c0:	11 05       	cpc	r17, r1
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <walk_through_walls+0xf8>
    24c4:	9d cf       	rjmp	.-198    	; 0x2400 <walk_through_walls+0x32>
void walk_through_walls(int delay, int iterations){
	int i,j,c,k;
	
	for(i=0;i<iterations*2;i++){	
		for(c=0;c<CUBE_SIZE;c++){
			for(k=0;k<4;k++){
    24c6:	08 94       	sec
    24c8:	c1 1c       	adc	r12, r1
    24ca:	d1 1c       	adc	r13, r1
    24cc:	84 e0       	ldi	r24, 0x04	; 4
    24ce:	c8 16       	cp	r12, r24
    24d0:	d1 04       	cpc	r13, r1
    24d2:	49 f0       	breq	.+18     	; 0x24e6 <walk_through_walls+0x118>
    24d4:	00 e0       	ldi	r16, 0x00	; 0
    24d6:	10 e0       	ldi	r17, 0x00	; 0
    24d8:	b1 e0       	ldi	r27, 0x01	; 1
    24da:	ab 2e       	mov	r10, r27
    24dc:	b1 2c       	mov	r11, r1
    24de:	a6 e0       	ldi	r26, 0x06	; 6
    24e0:	ea 2e       	mov	r14, r26
    24e2:	f1 2c       	mov	r15, r1
    24e4:	8d cf       	rjmp	.-230    	; 0x2400 <walk_through_walls+0x32>

void walk_through_walls(int delay, int iterations){
	int i,j,c,k;
	
	for(i=0;i<iterations*2;i++){	
		for(c=0;c<CUBE_SIZE;c++){
    24e6:	21 96       	adiw	r28, 0x01	; 1
    24e8:	c8 30       	cpi	r28, 0x08	; 8
    24ea:	d1 05       	cpc	r29, r1
    24ec:	19 f0       	breq	.+6      	; 0x24f4 <walk_through_walls+0x126>
    24ee:	cc 24       	eor	r12, r12
    24f0:	dd 24       	eor	r13, r13
    24f2:	f0 cf       	rjmp	.-32     	; 0x24d4 <walk_through_walls+0x106>
}

void walk_through_walls(int delay, int iterations){
	int i,j,c,k;
	
	for(i=0;i<iterations*2;i++){	
    24f4:	08 94       	sec
    24f6:	61 1c       	adc	r6, r1
    24f8:	71 1c       	adc	r7, r1
    24fa:	62 14       	cp	r6, r2
    24fc:	73 04       	cpc	r7, r3
    24fe:	44 f4       	brge	.+16     	; 0x2510 <walk_through_walls+0x142>
    2500:	c0 e0       	ldi	r28, 0x00	; 0
    2502:	d0 e0       	ldi	r29, 0x00	; 0
    2504:	f1 e0       	ldi	r31, 0x01	; 1
    2506:	8f 2e       	mov	r8, r31
    2508:	91 2c       	mov	r9, r1
    250a:	86 20       	and	r8, r6
    250c:	97 20       	and	r9, r7
    250e:	ef cf       	rjmp	.-34     	; 0x24ee <walk_through_walls+0x120>
					}
				}
			}
		}
	}
}
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	1f 91       	pop	r17
    2516:	0f 91       	pop	r16
    2518:	ff 90       	pop	r15
    251a:	ef 90       	pop	r14
    251c:	df 90       	pop	r13
    251e:	cf 90       	pop	r12
    2520:	bf 90       	pop	r11
    2522:	af 90       	pop	r10
    2524:	9f 90       	pop	r9
    2526:	8f 90       	pop	r8
    2528:	7f 90       	pop	r7
    252a:	6f 90       	pop	r6
    252c:	5f 90       	pop	r5
    252e:	4f 90       	pop	r4
    2530:	3f 90       	pop	r3
    2532:	2f 90       	pop	r2
    2534:	08 95       	ret

00002536 <filled_box_draw>:
		}
		d0=d1=d2=d3=d4=d5=0;
		delay_ms(300);
	}
}
void filled_box_draw(int x,int y,int z,uint8_t size,uint8_t mode) {	//mode 0 - clear, mode 1 - fill
    2536:	3f 92       	push	r3
    2538:	4f 92       	push	r4
    253a:	5f 92       	push	r5
    253c:	6f 92       	push	r6
    253e:	7f 92       	push	r7
    2540:	8f 92       	push	r8
    2542:	9f 92       	push	r9
    2544:	af 92       	push	r10
    2546:	bf 92       	push	r11
    2548:	cf 92       	push	r12
    254a:	df 92       	push	r13
    254c:	ef 92       	push	r14
    254e:	ff 92       	push	r15
    2550:	0f 93       	push	r16
    2552:	1f 93       	push	r17
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	38 2e       	mov	r3, r24
    255a:	49 2e       	mov	r4, r25
    255c:	3b 01       	movw	r6, r22
    255e:	4a 01       	movw	r8, r20
    2560:	c2 2e       	mov	r12, r18
    2562:	50 2e       	mov	r5, r16
    2564:	dd 24       	eor	r13, r13
    2566:	1e c0       	rjmp	.+60     	; 0x25a4 <filled_box_draw+0x6e>
	uint8_t i,j,k;
	for(i=0;i<size;i++) {
		for(j=0;j<size;j++) {
			for(k=0;k<size;k++) {
				if(mode) setvoxel(x+k,y+j,z+i);
    2568:	55 20       	and	r5, r5
    256a:	31 f0       	breq	.+12     	; 0x2578 <filled_box_draw+0x42>
    256c:	ce 01       	movw	r24, r28
    256e:	b7 01       	movw	r22, r14
    2570:	a5 01       	movw	r20, r10
    2572:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    2576:	05 c0       	rjmp	.+10     	; 0x2582 <filled_box_draw+0x4c>
				else clrvoxel(x+k,y+j,z+i);
    2578:	ce 01       	movw	r24, r28
    257a:	b7 01       	movw	r22, r14
    257c:	a5 01       	movw	r20, r10
    257e:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
}
void filled_box_draw(int x,int y,int z,uint8_t size,uint8_t mode) {	//mode 0 - clear, mode 1 - fill
	uint8_t i,j,k;
	for(i=0;i<size;i++) {
		for(j=0;j<size;j++) {
			for(k=0;k<size;k++) {
    2582:	1f 5f       	subi	r17, 0xFF	; 255
    2584:	21 96       	adiw	r28, 0x01	; 1
    2586:	1c 15       	cp	r17, r12
    2588:	78 f3       	brcs	.-34     	; 0x2568 <filled_box_draw+0x32>
	}
}
void filled_box_draw(int x,int y,int z,uint8_t size,uint8_t mode) {	//mode 0 - clear, mode 1 - fill
	uint8_t i,j,k;
	for(i=0;i<size;i++) {
		for(j=0;j<size;j++) {
    258a:	0f 5f       	subi	r16, 0xFF	; 255
    258c:	0c 15       	cp	r16, r12
    258e:	48 f4       	brcc	.+18     	; 0x25a2 <filled_box_draw+0x6c>
    2590:	83 2d       	mov	r24, r3
    2592:	94 2d       	mov	r25, r4
    2594:	9c 01       	movw	r18, r24
    2596:	e9 01       	movw	r28, r18
    2598:	10 e0       	ldi	r17, 0x00	; 0
			for(k=0;k<size;k++) {
				if(mode) setvoxel(x+k,y+j,z+i);
				else clrvoxel(x+k,y+j,z+i);
    259a:	73 01       	movw	r14, r6
    259c:	e0 0e       	add	r14, r16
    259e:	f1 1c       	adc	r15, r1
    25a0:	f2 cf       	rjmp	.-28     	; 0x2586 <filled_box_draw+0x50>
		delay_ms(300);
	}
}
void filled_box_draw(int x,int y,int z,uint8_t size,uint8_t mode) {	//mode 0 - clear, mode 1 - fill
	uint8_t i,j,k;
	for(i=0;i<size;i++) {
    25a2:	d3 94       	inc	r13
    25a4:	dc 14       	cp	r13, r12
    25a6:	28 f4       	brcc	.+10     	; 0x25b2 <filled_box_draw+0x7c>
    25a8:	00 e0       	ldi	r16, 0x00	; 0
		for(j=0;j<size;j++) {
			for(k=0;k<size;k++) {
				if(mode) setvoxel(x+k,y+j,z+i);
				else clrvoxel(x+k,y+j,z+i);
    25aa:	54 01       	movw	r10, r8
    25ac:	ad 0c       	add	r10, r13
    25ae:	b1 1c       	adc	r11, r1
    25b0:	ed cf       	rjmp	.-38     	; 0x258c <filled_box_draw+0x56>
			}
		}
	}
}
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	0f 91       	pop	r16
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	df 90       	pop	r13
    25c0:	cf 90       	pop	r12
    25c2:	bf 90       	pop	r11
    25c4:	af 90       	pop	r10
    25c6:	9f 90       	pop	r9
    25c8:	8f 90       	pop	r8
    25ca:	7f 90       	pop	r7
    25cc:	6f 90       	pop	r6
    25ce:	5f 90       	pop	r5
    25d0:	4f 90       	pop	r4
    25d2:	3f 90       	pop	r3
    25d4:	08 95       	ret

000025d6 <moving_boxes>:
		a--;		
	}
}

//MOVING BOXES
void moving_boxes(int delay,int iter){
    25d6:	2f 92       	push	r2
    25d8:	3f 92       	push	r3
    25da:	4f 92       	push	r4
    25dc:	5f 92       	push	r5
    25de:	6f 92       	push	r6
    25e0:	7f 92       	push	r7
    25e2:	8f 92       	push	r8
    25e4:	9f 92       	push	r9
    25e6:	af 92       	push	r10
    25e8:	bf 92       	push	r11
    25ea:	cf 92       	push	r12
    25ec:	df 92       	push	r13
    25ee:	ef 92       	push	r14
    25f0:	ff 92       	push	r15
    25f2:	0f 93       	push	r16
    25f4:	1f 93       	push	r17
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	29 97       	sbiw	r28, 0x09	; 9
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	9d 83       	std	Y+5, r25	; 0x05
    260c:	8c 83       	std	Y+4, r24	; 0x04
    260e:	7f 83       	std	Y+7, r23	; 0x07
    2610:	6e 83       	std	Y+6, r22	; 0x06
	x1=0;	y1=0;	z1=0;
	x2=4;	y2=4;	z2=0;
	x3=0;	y3=4;	z3=4;

	s=CUBE_SIZE/2;
	fill(0x00);
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    2618:	19 86       	std	Y+9, r1	; 0x09
    261a:	18 86       	std	Y+8, r1	; 0x08
    261c:	1b 82       	std	Y+3, r1	; 0x03
    261e:	24 e0       	ldi	r18, 0x04	; 4
    2620:	2a 83       	std	Y+2, r18	; 0x02
    2622:	19 82       	std	Y+1, r1	; 0x01
    2624:	22 24       	eor	r2, r2
    2626:	54 e0       	ldi	r21, 0x04	; 4
    2628:	35 2e       	mov	r3, r21
    262a:	44 e0       	ldi	r20, 0x04	; 4
    262c:	44 2e       	mov	r4, r20
    262e:	55 24       	eor	r5, r5
    2630:	66 24       	eor	r6, r6
    2632:	34 e0       	ldi	r19, 0x04	; 4
    2634:	73 2e       	mov	r7, r19
    2636:	99 24       	eor	r9, r9
    2638:	93 94       	inc	r9
    263a:	88 24       	eor	r8, r8
    263c:	83 94       	inc	r8
    263e:	aa 24       	eor	r10, r10
    2640:	a3 94       	inc	r10
    2642:	85 c1       	rjmp	.+778    	; 0x294e <moving_boxes+0x378>

	for(i=0;i<iter+1;i++){
		if(i>0){
    2644:	88 85       	ldd	r24, Y+8	; 0x08
    2646:	99 85       	ldd	r25, Y+9	; 0x09
    2648:	18 16       	cp	r1, r24
    264a:	19 06       	cpc	r1, r25
    264c:	0c f0       	brlt	.+2      	; 0x2650 <moving_boxes+0x7a>
    264e:	e7 c0       	rjmp	.+462    	; 0x281e <moving_boxes+0x248>
			do cube=rand()%3;
    2650:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2654:	63 e0       	ldi	r22, 0x03	; 3
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    265c:	98 2e       	mov	r9, r24
			while(cc==cube);
    265e:	88 16       	cp	r8, r24
    2660:	b9 f3       	breq	.-18     	; 0x2650 <moving_boxes+0x7a>
			cc=cube;
			
			do dir=rand()%6;
    2662:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2666:	66 e0       	ldi	r22, 0x06	; 6
    2668:	70 e0       	ldi	r23, 0x00	; 0
    266a:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    266e:	e8 2e       	mov	r14, r24
			while(dd==dir);
    2670:	a8 16       	cp	r10, r24
    2672:	b9 f3       	breq	.-18     	; 0x2662 <moving_boxes+0x8c>
			dd=dir;
			
			if(cube==0){		//first cube select
    2674:	99 20       	and	r9, r9
    2676:	21 f4       	brne	.+8      	; 0x2680 <moving_boxes+0xaa>
    2678:	fb 80       	ldd	r15, Y+3	; 0x03
    267a:	02 2d       	mov	r16, r2
    267c:	15 2d       	mov	r17, r5
    267e:	0a c0       	rjmp	.+20     	; 0x2694 <moving_boxes+0xbe>
				xx=x1;
				yy=y1;
				zz=z1;
			}
			else if(cube==1){	//second cube select
    2680:	91 e0       	ldi	r25, 0x01	; 1
    2682:	99 16       	cp	r9, r25
    2684:	21 f0       	breq	.+8      	; 0x268e <moving_boxes+0xb8>
    2686:	f9 80       	ldd	r15, Y+1	; 0x01
    2688:	04 2d       	mov	r16, r4
    268a:	17 2d       	mov	r17, r7
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <moving_boxes+0xbe>
    268e:	fa 80       	ldd	r15, Y+2	; 0x02
    2690:	03 2d       	mov	r16, r3
    2692:	16 2d       	mov	r17, r6
				xx=x3;
				yy=y3;
				zz=z3;
			}
			
			if		(dir==0 && !getvoxel(xx+s+1,yy,zz) && xx<s)	d0=1;
    2694:	ee 20       	and	r14, r14
    2696:	e9 f4       	brne	.+58     	; 0x26d2 <moving_boxes+0xfc>
    2698:	8f 2d       	mov	r24, r15
    269a:	99 27       	eor	r25, r25
    269c:	87 fd       	sbrc	r24, 7
    269e:	90 95       	com	r25
    26a0:	60 2f       	mov	r22, r16
    26a2:	77 27       	eor	r23, r23
    26a4:	67 fd       	sbrc	r22, 7
    26a6:	70 95       	com	r23
    26a8:	41 2f       	mov	r20, r17
    26aa:	55 27       	eor	r21, r21
    26ac:	47 fd       	sbrc	r20, 7
    26ae:	50 95       	com	r21
    26b0:	05 96       	adiw	r24, 0x05	; 5
    26b2:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    26b6:	88 23       	and	r24, r24
    26b8:	09 f0       	breq	.+2      	; 0x26bc <moving_boxes+0xe6>
    26ba:	a9 c0       	rjmp	.+338    	; 0x280e <moving_boxes+0x238>
    26bc:	e3 e0       	ldi	r30, 0x03	; 3
    26be:	ef 15       	cp	r30, r15
    26c0:	0c f4       	brge	.+2      	; 0x26c4 <moving_boxes+0xee>
    26c2:	a5 c0       	rjmp	.+330    	; 0x280e <moving_boxes+0x238>
    26c4:	89 2c       	mov	r8, r9
    26c6:	aa 24       	eor	r10, r10
    26c8:	bb 24       	eor	r11, r11
    26ca:	b3 94       	inc	r11
    26cc:	cc 24       	eor	r12, r12
    26ce:	dd 24       	eor	r13, r13
    26d0:	aa c0       	rjmp	.+340    	; 0x2826 <moving_boxes+0x250>
			else if	(dir==1 && !getvoxel(xx,yy-1,zz) && yy>0) 	d1=1;
    26d2:	f1 e0       	ldi	r31, 0x01	; 1
    26d4:	ef 16       	cp	r14, r31
    26d6:	e9 f4       	brne	.+58     	; 0x2712 <moving_boxes+0x13c>
    26d8:	60 2f       	mov	r22, r16
    26da:	77 27       	eor	r23, r23
    26dc:	67 fd       	sbrc	r22, 7
    26de:	70 95       	com	r23
    26e0:	61 50       	subi	r22, 0x01	; 1
    26e2:	70 40       	sbci	r23, 0x00	; 0
    26e4:	41 2f       	mov	r20, r17
    26e6:	55 27       	eor	r21, r21
    26e8:	47 fd       	sbrc	r20, 7
    26ea:	50 95       	com	r21
    26ec:	8f 2d       	mov	r24, r15
    26ee:	99 27       	eor	r25, r25
    26f0:	87 fd       	sbrc	r24, 7
    26f2:	90 95       	com	r25
    26f4:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    26f8:	88 23       	and	r24, r24
    26fa:	09 f0       	breq	.+2      	; 0x26fe <moving_boxes+0x128>
    26fc:	88 c0       	rjmp	.+272    	; 0x280e <moving_boxes+0x238>
    26fe:	10 16       	cp	r1, r16
    2700:	0c f0       	brlt	.+2      	; 0x2704 <moving_boxes+0x12e>
    2702:	85 c0       	rjmp	.+266    	; 0x280e <moving_boxes+0x238>
    2704:	89 2c       	mov	r8, r9
    2706:	aa 24       	eor	r10, r10
    2708:	a3 94       	inc	r10
    270a:	bb 24       	eor	r11, r11
    270c:	cc 24       	eor	r12, r12
    270e:	c3 94       	inc	r12
    2710:	88 c0       	rjmp	.+272    	; 0x2822 <moving_boxes+0x24c>
			else if	(dir==2 && !getvoxel(xx-1,yy,zz) && xx>0) 	d2=1;
    2712:	22 e0       	ldi	r18, 0x02	; 2
    2714:	e2 16       	cp	r14, r18
    2716:	e9 f4       	brne	.+58     	; 0x2752 <moving_boxes+0x17c>
    2718:	8f 2d       	mov	r24, r15
    271a:	99 27       	eor	r25, r25
    271c:	87 fd       	sbrc	r24, 7
    271e:	90 95       	com	r25
    2720:	60 2f       	mov	r22, r16
    2722:	77 27       	eor	r23, r23
    2724:	67 fd       	sbrc	r22, 7
    2726:	70 95       	com	r23
    2728:	41 2f       	mov	r20, r17
    272a:	55 27       	eor	r21, r21
    272c:	47 fd       	sbrc	r20, 7
    272e:	50 95       	com	r21
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    2736:	88 23       	and	r24, r24
    2738:	09 f0       	breq	.+2      	; 0x273c <moving_boxes+0x166>
    273a:	69 c0       	rjmp	.+210    	; 0x280e <moving_boxes+0x238>
    273c:	1f 14       	cp	r1, r15
    273e:	0c f0       	brlt	.+2      	; 0x2742 <moving_boxes+0x16c>
    2740:	66 c0       	rjmp	.+204    	; 0x280e <moving_boxes+0x238>
    2742:	89 2c       	mov	r8, r9
    2744:	22 e0       	ldi	r18, 0x02	; 2
    2746:	a2 2e       	mov	r10, r18
    2748:	bb 24       	eor	r11, r11
    274a:	cc 24       	eor	r12, r12
    274c:	dd 24       	eor	r13, r13
    274e:	d3 94       	inc	r13
    2750:	69 c0       	rjmp	.+210    	; 0x2824 <moving_boxes+0x24e>
			else if	(dir==3 && !getvoxel(xx,yy+s+1,zz) && yy<s) 	d3=1;
    2752:	33 e0       	ldi	r19, 0x03	; 3
    2754:	e3 16       	cp	r14, r19
    2756:	f9 f4       	brne	.+62     	; 0x2796 <moving_boxes+0x1c0>
    2758:	60 2f       	mov	r22, r16
    275a:	77 27       	eor	r23, r23
    275c:	67 fd       	sbrc	r22, 7
    275e:	70 95       	com	r23
    2760:	6b 5f       	subi	r22, 0xFB	; 251
    2762:	7f 4f       	sbci	r23, 0xFF	; 255
    2764:	41 2f       	mov	r20, r17
    2766:	55 27       	eor	r21, r21
    2768:	47 fd       	sbrc	r20, 7
    276a:	50 95       	com	r21
    276c:	8f 2d       	mov	r24, r15
    276e:	99 27       	eor	r25, r25
    2770:	87 fd       	sbrc	r24, 7
    2772:	90 95       	com	r25
    2774:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    2778:	88 23       	and	r24, r24
    277a:	09 f0       	breq	.+2      	; 0x277e <moving_boxes+0x1a8>
    277c:	48 c0       	rjmp	.+144    	; 0x280e <moving_boxes+0x238>
    277e:	04 30       	cpi	r16, 0x04	; 4
    2780:	0c f0       	brlt	.+2      	; 0x2784 <moving_boxes+0x1ae>
    2782:	45 c0       	rjmp	.+138    	; 0x280e <moving_boxes+0x238>
    2784:	89 2c       	mov	r8, r9
    2786:	93 e0       	ldi	r25, 0x03	; 3
    2788:	a9 2e       	mov	r10, r25
    278a:	bb 24       	eor	r11, r11
    278c:	cc 24       	eor	r12, r12
    278e:	dd 24       	eor	r13, r13
    2790:	ee 24       	eor	r14, r14
    2792:	e3 94       	inc	r14
    2794:	48 c0       	rjmp	.+144    	; 0x2826 <moving_boxes+0x250>
			else if	(dir==4 && !getvoxel(xx,yy,zz-1) && zz>0) 	d4=1;
    2796:	84 e0       	ldi	r24, 0x04	; 4
    2798:	e8 16       	cp	r14, r24
    279a:	f1 f4       	brne	.+60     	; 0x27d8 <moving_boxes+0x202>
    279c:	60 2f       	mov	r22, r16
    279e:	77 27       	eor	r23, r23
    27a0:	67 fd       	sbrc	r22, 7
    27a2:	70 95       	com	r23
    27a4:	41 2f       	mov	r20, r17
    27a6:	55 27       	eor	r21, r21
    27a8:	47 fd       	sbrc	r20, 7
    27aa:	50 95       	com	r21
    27ac:	41 50       	subi	r20, 0x01	; 1
    27ae:	50 40       	sbci	r21, 0x00	; 0
    27b0:	8f 2d       	mov	r24, r15
    27b2:	99 27       	eor	r25, r25
    27b4:	87 fd       	sbrc	r24, 7
    27b6:	90 95       	com	r25
    27b8:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    27bc:	88 23       	and	r24, r24
    27be:	39 f5       	brne	.+78     	; 0x280e <moving_boxes+0x238>
    27c0:	11 16       	cp	r1, r17
    27c2:	2c f5       	brge	.+74     	; 0x280e <moving_boxes+0x238>
    27c4:	89 2c       	mov	r8, r9
    27c6:	84 e0       	ldi	r24, 0x04	; 4
    27c8:	a8 2e       	mov	r10, r24
    27ca:	bb 24       	eor	r11, r11
    27cc:	cc 24       	eor	r12, r12
    27ce:	dd 24       	eor	r13, r13
    27d0:	ee 24       	eor	r14, r14
    27d2:	ff 24       	eor	r15, r15
    27d4:	f3 94       	inc	r15
    27d6:	28 c0       	rjmp	.+80     	; 0x2828 <moving_boxes+0x252>
			else if	(dir==5 && !getvoxel(xx,yy,zz+s+1) && zz<s) 	d5=1;
    27d8:	95 e0       	ldi	r25, 0x05	; 5
    27da:	e9 16       	cp	r14, r25
    27dc:	c1 f4       	brne	.+48     	; 0x280e <moving_boxes+0x238>
    27de:	60 2f       	mov	r22, r16
    27e0:	77 27       	eor	r23, r23
    27e2:	67 fd       	sbrc	r22, 7
    27e4:	70 95       	com	r23
    27e6:	41 2f       	mov	r20, r17
    27e8:	55 27       	eor	r21, r21
    27ea:	47 fd       	sbrc	r20, 7
    27ec:	50 95       	com	r21
    27ee:	4b 5f       	subi	r20, 0xFB	; 251
    27f0:	5f 4f       	sbci	r21, 0xFF	; 255
    27f2:	8f 2d       	mov	r24, r15
    27f4:	99 27       	eor	r25, r25
    27f6:	87 fd       	sbrc	r24, 7
    27f8:	90 95       	com	r25
    27fa:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    27fe:	88 23       	and	r24, r24
    2800:	31 f4       	brne	.+12     	; 0x280e <moving_boxes+0x238>
    2802:	14 30       	cpi	r17, 0x04	; 4
    2804:	24 f4       	brge	.+8      	; 0x280e <moving_boxes+0x238>
    2806:	89 2c       	mov	r8, r9
    2808:	05 e0       	ldi	r16, 0x05	; 5
    280a:	a0 2e       	mov	r10, r16
    280c:	08 c0       	rjmp	.+16     	; 0x281e <moving_boxes+0x248>
			else {
				i--;
    280e:	e8 85       	ldd	r30, Y+8	; 0x08
    2810:	f9 85       	ldd	r31, Y+9	; 0x09
    2812:	31 97       	sbiw	r30, 0x01	; 1
    2814:	f9 87       	std	Y+9, r31	; 0x09
    2816:	e8 87       	std	Y+8, r30	; 0x08
    2818:	89 2c       	mov	r8, r9
    281a:	ae 2c       	mov	r10, r14
    281c:	93 c0       	rjmp	.+294    	; 0x2944 <moving_boxes+0x36e>
				continue;
    281e:	bb 24       	eor	r11, r11
    2820:	cc 24       	eor	r12, r12
    2822:	dd 24       	eor	r13, r13
    2824:	ee 24       	eor	r14, r14
    2826:	ff 24       	eor	r15, r15
    2828:	13 e0       	ldi	r17, 0x03	; 3
    282a:	84 e0       	ldi	r24, 0x04	; 4
    282c:	81 1b       	sub	r24, r17
			}
		}
		
		for(j=1;j<=s;j++){
			if(i>0){
    282e:	28 85       	ldd	r18, Y+8	; 0x08
    2830:	39 85       	ldd	r19, Y+9	; 0x09
    2832:	12 16       	cp	r1, r18
    2834:	13 06       	cpc	r1, r19
    2836:	0c f0       	brlt	.+2      	; 0x283a <moving_boxes+0x264>
    2838:	46 c0       	rjmp	.+140    	; 0x28c6 <moving_boxes+0x2f0>
				if(cube==0){
    283a:	99 20       	and	r9, r9
    283c:	b1 f4       	brne	.+44     	; 0x286a <moving_boxes+0x294>
					if		(d0) x1=j;
    283e:	bb 20       	and	r11, r11
    2840:	11 f0       	breq	.+4      	; 0x2846 <moving_boxes+0x270>
    2842:	8b 83       	std	Y+3, r24	; 0x03
    2844:	40 c0       	rjmp	.+128    	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d1) y1=s-j;
    2846:	cc 20       	and	r12, r12
    2848:	11 f0       	breq	.+4      	; 0x284e <moving_boxes+0x278>
    284a:	21 2e       	mov	r2, r17
    284c:	3c c0       	rjmp	.+120    	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d2) x1=s-j;
    284e:	dd 20       	and	r13, r13
    2850:	11 f0       	breq	.+4      	; 0x2856 <moving_boxes+0x280>
    2852:	1b 83       	std	Y+3, r17	; 0x03
    2854:	38 c0       	rjmp	.+112    	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d3) y1=j;
    2856:	ee 20       	and	r14, r14
    2858:	11 f0       	breq	.+4      	; 0x285e <moving_boxes+0x288>
    285a:	28 2e       	mov	r2, r24
    285c:	34 c0       	rjmp	.+104    	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d4) z1=s-j;
    285e:	ff 20       	and	r15, r15
    2860:	11 f4       	brne	.+4      	; 0x2866 <moving_boxes+0x290>
    2862:	58 2e       	mov	r5, r24
    2864:	30 c0       	rjmp	.+96     	; 0x28c6 <moving_boxes+0x2f0>
    2866:	51 2e       	mov	r5, r17
    2868:	2e c0       	rjmp	.+92     	; 0x28c6 <moving_boxes+0x2f0>
					else		 z1=j;					
				}
				else if(cube==1){
    286a:	31 e0       	ldi	r19, 0x01	; 1
    286c:	93 16       	cp	r9, r19
    286e:	b1 f4       	brne	.+44     	; 0x289c <moving_boxes+0x2c6>
					if		(d0) x2=j;
    2870:	bb 20       	and	r11, r11
    2872:	11 f0       	breq	.+4      	; 0x2878 <moving_boxes+0x2a2>
    2874:	8a 83       	std	Y+2, r24	; 0x02
    2876:	27 c0       	rjmp	.+78     	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d1) y2=s-j;
    2878:	cc 20       	and	r12, r12
    287a:	11 f0       	breq	.+4      	; 0x2880 <moving_boxes+0x2aa>
    287c:	31 2e       	mov	r3, r17
    287e:	23 c0       	rjmp	.+70     	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d2) x2=s-j;
    2880:	dd 20       	and	r13, r13
    2882:	11 f0       	breq	.+4      	; 0x2888 <moving_boxes+0x2b2>
    2884:	1a 83       	std	Y+2, r17	; 0x02
    2886:	1f c0       	rjmp	.+62     	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d3) y2=j;
    2888:	ee 20       	and	r14, r14
    288a:	11 f0       	breq	.+4      	; 0x2890 <moving_boxes+0x2ba>
    288c:	38 2e       	mov	r3, r24
    288e:	1b c0       	rjmp	.+54     	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d4) z2=s-j;
    2890:	ff 20       	and	r15, r15
    2892:	11 f4       	brne	.+4      	; 0x2898 <moving_boxes+0x2c2>
    2894:	68 2e       	mov	r6, r24
    2896:	17 c0       	rjmp	.+46     	; 0x28c6 <moving_boxes+0x2f0>
    2898:	61 2e       	mov	r6, r17
    289a:	15 c0       	rjmp	.+42     	; 0x28c6 <moving_boxes+0x2f0>
					else 		 z2=j;
				}
				else{
					if		(d0) x3=j;
    289c:	bb 20       	and	r11, r11
    289e:	11 f0       	breq	.+4      	; 0x28a4 <moving_boxes+0x2ce>
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	11 c0       	rjmp	.+34     	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d1) y3=s-j;
    28a4:	cc 20       	and	r12, r12
    28a6:	11 f0       	breq	.+4      	; 0x28ac <moving_boxes+0x2d6>
    28a8:	41 2e       	mov	r4, r17
    28aa:	0d c0       	rjmp	.+26     	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d2) x3=s-j;
    28ac:	dd 20       	and	r13, r13
    28ae:	11 f0       	breq	.+4      	; 0x28b4 <moving_boxes+0x2de>
    28b0:	19 83       	std	Y+1, r17	; 0x01
    28b2:	09 c0       	rjmp	.+18     	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d3) y3=j;
    28b4:	ee 20       	and	r14, r14
    28b6:	11 f0       	breq	.+4      	; 0x28bc <moving_boxes+0x2e6>
    28b8:	48 2e       	mov	r4, r24
    28ba:	05 c0       	rjmp	.+10     	; 0x28c6 <moving_boxes+0x2f0>
					else if	(d4) z3=s-j;
    28bc:	ff 20       	and	r15, r15
    28be:	11 f4       	brne	.+4      	; 0x28c4 <moving_boxes+0x2ee>
    28c0:	78 2e       	mov	r7, r24
    28c2:	01 c0       	rjmp	.+2      	; 0x28c6 <moving_boxes+0x2f0>
    28c4:	71 2e       	mov	r7, r17
					else 		 z3=j;
				}
			}		
			fill(0x00);
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
			filled_box_draw(x1,y1,z1,s,1);
    28cc:	62 2d       	mov	r22, r2
    28ce:	77 27       	eor	r23, r23
    28d0:	67 fd       	sbrc	r22, 7
    28d2:	70 95       	com	r23
    28d4:	45 2d       	mov	r20, r5
    28d6:	55 27       	eor	r21, r21
    28d8:	47 fd       	sbrc	r20, 7
    28da:	50 95       	com	r21
    28dc:	eb 81       	ldd	r30, Y+3	; 0x03
    28de:	8e 2f       	mov	r24, r30
    28e0:	99 27       	eor	r25, r25
    28e2:	87 fd       	sbrc	r24, 7
    28e4:	90 95       	com	r25
    28e6:	24 e0       	ldi	r18, 0x04	; 4
    28e8:	01 e0       	ldi	r16, 0x01	; 1
    28ea:	0e 94 9b 12 	call	0x2536	; 0x2536 <filled_box_draw>
			filled_box_draw(x2,y2,z2,s,1);
    28ee:	63 2d       	mov	r22, r3
    28f0:	77 27       	eor	r23, r23
    28f2:	67 fd       	sbrc	r22, 7
    28f4:	70 95       	com	r23
    28f6:	46 2d       	mov	r20, r6
    28f8:	55 27       	eor	r21, r21
    28fa:	47 fd       	sbrc	r20, 7
    28fc:	50 95       	com	r21
    28fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2900:	8f 2f       	mov	r24, r31
    2902:	99 27       	eor	r25, r25
    2904:	87 fd       	sbrc	r24, 7
    2906:	90 95       	com	r25
    2908:	24 e0       	ldi	r18, 0x04	; 4
    290a:	0e 94 9b 12 	call	0x2536	; 0x2536 <filled_box_draw>
			filled_box_draw(x3,y3,z3,s,1);
    290e:	64 2d       	mov	r22, r4
    2910:	77 27       	eor	r23, r23
    2912:	67 fd       	sbrc	r22, 7
    2914:	70 95       	com	r23
    2916:	47 2d       	mov	r20, r7
    2918:	55 27       	eor	r21, r21
    291a:	47 fd       	sbrc	r20, 7
    291c:	50 95       	com	r21
    291e:	29 81       	ldd	r18, Y+1	; 0x01
    2920:	82 2f       	mov	r24, r18
    2922:	99 27       	eor	r25, r25
    2924:	87 fd       	sbrc	r24, 7
    2926:	90 95       	com	r25
    2928:	24 e0       	ldi	r18, 0x04	; 4
    292a:	0e 94 9b 12 	call	0x2536	; 0x2536 <filled_box_draw>
			delay_ms(delay);
    292e:	8c 81       	ldd	r24, Y+4	; 0x04
    2930:	9d 81       	ldd	r25, Y+5	; 0x05
    2932:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    2936:	11 50       	subi	r17, 0x01	; 1
    2938:	08 f0       	brcs	.+2      	; 0x293c <moving_boxes+0x366>
    293a:	77 cf       	rjmp	.-274    	; 0x282a <moving_boxes+0x254>
		}
		d0=d1=d2=d3=d4=d5=0;
		delay_ms(300);
    293c:	8c e2       	ldi	r24, 0x2C	; 44
    293e:	91 e0       	ldi	r25, 0x01	; 1
    2940:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
	x3=0;	y3=4;	z3=4;

	s=CUBE_SIZE/2;
	fill(0x00);

	for(i=0;i<iter+1;i++){
    2944:	88 85       	ldd	r24, Y+8	; 0x08
    2946:	99 85       	ldd	r25, Y+9	; 0x09
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	99 87       	std	Y+9, r25	; 0x09
    294c:	88 87       	std	Y+8, r24	; 0x08
    294e:	ee 81       	ldd	r30, Y+6	; 0x06
    2950:	ff 81       	ldd	r31, Y+7	; 0x07
    2952:	28 85       	ldd	r18, Y+8	; 0x08
    2954:	39 85       	ldd	r19, Y+9	; 0x09
    2956:	e2 17       	cp	r30, r18
    2958:	f3 07       	cpc	r31, r19
    295a:	0c f0       	brlt	.+2      	; 0x295e <moving_boxes+0x388>
    295c:	73 ce       	rjmp	.-794    	; 0x2644 <moving_boxes+0x6e>
			delay_ms(delay);
		}
		d0=d1=d2=d3=d4=d5=0;
		delay_ms(300);
	}
}
    295e:	29 96       	adiw	r28, 0x09	; 9
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	1f 91       	pop	r17
    2970:	0f 91       	pop	r16
    2972:	ff 90       	pop	r15
    2974:	ef 90       	pop	r14
    2976:	df 90       	pop	r13
    2978:	cf 90       	pop	r12
    297a:	bf 90       	pop	r11
    297c:	af 90       	pop	r10
    297e:	9f 90       	pop	r9
    2980:	8f 90       	pop	r8
    2982:	7f 90       	pop	r7
    2984:	6f 90       	pop	r6
    2986:	5f 90       	pop	r5
    2988:	4f 90       	pop	r4
    298a:	3f 90       	pop	r3
    298c:	2f 90       	pop	r2
    298e:	08 95       	ret

00002990 <border_box>:
		}
	}
}

//BORDER BOX
void border_box(int delay, int iterations) {
    2990:	8f 92       	push	r8
    2992:	9f 92       	push	r9
    2994:	af 92       	push	r10
    2996:	bf 92       	push	r11
    2998:	cf 92       	push	r12
    299a:	df 92       	push	r13
    299c:	ef 92       	push	r14
    299e:	ff 92       	push	r15
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	4c 01       	movw	r8, r24
	uint8_t i,j,t,a,s,round;
	t = CUBE_SIZE-1;
	a = iterations*4;
    29aa:	a6 2e       	mov	r10, r22
    29ac:	aa 0c       	add	r10, r10
    29ae:	aa 0c       	add	r10, r10
    29b0:	cc 24       	eor	r12, r12
    29b2:	c3 94       	inc	r12
    29b4:	bb 24       	eor	r11, r11
    29b6:	b3 94       	inc	r11
    29b8:	7a c1       	rjmp	.+756    	; 0x2cae <border_box+0x31e>
	round = 1;	//1-fill style 1; 2- remove style 1; 3- fill style 2; 4- remove style 2;
	
	while (a>0) {
		for (i=0;i<3;i++) {
			for (j=0;j<=t;j++) {
				if(i==0) {
    29ba:	dd 20       	and	r13, r13
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <border_box+0x30>
    29be:	52 c0       	rjmp	.+164    	; 0x2a64 <border_box+0xd4>
					if (s) {
    29c0:	cc 20       	and	r12, r12
    29c2:	41 f1       	breq	.+80     	; 0x2a14 <border_box+0x84>
						if(round%4 == 1) {
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	e8 16       	cp	r14, r24
    29c8:	f1 04       	cpc	r15, r1
    29ca:	89 f4       	brne	.+34     	; 0x29ee <border_box+0x5e>
							setvoxel(j,0,0);	//x
    29cc:	ce 01       	movw	r24, r28
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	40 e0       	ldi	r20, 0x00	; 0
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(0,j,0);	//y
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	be 01       	movw	r22, r28
    29e0:	40 e0       	ldi	r20, 0x00	; 0
    29e2:	50 e0       	ldi	r21, 0x00	; 0
    29e4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(0,0,j);	//z
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	6b c0       	rjmp	.+214    	; 0x2ac4 <border_box+0x134>
						}
						else {
							setvoxel(t-j,t,t);	//x
    29ee:	c8 01       	movw	r24, r16
    29f0:	67 e0       	ldi	r22, 0x07	; 7
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	47 e0       	ldi	r20, 0x07	; 7
    29f6:	50 e0       	ldi	r21, 0x00	; 0
    29f8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(t,t-j,t);	//y
    29fc:	87 e0       	ldi	r24, 0x07	; 7
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	b8 01       	movw	r22, r16
    2a02:	47 e0       	ldi	r20, 0x07	; 7
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(t,t,t-j);	//z
    2a0a:	87 e0       	ldi	r24, 0x07	; 7
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	67 e0       	ldi	r22, 0x07	; 7
    2a10:	70 e0       	ldi	r23, 0x00	; 0
    2a12:	82 c0       	rjmp	.+260    	; 0x2b18 <border_box+0x188>
						}
					}
					else {
						if(round%4 == 2) {
    2a14:	82 e0       	ldi	r24, 0x02	; 2
    2a16:	e8 16       	cp	r14, r24
    2a18:	f1 04       	cpc	r15, r1
    2a1a:	89 f4       	brne	.+34     	; 0x2a3e <border_box+0xae>
							clrvoxel(j,t,t);	//x
    2a1c:	ce 01       	movw	r24, r28
    2a1e:	67 e0       	ldi	r22, 0x07	; 7
    2a20:	70 e0       	ldi	r23, 0x00	; 0
    2a22:	47 e0       	ldi	r20, 0x07	; 7
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(0,t-j,t);	//y
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	b8 01       	movw	r22, r16
    2a30:	47 e0       	ldi	r20, 0x07	; 7
    2a32:	50 e0       	ldi	r21, 0x00	; 0
    2a34:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(0,t,t-j);	//z
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9a c0       	rjmp	.+308    	; 0x2b72 <border_box+0x1e2>
						}
						else {
							clrvoxel(t-j,0,0);	//x
    2a3e:	c8 01       	movw	r24, r16
    2a40:	60 e0       	ldi	r22, 0x00	; 0
    2a42:	70 e0       	ldi	r23, 0x00	; 0
    2a44:	40 e0       	ldi	r20, 0x00	; 0
    2a46:	50 e0       	ldi	r21, 0x00	; 0
    2a48:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(t,j,0);	//y
    2a4c:	87 e0       	ldi	r24, 0x07	; 7
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	be 01       	movw	r22, r28
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	50 e0       	ldi	r21, 0x00	; 0
    2a56:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(t,0,j);	//z
    2a5a:	87 e0       	ldi	r24, 0x07	; 7
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	60 e0       	ldi	r22, 0x00	; 0
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	05 c1       	rjmp	.+522    	; 0x2c6e <border_box+0x2de>
						}
					}
				}
				else if(i==1) {
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	d8 16       	cp	r13, r24
    2a68:	09 f0       	breq	.+2      	; 0x2a6c <border_box+0xdc>
    2a6a:	ac c0       	rjmp	.+344    	; 0x2bc4 <border_box+0x234>
					if (s) {
    2a6c:	cc 20       	and	r12, r12
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <border_box+0xe2>
    2a70:	57 c0       	rjmp	.+174    	; 0x2b20 <border_box+0x190>
						if(round%4 == 1) {
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	e8 16       	cp	r14, r24
    2a76:	f1 04       	cpc	r15, r1
    2a78:	41 f5       	brne	.+80     	; 0x2aca <border_box+0x13a>
							setvoxel(j,t,0);	//x
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	67 e0       	ldi	r22, 0x07	; 7
    2a7e:	70 e0       	ldi	r23, 0x00	; 0
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	50 e0       	ldi	r21, 0x00	; 0
    2a84:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(j,0,t);	//x
    2a88:	ce 01       	movw	r24, r28
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	70 e0       	ldi	r23, 0x00	; 0
    2a8e:	47 e0       	ldi	r20, 0x07	; 7
    2a90:	50 e0       	ldi	r21, 0x00	; 0
    2a92:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
						
							setvoxel(t,j,0);	//y
    2a96:	87 e0       	ldi	r24, 0x07	; 7
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	be 01       	movw	r22, r28
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(0,j,t);	//y
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	be 01       	movw	r22, r28
    2aaa:	47 e0       	ldi	r20, 0x07	; 7
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
						
							setvoxel(0,t,j);	//z
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	67 e0       	ldi	r22, 0x07	; 7
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	ae 01       	movw	r20, r28
    2abc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(t,0,j);	//z
    2ac0:	87 e0       	ldi	r24, 0x07	; 7
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	95 c0       	rjmp	.+298    	; 0x2bf4 <border_box+0x264>
						}
						else {
							setvoxel(t-j,t,0);	//x
    2aca:	c8 01       	movw	r24, r16
    2acc:	67 e0       	ldi	r22, 0x07	; 7
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	40 e0       	ldi	r20, 0x00	; 0
    2ad2:	50 e0       	ldi	r21, 0x00	; 0
    2ad4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(t-j,0,t);	//x
    2ad8:	c8 01       	movw	r24, r16
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	47 e0       	ldi	r20, 0x07	; 7
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
						
							setvoxel(t,t-j,0);	//y
    2ae6:	87 e0       	ldi	r24, 0x07	; 7
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	b8 01       	movw	r22, r16
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(0,t-j,t);	//y
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	b8 01       	movw	r22, r16
    2afa:	47 e0       	ldi	r20, 0x07	; 7
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
						
							setvoxel(0,t,t-j);	//z
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	67 e0       	ldi	r22, 0x07	; 7
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	a8 01       	movw	r20, r16
    2b0c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(t,0,t-j);	//z
    2b10:	87 e0       	ldi	r24, 0x07	; 7
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	a8 01       	movw	r20, r16
    2b1a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    2b1e:	aa c0       	rjmp	.+340    	; 0x2c74 <border_box+0x2e4>
						}
					}
					else {
						if(round%4 == 2) {
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	e8 16       	cp	r14, r24
    2b24:	f1 04       	cpc	r15, r1
    2b26:	41 f5       	brne	.+80     	; 0x2b78 <border_box+0x1e8>
							clrvoxel(j,t,0);	//x
    2b28:	ce 01       	movw	r24, r28
    2b2a:	67 e0       	ldi	r22, 0x07	; 7
    2b2c:	70 e0       	ldi	r23, 0x00	; 0
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(j,0,t);	//x
    2b36:	ce 01       	movw	r24, r28
    2b38:	60 e0       	ldi	r22, 0x00	; 0
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	47 e0       	ldi	r20, 0x07	; 7
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							
							clrvoxel(0,t-j,0);	//y
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	b8 01       	movw	r22, r16
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(t,t-j,t);	//y
    2b52:	87 e0       	ldi	r24, 0x07	; 7
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	b8 01       	movw	r22, r16
    2b58:	47 e0       	ldi	r20, 0x07	; 7
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							
							clrvoxel(0,0,t-j);	//z
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	70 e0       	ldi	r23, 0x00	; 0
    2b68:	a8 01       	movw	r20, r16
    2b6a:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(t,t,t-j);	//z
    2b6e:	87 e0       	ldi	r24, 0x07	; 7
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	67 e0       	ldi	r22, 0x07	; 7
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	67 c0       	rjmp	.+206    	; 0x2c46 <border_box+0x2b6>
						}
						else {
							clrvoxel(t-j,t,0);	//x
    2b78:	c8 01       	movw	r24, r16
    2b7a:	67 e0       	ldi	r22, 0x07	; 7
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(t-j,0,t);	//x
    2b86:	c8 01       	movw	r24, r16
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	70 e0       	ldi	r23, 0x00	; 0
    2b8c:	47 e0       	ldi	r20, 0x07	; 7
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							
							clrvoxel(0,j,0);	//y
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	be 01       	movw	r22, r28
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(t,j,t);	//y
    2ba2:	87 e0       	ldi	r24, 0x07	; 7
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	be 01       	movw	r22, r28
    2ba8:	47 e0       	ldi	r20, 0x07	; 7
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							
							clrvoxel(0,0,j);	//z
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	60 e0       	ldi	r22, 0x00	; 0
    2bb6:	70 e0       	ldi	r23, 0x00	; 0
    2bb8:	ae 01       	movw	r20, r28
    2bba:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(t,t,j);	//z
    2bbe:	87 e0       	ldi	r24, 0x07	; 7
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	53 c0       	rjmp	.+166    	; 0x2c6a <border_box+0x2da>
						}
					}
				}
				else if(i==2) {
					if (s) {
    2bc4:	cc 20       	and	r12, r12
    2bc6:	49 f1       	breq	.+82     	; 0x2c1a <border_box+0x28a>
						if(round%4 == 1) {
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	e8 16       	cp	r14, r24
    2bcc:	f1 04       	cpc	r15, r1
    2bce:	a1 f4       	brne	.+40     	; 0x2bf8 <border_box+0x268>
							setvoxel(j,t,t);	//x
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	67 e0       	ldi	r22, 0x07	; 7
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	47 e0       	ldi	r20, 0x07	; 7
    2bd8:	50 e0       	ldi	r21, 0x00	; 0
    2bda:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(t,j,t);	//y
    2bde:	87 e0       	ldi	r24, 0x07	; 7
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	be 01       	movw	r22, r28
    2be4:	47 e0       	ldi	r20, 0x07	; 7
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(t,t,j);	//z
    2bec:	87 e0       	ldi	r24, 0x07	; 7
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	67 e0       	ldi	r22, 0x07	; 7
    2bf2:	70 e0       	ldi	r23, 0x00	; 0
    2bf4:	ae 01       	movw	r20, r28
    2bf6:	91 cf       	rjmp	.-222    	; 0x2b1a <border_box+0x18a>
						}
						else {
							setvoxel(t-j,0,0);	//x
    2bf8:	c8 01       	movw	r24, r16
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	50 e0       	ldi	r21, 0x00	; 0
    2c02:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(0,t-j,0);	//y
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	b8 01       	movw	r22, r16
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
							setvoxel(0,0,t-j);	//z
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	7d cf       	rjmp	.-262    	; 0x2b14 <border_box+0x184>
						}
					}
					else {
						if(round%4 == 2) {
    2c1a:	82 e0       	ldi	r24, 0x02	; 2
    2c1c:	e8 16       	cp	r14, r24
    2c1e:	f1 04       	cpc	r15, r1
    2c20:	a1 f4       	brne	.+40     	; 0x2c4a <border_box+0x2ba>
							clrvoxel(j,0,0);	//x
    2c22:	ce 01       	movw	r24, r28
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	50 e0       	ldi	r21, 0x00	; 0
    2c2c:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(t,t-j,0);	//y
    2c30:	87 e0       	ldi	r24, 0x07	; 7
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	b8 01       	movw	r22, r16
    2c36:	40 e0       	ldi	r20, 0x00	; 0
    2c38:	50 e0       	ldi	r21, 0x00	; 0
    2c3a:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(t,0,t-j);	//z
    2c3e:	87 e0       	ldi	r24, 0x07	; 7
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	60 e0       	ldi	r22, 0x00	; 0
    2c44:	70 e0       	ldi	r23, 0x00	; 0
    2c46:	a8 01       	movw	r20, r16
    2c48:	13 c0       	rjmp	.+38     	; 0x2c70 <border_box+0x2e0>
						}
						else {
							clrvoxel(t-j,t,t);	//x
    2c4a:	c8 01       	movw	r24, r16
    2c4c:	67 e0       	ldi	r22, 0x07	; 7
    2c4e:	70 e0       	ldi	r23, 0x00	; 0
    2c50:	47 e0       	ldi	r20, 0x07	; 7
    2c52:	50 e0       	ldi	r21, 0x00	; 0
    2c54:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(0,j,t);	//y
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	be 01       	movw	r22, r28
    2c5e:	47 e0       	ldi	r20, 0x07	; 7
    2c60:	50 e0       	ldi	r21, 0x00	; 0
    2c62:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
							clrvoxel(0,t,j);	//z
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	67 e0       	ldi	r22, 0x07	; 7
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	ae 01       	movw	r20, r28
    2c70:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
						}
					}
				}			
				delay_ms(delay);
    2c74:	c4 01       	movw	r24, r8
    2c76:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    2c7a:	21 96       	adiw	r28, 0x01	; 1
    2c7c:	01 50       	subi	r16, 0x01	; 1
    2c7e:	10 40       	sbci	r17, 0x00	; 0
	s = 1;	//1 - fill, 0 - remove
	round = 1;	//1-fill style 1; 2- remove style 1; 3- fill style 2; 4- remove style 2;
	
	while (a>0) {
		for (i=0;i<3;i++) {
			for (j=0;j<=t;j++) {
    2c80:	c8 30       	cpi	r28, 0x08	; 8
    2c82:	d1 05       	cpc	r29, r1
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <border_box+0x2f8>
    2c86:	99 ce       	rjmp	.-718    	; 0x29ba <border_box+0x2a>
						}
					}
				}			
				delay_ms(delay);
			}
			if (i==2) {		//last iteration
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	d8 16       	cp	r13, r24
    2c8c:	29 f4       	brne	.+10     	; 0x2c98 <border_box+0x308>
				s = s ? 0 : 1;
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	cc 20       	and	r12, r12
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <border_box+0x306>
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	c8 2e       	mov	r12, r24
	a = iterations*4;
	s = 1;	//1 - fill, 0 - remove
	round = 1;	//1-fill style 1; 2- remove style 1; 3- fill style 2; 4- remove style 2;
	
	while (a>0) {
		for (i=0;i<3;i++) {
    2c98:	d3 94       	inc	r13
    2c9a:	83 e0       	ldi	r24, 0x03	; 3
    2c9c:	d8 16       	cp	r13, r24
    2c9e:	29 f0       	breq	.+10     	; 0x2caa <border_box+0x31a>
    2ca0:	c0 e0       	ldi	r28, 0x00	; 0
    2ca2:	d0 e0       	ldi	r29, 0x00	; 0
    2ca4:	07 e0       	ldi	r16, 0x07	; 7
    2ca6:	10 e0       	ldi	r17, 0x00	; 0
    2ca8:	88 ce       	rjmp	.-752    	; 0x29ba <border_box+0x2a>
			}
			if (i==2) {		//last iteration
				s = s ? 0 : 1;
			}
		}
		round++;
    2caa:	b3 94       	inc	r11
		a--;		
    2cac:	aa 94       	dec	r10
	t = CUBE_SIZE-1;
	a = iterations*4;
	s = 1;	//1 - fill, 0 - remove
	round = 1;	//1-fill style 1; 2- remove style 1; 3- fill style 2; 4- remove style 2;
	
	while (a>0) {
    2cae:	aa 20       	and	r10, r10
    2cb0:	39 f0       	breq	.+14     	; 0x2cc0 <border_box+0x330>
    2cb2:	dd 24       	eor	r13, r13
    2cb4:	eb 2c       	mov	r14, r11
    2cb6:	ff 24       	eor	r15, r15
							setvoxel(0,t-j,0);	//y
							setvoxel(0,0,t-j);	//z
						}
					}
					else {
						if(round%4 == 2) {
    2cb8:	83 e0       	ldi	r24, 0x03	; 3
    2cba:	e8 22       	and	r14, r24
    2cbc:	ff 24       	eor	r15, r15
    2cbe:	f0 cf       	rjmp	.-32     	; 0x2ca0 <border_box+0x310>
			}
		}
		round++;
		a--;		
	}
}
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
    2cc8:	ff 90       	pop	r15
    2cca:	ef 90       	pop	r14
    2ccc:	df 90       	pop	r13
    2cce:	cf 90       	pop	r12
    2cd0:	bf 90       	pop	r11
    2cd2:	af 90       	pop	r10
    2cd4:	9f 90       	pop	r9
    2cd6:	8f 90       	pop	r8
    2cd8:	08 95       	ret

00002cda <sendvoxel_z>:
	}

}
// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay){
    2cda:	7f 92       	push	r7
    2cdc:	8f 92       	push	r8
    2cde:	9f 92       	push	r9
    2ce0:	af 92       	push	r10
    2ce2:	bf 92       	push	r11
    2ce4:	cf 92       	push	r12
    2ce6:	df 92       	push	r13
    2ce8:	ef 92       	push	r14
    2cea:	ff 92       	push	r15
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	e8 2e       	mov	r14, r24
    2cf6:	f6 2e       	mov	r15, r22
    2cf8:	74 2e       	mov	r7, r20
    2cfa:	69 01       	movw	r12, r18
    2cfc:	c0 e0       	ldi	r28, 0x00	; 0
    2cfe:	d0 e0       	ldi	r29, 0x00	; 0
    2d00:	77 e0       	ldi	r23, 0x07	; 7
    2d02:	87 2e       	mov	r8, r23
    2d04:	91 2c       	mov	r9, r1
	int i, ii;
	for (i=0; i<8; i++){
		if (z == 7){
			ii = 7-i;
			clrvoxel(x,y,ii+1);
    2d06:	68 e0       	ldi	r22, 0x08	; 8
    2d08:	a6 2e       	mov	r10, r22
    2d0a:	b1 2c       	mov	r11, r1
// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay){
	int i, ii;
	for (i=0; i<8; i++){
		if (z == 7){
    2d0c:	87 e0       	ldi	r24, 0x07	; 7
    2d0e:	78 16       	cp	r7, r24
    2d10:	69 f4       	brne	.+26     	; 0x2d2c <sendvoxel_z+0x52>
	}

}
// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay){
    2d12:	84 01       	movw	r16, r8
    2d14:	0c 1b       	sub	r16, r28
    2d16:	1d 0b       	sbc	r17, r29
	int i, ii;
	for (i=0; i<8; i++){
		if (z == 7){
			ii = 7-i;
			clrvoxel(x,y,ii+1);
    2d18:	a5 01       	movw	r20, r10
    2d1a:	4c 1b       	sub	r20, r28
    2d1c:	5d 0b       	sbc	r21, r29
    2d1e:	8e 2d       	mov	r24, r14
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	6f 2d       	mov	r22, r15
    2d24:	70 e0       	ldi	r23, 0x00	; 0
    2d26:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
    2d2a:	0a c0       	rjmp	.+20     	; 0x2d40 <sendvoxel_z+0x66>
		}
		else{
			ii = i;
			clrvoxel(x,y,ii-1);
    2d2c:	ae 01       	movw	r20, r28
    2d2e:	41 50       	subi	r20, 0x01	; 1
    2d30:	50 40       	sbci	r21, 0x00	; 0
    2d32:	8e 2d       	mov	r24, r14
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	6f 2d       	mov	r22, r15
    2d38:	70 e0       	ldi	r23, 0x00	; 0
    2d3a:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
    2d3e:	8e 01       	movw	r16, r28
		}
		setvoxel(x,y,ii);
    2d40:	8e 2d       	mov	r24, r14
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	6f 2d       	mov	r22, r15
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	a8 01       	movw	r20, r16
    2d4a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
		delay_ms(delay);
    2d4e:	c6 01       	movw	r24, r12
    2d50:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
}
// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay){
	int i, ii;
	for (i=0; i<8; i++){
    2d54:	21 96       	adiw	r28, 0x01	; 1
    2d56:	c8 30       	cpi	r28, 0x08	; 8
    2d58:	d1 05       	cpc	r29, r1
    2d5a:	c1 f6       	brne	.-80     	; 0x2d0c <sendvoxel_z+0x32>
			clrvoxel(x,y,ii-1);
		}
		setvoxel(x,y,ii);
		delay_ms(delay);
	}
}
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	df 90       	pop	r13
    2d6a:	cf 90       	pop	r12
    2d6c:	bf 90       	pop	r11
    2d6e:	af 90       	pop	r10
    2d70:	9f 90       	pop	r9
    2d72:	8f 90       	pop	r8
    2d74:	7f 90       	pop	r7
    2d76:	08 95       	ret

00002d78 <sendvoxels_rand_z>:
}

//EFFECT 1
// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait){
    2d78:	6f 92       	push	r6
    2d7a:	7f 92       	push	r7
    2d7c:	8f 92       	push	r8
    2d7e:	9f 92       	push	r9
    2d80:	af 92       	push	r10
    2d82:	bf 92       	push	r11
    2d84:	df 92       	push	r13
    2d86:	ef 92       	push	r14
    2d88:	ff 92       	push	r15
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	3c 01       	movw	r6, r24
    2d94:	5b 01       	movw	r10, r22
    2d96:	4a 01       	movw	r8, r20
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    2d9e:	00 e0       	ldi	r16, 0x00	; 0
    2da0:	10 e0       	ldi	r17, 0x00	; 0
    2da2:	1f c0       	rjmp	.+62     	; 0x2de2 <sendvoxels_rand_z+0x6a>
	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++){
		for (y=0;y<8;y++){
			// Then set a voxel either at the top or at the bottom
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
    2da4:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2da8:	62 e0       	ldi	r22, 0x02	; 2
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    2db0:	ac 01       	movw	r20, r24
    2db2:	e3 e0       	ldi	r30, 0x03	; 3
    2db4:	44 0f       	add	r20, r20
    2db6:	55 1f       	adc	r21, r21
    2db8:	ea 95       	dec	r30
    2dba:	e1 f7       	brne	.-8      	; 0x2db4 <sendvoxels_rand_z+0x3c>
    2dbc:	48 1b       	sub	r20, r24
    2dbe:	59 0b       	sbc	r21, r25
    2dc0:	c8 01       	movw	r24, r16
    2dc2:	be 01       	movw	r22, r28
    2dc4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    2dc8:	21 96       	adiw	r28, 0x01	; 1

	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++){
		for (y=0;y<8;y++){
    2dca:	c8 30       	cpi	r28, 0x08	; 8
    2dcc:	d1 05       	cpc	r29, r1
    2dce:	51 f7       	brne	.-44     	; 0x2da4 <sendvoxels_rand_z+0x2c>
    2dd0:	0f 5f       	subi	r16, 0xFF	; 255
    2dd2:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++){
    2dd4:	08 30       	cpi	r16, 0x08	; 8
    2dd6:	11 05       	cpc	r17, r1
    2dd8:	21 f4       	brne	.+8      	; 0x2de2 <sendvoxels_rand_z+0x6a>
    2dda:	ff 24       	eor	r15, r15
    2ddc:	dd 24       	eor	r13, r13
    2dde:	ee 24       	eor	r14, r14
    2de0:	30 c0       	rjmp	.+96     	; 0x2e42 <sendvoxels_rand_z+0xca>
    2de2:	c0 e0       	ldi	r28, 0x00	; 0
    2de4:	d0 e0       	ldi	r29, 0x00	; 0
    2de6:	de cf       	rjmp	.-68     	; 0x2da4 <sendvoxels_rand_z+0x2c>
		}
	}

	for (i=0;i<iterations;i++){
		// Pick a random x,y position
		x = rand()%8;
    2de8:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2dec:	ec 01       	movw	r28, r24
		y = rand()%8;
    2dee:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2df2:	68 e0       	ldi	r22, 0x08	; 8
    2df4:	70 e0       	ldi	r23, 0x00	; 0
    2df6:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    2dfa:	08 2f       	mov	r16, r24
		// but not the sameone twice in a row
		if (y != last_y && x != last_x){
    2dfc:	8e 15       	cp	r24, r14
    2dfe:	01 f1       	breq	.+64     	; 0x2e40 <sendvoxels_rand_z+0xc8>
		}
	}

	for (i=0;i<iterations;i++){
		// Pick a random x,y position
		x = rand()%8;
    2e00:	ce 01       	movw	r24, r28
    2e02:	68 e0       	ldi	r22, 0x08	; 8
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    2e0a:	18 2f       	mov	r17, r24
		y = rand()%8;
		// but not the sameone twice in a row
		if (y != last_y && x != last_x){
    2e0c:	8d 15       	cp	r24, r13
    2e0e:	c1 f0       	breq	.+48     	; 0x2e40 <sendvoxels_rand_z+0xc8>
			// If the voxel at this x,y is at the bottom
			if (getvoxel(x,y,0)){
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	60 2f       	mov	r22, r16
    2e14:	70 e0       	ldi	r23, 0x00	; 0
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	50 e0       	ldi	r21, 0x00	; 0
    2e1a:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    2e1e:	88 23       	and	r24, r24
    2e20:	21 f0       	breq	.+8      	; 0x2e2a <sendvoxels_rand_z+0xb2>
				// send it to the top
				sendvoxel_z(x,y,0,delay);
    2e22:	81 2f       	mov	r24, r17
    2e24:	60 2f       	mov	r22, r16
    2e26:	40 e0       	ldi	r20, 0x00	; 0
    2e28:	03 c0       	rjmp	.+6      	; 0x2e30 <sendvoxels_rand_z+0xb8>
			} 
			else{
				// if its at the top, send it to the bottom
				sendvoxel_z(x,y,7,delay);
    2e2a:	81 2f       	mov	r24, r17
    2e2c:	60 2f       	mov	r22, r16
    2e2e:	47 e0       	ldi	r20, 0x07	; 7
    2e30:	95 01       	movw	r18, r10
    2e32:	0e 94 6d 16 	call	0x2cda	; 0x2cda <sendvoxel_z>
			}
			delay_ms(wait);
    2e36:	c4 01       	movw	r24, r8
    2e38:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    2e3c:	d1 2e       	mov	r13, r17
    2e3e:	e0 2e       	mov	r14, r16
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
		}
	}

	for (i=0;i<iterations;i++){
    2e40:	f3 94       	inc	r15
    2e42:	8f 2d       	mov	r24, r15
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	86 15       	cp	r24, r6
    2e48:	97 05       	cpc	r25, r7
    2e4a:	74 f2       	brlt	.-100    	; 0x2de8 <sendvoxels_rand_z+0x70>
			last_y = y;
			last_x = x;
		}
	}

}
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	ef 90       	pop	r14
    2e58:	df 90       	pop	r13
    2e5a:	bf 90       	pop	r11
    2e5c:	af 90       	pop	r10
    2e5e:	9f 90       	pop	r9
    2e60:	8f 90       	pop	r8
    2e62:	7f 90       	pop	r7
    2e64:	6f 90       	pop	r6
    2e66:	08 95       	ret

00002e68 <effect_rain>:
#include "font.h"
#include <math.h>
#include <avr/interrupt.h>

//EFFECT 0
void effect_rain (int iterations, int delay){
    2e68:	8f 92       	push	r8
    2e6a:	9f 92       	push	r9
    2e6c:	af 92       	push	r10
    2e6e:	bf 92       	push	r11
    2e70:	cf 92       	push	r12
    2e72:	df 92       	push	r13
    2e74:	ef 92       	push	r14
    2e76:	ff 92       	push	r15
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	4c 01       	movw	r8, r24
    2e82:	5b 01       	movw	r10, r22
    2e84:	cc 24       	eor	r12, r12
    2e86:	dd 24       	eor	r13, r13
    2e88:	32 c0       	rjmp	.+100    	; 0x2eee <effect_rain+0x86>
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++){
		rnd_num = rand()%4;
    2e8a:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2e8e:	64 e0       	ldi	r22, 0x04	; 4
    2e90:	70 e0       	ldi	r23, 0x00	; 0
    2e92:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    2e96:	ec 01       	movw	r28, r24
    2e98:	ee 24       	eor	r14, r14
    2e9a:	ff 24       	eor	r15, r15
    2e9c:	1a c0       	rjmp	.+52     	; 0x2ed2 <effect_rain+0x6a>
		
		for (i=0; i < rnd_num;i++){
			rnd_x = rand()%8;
    2e9e:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2ea2:	8c 01       	movw	r16, r24
			rnd_y = rand()%8;
    2ea4:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2ea8:	9c 01       	movw	r18, r24
			setvoxel(rnd_x,rnd_y,7);
    2eaa:	c8 01       	movw	r24, r16
    2eac:	68 e0       	ldi	r22, 0x08	; 8
    2eae:	70 e0       	ldi	r23, 0x00	; 0
    2eb0:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	c9 01       	movw	r24, r18
    2eb8:	68 e0       	ldi	r22, 0x08	; 8
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    2ec0:	bc 01       	movw	r22, r24
    2ec2:	cf 01       	movw	r24, r30
    2ec4:	47 e0       	ldi	r20, 0x07	; 7
    2ec6:	50 e0       	ldi	r21, 0x00	; 0
    2ec8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++){
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++){
    2ecc:	08 94       	sec
    2ece:	e1 1c       	adc	r14, r1
    2ed0:	f1 1c       	adc	r15, r1
    2ed2:	ec 16       	cp	r14, r28
    2ed4:	fd 06       	cpc	r15, r29
    2ed6:	1c f3       	brlt	.-58     	; 0x2e9e <effect_rain+0x36>
			rnd_x = rand()%8;
			rnd_y = rand()%8;
			setvoxel(rnd_x,rnd_y,7);
		}
		
		delay_ms(delay);
    2ed8:	c5 01       	movw	r24, r10
    2eda:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
		shift(AXIS_Z,-1);
    2ede:	8a e7       	ldi	r24, 0x7A	; 122
    2ee0:	6f ef       	ldi	r22, 0xFF	; 255
    2ee2:	7f ef       	ldi	r23, 0xFF	; 255
    2ee4:	0e 94 c9 06 	call	0xd92	; 0xd92 <shift>
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++){
    2ee8:	08 94       	sec
    2eea:	c1 1c       	adc	r12, r1
    2eec:	d1 1c       	adc	r13, r1
    2eee:	c8 14       	cp	r12, r8
    2ef0:	d9 04       	cpc	r13, r9
    2ef2:	5c f2       	brlt	.-106    	; 0x2e8a <effect_rain+0x22>
		}
		
		delay_ms(delay);
		shift(AXIS_Z,-1);
	}
}
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	ff 90       	pop	r15
    2efe:	ef 90       	pop	r14
    2f00:	df 90       	pop	r13
    2f02:	cf 90       	pop	r12
    2f04:	bf 90       	pop	r11
    2f06:	af 90       	pop	r10
    2f08:	9f 90       	pop	r9
    2f0a:	8f 90       	pop	r8
    2f0c:	08 95       	ret

00002f0e <bomb>:
//	drawCircle(6,6,1,1);
	
	delay_ms(65000);
}*/

void bomb(int delay, int iterations){
    2f0e:	9f 92       	push	r9
    2f10:	af 92       	push	r10
    2f12:	bf 92       	push	r11
    2f14:	cf 92       	push	r12
    2f16:	df 92       	push	r13
    2f18:	ef 92       	push	r14
    2f1a:	ff 92       	push	r15
    2f1c:	0f 93       	push	r16
    2f1e:	1f 93       	push	r17
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	98 2e       	mov	r9, r24
    2f26:	c9 2e       	mov	r12, r25
    2f28:	5b 01       	movw	r10, r22
    2f2a:	ee 24       	eor	r14, r14
    2f2c:	ff 24       	eor	r15, r15
    2f2e:	44 c0       	rjmp	.+136    	; 0x2fb8 <bomb+0xaa>
	int i;
	uint8_t j,x,y,r;
	
	for(i=0;i<iterations;i++){
		x = rand()%8;
    2f30:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2f34:	8c 01       	movw	r16, r24
		y = rand()%8;
    2f36:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    2f3a:	9c 01       	movw	r18, r24
		setvoxel(x,y,CUBE_SIZE-1);
    2f3c:	c8 01       	movw	r24, r16
    2f3e:	68 e0       	ldi	r22, 0x08	; 8
    2f40:	70 e0       	ldi	r23, 0x00	; 0
    2f42:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    2f46:	d8 2e       	mov	r13, r24
    2f48:	c9 01       	movw	r24, r18
    2f4a:	68 e0       	ldi	r22, 0x08	; 8
    2f4c:	70 e0       	ldi	r23, 0x00	; 0
    2f4e:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    2f52:	18 2f       	mov	r17, r24
    2f54:	8d 2d       	mov	r24, r13
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	61 2f       	mov	r22, r17
    2f5a:	70 e0       	ldi	r23, 0x00	; 0
    2f5c:	47 e0       	ldi	r20, 0x07	; 7
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    2f64:	00 e0       	ldi	r16, 0x00	; 0
		for(j=0;j<CUBE_SIZE;j++){
			delay_ms(delay);
    2f66:	89 2d       	mov	r24, r9
    2f68:	9c 2d       	mov	r25, r12
    2f6a:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			shift(AXIS_Z,-1);
    2f6e:	8a e7       	ldi	r24, 0x7A	; 122
    2f70:	6f ef       	ldi	r22, 0xFF	; 255
    2f72:	7f ef       	ldi	r23, 0xFF	; 255
    2f74:	0e 94 c9 06 	call	0xd92	; 0xd92 <shift>
	
	for(i=0;i<iterations;i++){
		x = rand()%8;
		y = rand()%8;
		setvoxel(x,y,CUBE_SIZE-1);
		for(j=0;j<CUBE_SIZE;j++){
    2f78:	0f 5f       	subi	r16, 0xFF	; 255
    2f7a:	08 30       	cpi	r16, 0x08	; 8
    2f7c:	a1 f7       	brne	.-24     	; 0x2f66 <bomb+0x58>
    2f7e:	c1 e0       	ldi	r28, 0x01	; 1
    2f80:	d0 e0       	ldi	r29, 0x00	; 0
			delay_ms(delay);
			shift(AXIS_Z,-1);
		}
		for(r=1;r<=CUBE_SIZE;r++){
			drawCircle(x,y,0,r);
    2f82:	8d 2d       	mov	r24, r13
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	61 2f       	mov	r22, r17
    2f88:	70 e0       	ldi	r23, 0x00	; 0
    2f8a:	40 e0       	ldi	r20, 0x00	; 0
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	9e 01       	movw	r18, r28
    2f90:	0e 94 7d 07 	call	0xefa	; 0xefa <drawCircle>
			delay_ms(delay);
    2f94:	89 2d       	mov	r24, r9
    2f96:	9c 2d       	mov	r25, r12
    2f98:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			fill(0x00);
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    2fa2:	21 96       	adiw	r28, 0x01	; 1
		setvoxel(x,y,CUBE_SIZE-1);
		for(j=0;j<CUBE_SIZE;j++){
			delay_ms(delay);
			shift(AXIS_Z,-1);
		}
		for(r=1;r<=CUBE_SIZE;r++){
    2fa4:	c9 30       	cpi	r28, 0x09	; 9
    2fa6:	d1 05       	cpc	r29, r1
    2fa8:	61 f7       	brne	.-40     	; 0x2f82 <bomb+0x74>
			drawCircle(x,y,0,r);
			delay_ms(delay);
			fill(0x00);
		}
		delay_ms(800);
    2faa:	80 e2       	ldi	r24, 0x20	; 32
    2fac:	93 e0       	ldi	r25, 0x03	; 3
    2fae:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>

void bomb(int delay, int iterations){
	int i;
	uint8_t j,x,y,r;
	
	for(i=0;i<iterations;i++){
    2fb2:	08 94       	sec
    2fb4:	e1 1c       	adc	r14, r1
    2fb6:	f1 1c       	adc	r15, r1
    2fb8:	ea 14       	cp	r14, r10
    2fba:	fb 04       	cpc	r15, r11
    2fbc:	0c f4       	brge	.+2      	; 0x2fc0 <bomb+0xb2>
    2fbe:	b8 cf       	rjmp	.-144    	; 0x2f30 <bomb+0x22>
			delay_ms(delay);
			fill(0x00);
		}
		delay_ms(800);
	}
}
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	ef 90       	pop	r14
    2fcc:	df 90       	pop	r13
    2fce:	cf 90       	pop	r12
    2fd0:	bf 90       	pop	r11
    2fd2:	af 90       	pop	r10
    2fd4:	9f 90       	pop	r9
    2fd6:	08 95       	ret

00002fd8 <crazy_straw>:
		}
	}
}

//CRAZY STRAW
void crazy_straw(int delay, int iterations){
    2fd8:	2f 92       	push	r2
    2fda:	3f 92       	push	r3
    2fdc:	4f 92       	push	r4
    2fde:	5f 92       	push	r5
    2fe0:	6f 92       	push	r6
    2fe2:	7f 92       	push	r7
    2fe4:	8f 92       	push	r8
    2fe6:	9f 92       	push	r9
    2fe8:	af 92       	push	r10
    2fea:	bf 92       	push	r11
    2fec:	cf 92       	push	r12
    2fee:	df 92       	push	r13
    2ff0:	ef 92       	push	r14
    2ff2:	ff 92       	push	r15
    2ff4:	0f 93       	push	r16
    2ff6:	1f 93       	push	r17
    2ff8:	df 93       	push	r29
    2ffa:	cf 93       	push	r28
    2ffc:	cd b7       	in	r28, 0x3d	; 61
    2ffe:	de b7       	in	r29, 0x3e	; 62
    3000:	29 97       	sbiw	r28, 0x09	; 9
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	9d 83       	std	Y+5, r25	; 0x05
    300e:	8c 83       	std	Y+4, r24	; 0x04
    3010:	7f 83       	std	Y+7, r23	; 0x07
    3012:	6e 83       	std	Y+6, r22	; 0x06
			xEnd=0,yEnd=0,zEnd=0,
			xDest=0,yDest=0,zDest=0,
			xx,yy,zz;

	//start point & straw random generation
	if(rand()%2) xStart=0;
    3014:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    3018:	80 fd       	sbrc	r24, 0
    301a:	03 c0       	rjmp	.+6      	; 0x3022 <crazy_straw+0x4a>
    301c:	27 e0       	ldi	r18, 0x07	; 7
    301e:	2b 83       	std	Y+3, r18	; 0x03
    3020:	01 c0       	rjmp	.+2      	; 0x3024 <crazy_straw+0x4c>
    3022:	1b 82       	std	Y+3, r1	; 0x03
	else xStart=CUBE_SIZE-1;
	
	if(rand()%2) yStart=0;
    3024:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    3028:	80 fd       	sbrc	r24, 0
    302a:	03 c0       	rjmp	.+6      	; 0x3032 <crazy_straw+0x5a>
    302c:	37 e0       	ldi	r19, 0x07	; 7
    302e:	3a 83       	std	Y+2, r19	; 0x02
    3030:	01 c0       	rjmp	.+2      	; 0x3034 <crazy_straw+0x5c>
    3032:	1a 82       	std	Y+2, r1	; 0x02
	else yStart=CUBE_SIZE-1;
	
	if(rand()%2) zStart=0;
    3034:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    3038:	80 fd       	sbrc	r24, 0
    303a:	03 c0       	rjmp	.+6      	; 0x3042 <crazy_straw+0x6a>
    303c:	87 e0       	ldi	r24, 0x07	; 7
    303e:	89 83       	std	Y+1, r24	; 0x01
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <crazy_straw+0x6c>
    3042:	19 82       	std	Y+1, r1	; 0x01
	else zStart=CUBE_SIZE-1;
	
	if(xStart>0) xEnd=0;
    3044:	9b 81       	ldd	r25, Y+3	; 0x03
    3046:	99 23       	and	r25, r25
    3048:	19 f4       	brne	.+6      	; 0x3050 <crazy_straw+0x78>
    304a:	07 e0       	ldi	r16, 0x07	; 7
    304c:	90 2e       	mov	r9, r16
    304e:	01 c0       	rjmp	.+2      	; 0x3052 <crazy_straw+0x7a>
    3050:	99 24       	eor	r9, r9
    3052:	8a 80       	ldd	r8, Y+2	; 0x02
    3054:	79 80       	ldd	r7, Y+1	; 0x01
    3056:	10 e0       	ldi	r17, 0x00	; 0
    3058:	19 86       	std	Y+9, r1	; 0x09
    305a:	18 86       	std	Y+8, r1	; 0x08
    305c:	97 c0       	rjmp	.+302    	; 0x318c <crazy_straw+0x1b4>
		while(1){
			xx=xEnd;
			yy=yEnd;
			zz=zEnd;
			
			do p=rand()%3;
    305e:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    3062:	63 e0       	ldi	r22, 0x03	; 3
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    306a:	58 2e       	mov	r5, r24
			while(pp==p);
    306c:	18 17       	cp	r17, r24
    306e:	b9 f3       	breq	.-18     	; 0x305e <crazy_straw+0x86>
			pp=p;
			
			if(p==0){
    3070:	88 23       	and	r24, r24
    3072:	31 f4       	brne	.+12     	; 0x3080 <crazy_straw+0xa8>
				if(xEnd==0) xx=CUBE_SIZE-1;
    3074:	99 20       	and	r9, r9
    3076:	09 f0       	breq	.+2      	; 0x307a <crazy_straw+0xa2>
    3078:	92 c0       	rjmp	.+292    	; 0x319e <crazy_straw+0x1c6>
    307a:	17 e0       	ldi	r17, 0x07	; 7
    307c:	c1 2e       	mov	r12, r17
    307e:	90 c0       	rjmp	.+288    	; 0x31a0 <crazy_straw+0x1c8>
				else xx=0;
			}
			if(p==1){
    3080:	e1 e0       	ldi	r30, 0x01	; 1
    3082:	8e 17       	cp	r24, r30
    3084:	31 f4       	brne	.+12     	; 0x3092 <crazy_straw+0xba>
				if(yEnd==0)	yy=CUBE_SIZE-1;
    3086:	88 20       	and	r8, r8
    3088:	09 f0       	breq	.+2      	; 0x308c <crazy_straw+0xb4>
    308a:	8d c0       	rjmp	.+282    	; 0x31a6 <crazy_straw+0x1ce>
    308c:	b7 e0       	ldi	r27, 0x07	; 7
    308e:	db 2e       	mov	r13, r27
    3090:	8b c0       	rjmp	.+278    	; 0x31a8 <crazy_straw+0x1d0>
				else yy=0;
			}
			if(p==2){
    3092:	f2 e0       	ldi	r31, 0x02	; 2
    3094:	8f 17       	cp	r24, r31
    3096:	19 f0       	breq	.+6      	; 0x309e <crazy_straw+0xc6>
    3098:	b7 2c       	mov	r11, r7
    309a:	c9 2c       	mov	r12, r9
    309c:	82 c0       	rjmp	.+260    	; 0x31a2 <crazy_straw+0x1ca>
				if(zEnd==0)	zz=CUBE_SIZE-1;
    309e:	77 20       	and	r7, r7
    30a0:	21 f0       	breq	.+8      	; 0x30aa <crazy_straw+0xd2>
    30a2:	c9 2c       	mov	r12, r9
    30a4:	d8 2c       	mov	r13, r8
    30a6:	bb 24       	eor	r11, r11
    30a8:	04 c0       	rjmp	.+8      	; 0x30b2 <crazy_straw+0xda>
    30aa:	c9 2c       	mov	r12, r9
    30ac:	d8 2c       	mov	r13, r8
    30ae:	a7 e0       	ldi	r26, 0x07	; 7
    30b0:	ba 2e       	mov	r11, r26
				else zz=0;
			}
			
			if((xx==xStart && yy==yStart && zz==zStart) || (xx==xEnd && yy==yEnd && zz==zEnd)) continue;
    30b2:	2b 81       	ldd	r18, Y+3	; 0x03
    30b4:	c2 16       	cp	r12, r18
    30b6:	39 f4       	brne	.+14     	; 0x30c6 <crazy_straw+0xee>
    30b8:	3a 81       	ldd	r19, Y+2	; 0x02
    30ba:	d3 16       	cp	r13, r19
    30bc:	21 f4       	brne	.+8      	; 0x30c6 <crazy_straw+0xee>
    30be:	15 2d       	mov	r17, r5
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	b8 16       	cp	r11, r24
    30c4:	61 f2       	breq	.-104    	; 0x305e <crazy_straw+0x86>
    30c6:	c9 14       	cp	r12, r9
    30c8:	29 f4       	brne	.+10     	; 0x30d4 <crazy_straw+0xfc>
    30ca:	d8 14       	cp	r13, r8
    30cc:	19 f4       	brne	.+6      	; 0x30d4 <crazy_straw+0xfc>
    30ce:	15 2d       	mov	r17, r5
    30d0:	b7 14       	cp	r11, r7
    30d2:	29 f2       	breq	.-118    	; 0x305e <crazy_straw+0x86>
    30d4:	16 01       	movw	r2, r12
    30d6:	4b 2c       	mov	r4, r11
    30d8:	aa 24       	eor	r10, r10
    30da:	f7 e0       	ldi	r31, 0x07	; 7
    30dc:	6f 2e       	mov	r6, r31
				break;
			}	
		}
		
		for(j=0;j<CUBE_SIZE;j++){
			if(xDest!=xEnd){
    30de:	29 14       	cp	r2, r9
    30e0:	41 f0       	breq	.+16     	; 0x30f2 <crazy_straw+0x11a>
				if(xEnd==0) xx=j;
    30e2:	99 20       	and	r9, r9
    30e4:	11 f4       	brne	.+4      	; 0x30ea <crazy_straw+0x112>
    30e6:	ca 2c       	mov	r12, r10
    30e8:	04 c0       	rjmp	.+8      	; 0x30f2 <crazy_straw+0x11a>
				if(xEnd==CUBE_SIZE-1) xx=xEnd-j;
    30ea:	97 e0       	ldi	r25, 0x07	; 7
    30ec:	99 16       	cp	r9, r25
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <crazy_straw+0x11a>
    30f0:	c6 2c       	mov	r12, r6
			}
			
			if(yDest!=yEnd){
    30f2:	38 14       	cp	r3, r8
    30f4:	41 f0       	breq	.+16     	; 0x3106 <crazy_straw+0x12e>
				if(yEnd==0) yy=j;
    30f6:	88 20       	and	r8, r8
    30f8:	11 f4       	brne	.+4      	; 0x30fe <crazy_straw+0x126>
    30fa:	da 2c       	mov	r13, r10
    30fc:	04 c0       	rjmp	.+8      	; 0x3106 <crazy_straw+0x12e>
				if(yEnd==CUBE_SIZE-1) yy=yEnd-j;
    30fe:	e7 e0       	ldi	r30, 0x07	; 7
    3100:	8e 16       	cp	r8, r30
    3102:	09 f4       	brne	.+2      	; 0x3106 <crazy_straw+0x12e>
    3104:	d6 2c       	mov	r13, r6
			}
			
			if(zDest!=zEnd){
    3106:	47 14       	cp	r4, r7
    3108:	41 f0       	breq	.+16     	; 0x311a <crazy_straw+0x142>
				if(zEnd==0) zz=j;
    310a:	77 20       	and	r7, r7
    310c:	11 f4       	brne	.+4      	; 0x3112 <crazy_straw+0x13a>
    310e:	ba 2c       	mov	r11, r10
    3110:	04 c0       	rjmp	.+8      	; 0x311a <crazy_straw+0x142>
				if(zEnd==CUBE_SIZE-1) zz=zEnd-j;
    3112:	f7 e0       	ldi	r31, 0x07	; 7
    3114:	7f 16       	cp	r7, r31
    3116:	09 f4       	brne	.+2      	; 0x311a <crazy_straw+0x142>
    3118:	b6 2c       	mov	r11, r6
			}
			
			line(xStart,yStart,zStart,xx,yy,zz);
    311a:	2a 81       	ldd	r18, Y+2	; 0x02
    311c:	62 2f       	mov	r22, r18
    311e:	77 27       	eor	r23, r23
    3120:	67 fd       	sbrc	r22, 7
    3122:	70 95       	com	r23
    3124:	39 81       	ldd	r19, Y+1	; 0x01
    3126:	43 2f       	mov	r20, r19
    3128:	55 27       	eor	r21, r21
    312a:	47 fd       	sbrc	r20, 7
    312c:	50 95       	com	r21
    312e:	2c 2d       	mov	r18, r12
    3130:	33 27       	eor	r19, r19
    3132:	27 fd       	sbrc	r18, 7
    3134:	30 95       	com	r19
    3136:	0d 2d       	mov	r16, r13
    3138:	11 27       	eor	r17, r17
    313a:	07 fd       	sbrc	r16, 7
    313c:	10 95       	com	r17
    313e:	eb 2c       	mov	r14, r11
    3140:	ff 24       	eor	r15, r15
    3142:	e7 fc       	sbrc	r14, 7
    3144:	f0 94       	com	r15
    3146:	eb 81       	ldd	r30, Y+3	; 0x03
    3148:	8e 2f       	mov	r24, r30
    314a:	99 27       	eor	r25, r25
    314c:	87 fd       	sbrc	r24, 7
    314e:	90 95       	com	r25
    3150:	0e 94 65 05 	call	0xaca	; 0xaca <line>
			delay_ms(delay);
    3154:	8c 81       	ldd	r24, Y+4	; 0x04
    3156:	9d 81       	ldd	r25, Y+5	; 0x05
    3158:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			fill(0x00);
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
			
			if(j==CUBE_SIZE-1){
    3162:	f7 e0       	ldi	r31, 0x07	; 7
    3164:	af 16       	cp	r10, r31
    3166:	31 f4       	brne	.+12     	; 0x3174 <crazy_straw+0x19c>
    3168:	9b 80       	ldd	r9, Y+3	; 0x03
    316a:	cb 82       	std	Y+3, r12	; 0x03
    316c:	8a 80       	ldd	r8, Y+2	; 0x02
    316e:	da 82       	std	Y+2, r13	; 0x02
    3170:	79 80       	ldd	r7, Y+1	; 0x01
    3172:	b9 82       	std	Y+1, r11	; 0x01
				zDest=zz;
				break;
			}	
		}
		
		for(j=0;j<CUBE_SIZE;j++){
    3174:	a3 94       	inc	r10
    3176:	6a 94       	dec	r6
    3178:	28 e0       	ldi	r18, 0x08	; 8
    317a:	a2 16       	cp	r10, r18
    317c:	09 f0       	breq	.+2      	; 0x3180 <crazy_straw+0x1a8>
    317e:	af cf       	rjmp	.-162    	; 0x30de <crazy_straw+0x106>
    3180:	88 85       	ldd	r24, Y+8	; 0x08
    3182:	99 85       	ldd	r25, Y+9	; 0x09
    3184:	01 96       	adiw	r24, 0x01	; 1
    3186:	99 87       	std	Y+9, r25	; 0x09
    3188:	88 87       	std	Y+8, r24	; 0x08
    318a:	15 2d       	mov	r17, r5
	if(xStart>0) xEnd=0;
	else xEnd=CUBE_SIZE-1;
	yEnd=yStart;
	zEnd=zStart;
	
	for(i=0;i<iterations;i++){
    318c:	e8 85       	ldd	r30, Y+8	; 0x08
    318e:	f9 85       	ldd	r31, Y+9	; 0x09
    3190:	2e 81       	ldd	r18, Y+6	; 0x06
    3192:	3f 81       	ldd	r19, Y+7	; 0x07
    3194:	e2 17       	cp	r30, r18
    3196:	f3 07       	cpc	r31, r19
    3198:	0c f4       	brge	.+2      	; 0x319c <crazy_straw+0x1c4>
    319a:	61 cf       	rjmp	.-318    	; 0x305e <crazy_straw+0x86>
    319c:	08 c0       	rjmp	.+16     	; 0x31ae <crazy_straw+0x1d6>
				yStart=yy;
				zStart=zz;
			}
		}
	}
}
    319e:	cc 24       	eor	r12, r12
    31a0:	b7 2c       	mov	r11, r7
    31a2:	d8 2c       	mov	r13, r8
    31a4:	86 cf       	rjmp	.-244    	; 0x30b2 <crazy_straw+0xda>
    31a6:	dd 24       	eor	r13, r13
    31a8:	b7 2c       	mov	r11, r7
    31aa:	c9 2c       	mov	r12, r9
    31ac:	82 cf       	rjmp	.-252    	; 0x30b2 <crazy_straw+0xda>
    31ae:	29 96       	adiw	r28, 0x09	; 9
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	cf 91       	pop	r28
    31bc:	df 91       	pop	r29
    31be:	1f 91       	pop	r17
    31c0:	0f 91       	pop	r16
    31c2:	ff 90       	pop	r15
    31c4:	ef 90       	pop	r14
    31c6:	df 90       	pop	r13
    31c8:	cf 90       	pop	r12
    31ca:	bf 90       	pop	r11
    31cc:	af 90       	pop	r10
    31ce:	9f 90       	pop	r9
    31d0:	8f 90       	pop	r8
    31d2:	7f 90       	pop	r7
    31d4:	6f 90       	pop	r6
    31d6:	5f 90       	pop	r5
    31d8:	4f 90       	pop	r4
    31da:	3f 90       	pop	r3
    31dc:	2f 90       	pop	r2
    31de:	08 95       	ret

000031e0 <planes_exchange>:
		}
	}
}

//PLANES EXCHANGING
void planes_exchange(int delay, int iterations){
    31e0:	2f 92       	push	r2
    31e2:	3f 92       	push	r3
    31e4:	4f 92       	push	r4
    31e6:	5f 92       	push	r5
    31e8:	7f 92       	push	r7
    31ea:	8f 92       	push	r8
    31ec:	9f 92       	push	r9
    31ee:	af 92       	push	r10
    31f0:	bf 92       	push	r11
    31f2:	cf 92       	push	r12
    31f4:	df 92       	push	r13
    31f6:	ef 92       	push	r14
    31f8:	ff 92       	push	r15
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	df 93       	push	r29
    3200:	cf 93       	push	r28
    3202:	00 d0       	rcall	.+0      	; 0x3204 <planes_exchange+0x24>
    3204:	0f 92       	push	r0
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
    320a:	1c 01       	movw	r2, r24
    320c:	2b 01       	movw	r4, r22
    320e:	10 e0       	ldi	r17, 0x00	; 0
    3210:	aa 24       	eor	r10, r10
    3212:	a3 94       	inc	r10
    3214:	82 e0       	ldi	r24, 0x02	; 2
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	04 e0       	ldi	r16, 0x04	; 4
	int8_t i,j,a0=1,a1=2,a2=4,s,ss=1;
	
	for(i=0;i<3;i++){
		if		(i==0) 	a0=rand()%2;	//0 or 1
    321a:	11 23       	and	r17, r17
    321c:	41 f4       	brne	.+16     	; 0x322e <planes_exchange+0x4e>
    321e:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    3222:	62 e0       	ldi	r22, 0x02	; 2
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    322a:	a8 2e       	mov	r10, r24
    322c:	13 c0       	rjmp	.+38     	; 0x3254 <planes_exchange+0x74>
		else if	(i==1) 	a1=rand()%2+2;	//2 or 3
    322e:	11 30       	cpi	r17, 0x01	; 1
    3230:	49 f4       	brne	.+18     	; 0x3244 <planes_exchange+0x64>
    3232:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    3236:	62 e0       	ldi	r22, 0x02	; 2
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    323e:	8e 5f       	subi	r24, 0xFE	; 254
    3240:	89 83       	std	Y+1, r24	; 0x01
    3242:	08 c0       	rjmp	.+16     	; 0x3254 <planes_exchange+0x74>
		else 			a2=rand()%2+4;	//4 or 5
    3244:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    3248:	62 e0       	ldi	r22, 0x02	; 2
    324a:	70 e0       	ldi	r23, 0x00	; 0
    324c:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    3250:	08 2f       	mov	r16, r24
    3252:	0c 5f       	subi	r16, 0xFC	; 252

//PLANES EXCHANGING
void planes_exchange(int delay, int iterations){
	int8_t i,j,a0=1,a1=2,a2=4,s,ss=1;
	
	for(i=0;i<3;i++){
    3254:	1f 5f       	subi	r17, 0xFF	; 255
    3256:	13 30       	cpi	r17, 0x03	; 3
    3258:	01 f7       	brne	.-64     	; 0x321a <planes_exchange+0x3a>
    325a:	b0 2e       	mov	r11, r16
		if		(i==0) 	a0=rand()%2;	//0 or 1
		else if	(i==1) 	a1=rand()%2+2;	//2 or 3
		else 			a2=rand()%2+4;	//4 or 5
	}
	
	if(a0==0) setplane_x(0);
    325c:	aa 20       	and	r10, r10
    325e:	19 f4       	brne	.+6      	; 0x3266 <planes_exchange+0x86>
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	05 c0       	rjmp	.+10     	; 0x3270 <planes_exchange+0x90>
	if(a0==1) setplane_x(CUBE_SIZE-1);
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	a9 16       	cp	r10, r25
    326a:	21 f4       	brne	.+8      	; 0x3274 <planes_exchange+0x94>
    326c:	87 e0       	ldi	r24, 0x07	; 7
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 94 02 	call	0x528	; 0x528 <setplane_x>
	if(a1==2) setplane_y(0);
    3274:	e9 81       	ldd	r30, Y+1	; 0x01
    3276:	e2 30       	cpi	r30, 0x02	; 2
    3278:	19 f4       	brne	.+6      	; 0x3280 <planes_exchange+0xa0>
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	05 c0       	rjmp	.+10     	; 0x328a <planes_exchange+0xaa>
	if(a1==3) setplane_y(CUBE_SIZE-1);
    3280:	f9 81       	ldd	r31, Y+1	; 0x01
    3282:	f3 30       	cpi	r31, 0x03	; 3
    3284:	21 f4       	brne	.+8      	; 0x328e <planes_exchange+0xae>
    3286:	87 e0       	ldi	r24, 0x07	; 7
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <setplane_y>
	if(a2==4) setplane_z(0);
    328e:	04 30       	cpi	r16, 0x04	; 4
    3290:	39 f4       	brne	.+14     	; 0x32a0 <planes_exchange+0xc0>
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0e 94 67 02 	call	0x4ce	; 0x4ce <setplane_z>
    329a:	44 e0       	ldi	r20, 0x04	; 4
    329c:	b4 2e       	mov	r11, r20
    329e:	08 c0       	rjmp	.+16     	; 0x32b0 <planes_exchange+0xd0>
	if(a2==5) setplane_z(CUBE_SIZE-1);
    32a0:	05 30       	cpi	r16, 0x05	; 5
    32a2:	11 f0       	breq	.+4      	; 0x32a8 <planes_exchange+0xc8>
    32a4:	b0 2e       	mov	r11, r16
    32a6:	04 c0       	rjmp	.+8      	; 0x32b0 <planes_exchange+0xd0>
    32a8:	87 e0       	ldi	r24, 0x07	; 7
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	0e 94 67 02 	call	0x4ce	; 0x4ce <setplane_z>
    32b0:	11 e0       	ldi	r17, 0x01	; 1
    32b2:	88 24       	eor	r8, r8
    32b4:	99 24       	eor	r9, r9
    32b6:	b6 c0       	rjmp	.+364    	; 0x3424 <planes_exchange+0x244>
	
	for(i=0;i<iterations;i++){
		do s=rand()%3;
    32b8:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    32bc:	63 e0       	ldi	r22, 0x03	; 3
    32be:	70 e0       	ldi	r23, 0x00	; 0
    32c0:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    32c4:	78 2e       	mov	r7, r24
		while(s==ss);
    32c6:	81 17       	cp	r24, r17
    32c8:	b9 f3       	breq	.-18     	; 0x32b8 <planes_exchange+0xd8>
    32ca:	00 e0       	ldi	r16, 0x00	; 0
    32cc:	10 e0       	ldi	r17, 0x00	; 0
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	9b 83       	std	Y+3, r25	; 0x03
    32d4:	8a 83       	std	Y+2, r24	; 0x02
    32d6:	37 e0       	ldi	r19, 0x07	; 7
    32d8:	c3 2e       	mov	r12, r19
    32da:	d1 2c       	mov	r13, r1
    32dc:	26 e0       	ldi	r18, 0x06	; 6
    32de:	e2 2e       	mov	r14, r18
    32e0:	f1 2c       	mov	r15, r1
		ss=s;

		for(j=1;j<CUBE_SIZE;j++){
			if(s==0){
    32e2:	77 20       	and	r7, r7
    32e4:	39 f5       	brne	.+78     	; 0x3334 <planes_exchange+0x154>
				if(a0==0){
    32e6:	aa 20       	and	r10, r10
    32e8:	69 f4       	brne	.+26     	; 0x3304 <planes_exchange+0x124>
					clrplane_x(j-1);
    32ea:	c8 01       	movw	r24, r16
    32ec:	0e 94 bf 02 	call	0x57e	; 0x57e <clrplane_x>
					setplane_x(j);
    32f0:	8a 81       	ldd	r24, Y+2	; 0x02
    32f2:	9b 81       	ldd	r25, Y+3	; 0x03
    32f4:	0e 94 94 02 	call	0x528	; 0x528 <setplane_x>
    32f8:	9a 81       	ldd	r25, Y+2	; 0x02
    32fa:	97 30       	cpi	r25, 0x07	; 7
    32fc:	69 f4       	brne	.+26     	; 0x3318 <planes_exchange+0x138>
    32fe:	aa 24       	eor	r10, r10
    3300:	a3 94       	inc	r10
    3302:	0a c0       	rjmp	.+20     	; 0x3318 <planes_exchange+0x138>
					if(j==CUBE_SIZE-1) a0=1;
				}
				else{
					clrplane_x(CUBE_SIZE-j);
    3304:	c6 01       	movw	r24, r12
    3306:	0e 94 bf 02 	call	0x57e	; 0x57e <clrplane_x>
					setplane_x(CUBE_SIZE-j-1);
    330a:	c7 01       	movw	r24, r14
    330c:	0e 94 94 02 	call	0x528	; 0x528 <setplane_x>
					if(j==CUBE_SIZE-1) a0=0;
    3310:	ea 81       	ldd	r30, Y+2	; 0x02
    3312:	e7 30       	cpi	r30, 0x07	; 7
    3314:	09 f4       	brne	.+2      	; 0x3318 <planes_exchange+0x138>
    3316:	aa 24       	eor	r10, r10
				}
				
				if(a1==2) setplane_y(0);
    3318:	f9 81       	ldd	r31, Y+1	; 0x01
    331a:	f2 30       	cpi	r31, 0x02	; 2
    331c:	19 f4       	brne	.+6      	; 0x3324 <planes_exchange+0x144>
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <planes_exchange+0x148>
				else setplane_y(CUBE_SIZE-1);
    3324:	87 e0       	ldi	r24, 0x07	; 7
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <setplane_y>
				
				if(a2==4) setplane_z(0);
    332c:	84 e0       	ldi	r24, 0x04	; 4
    332e:	b8 16       	cp	r11, r24
    3330:	81 f5       	brne	.+96     	; 0x3392 <planes_exchange+0x1b2>
    3332:	2a c0       	rjmp	.+84     	; 0x3388 <planes_exchange+0x1a8>
				else setplane_z(CUBE_SIZE-1);
			}
			else if(s==1){
    3334:	91 e0       	ldi	r25, 0x01	; 1
    3336:	79 16       	cp	r7, r25
    3338:	79 f5       	brne	.+94     	; 0x3398 <planes_exchange+0x1b8>
				if(a1==2){
    333a:	e9 81       	ldd	r30, Y+1	; 0x01
    333c:	e2 30       	cpi	r30, 0x02	; 2
    333e:	69 f4       	brne	.+26     	; 0x335a <planes_exchange+0x17a>
					clrplane_y(j-1);
    3340:	c8 01       	movw	r24, r16
    3342:	0e 94 02 03 	call	0x604	; 0x604 <clrplane_y>
					setplane_y(j);
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	9b 81       	ldd	r25, Y+3	; 0x03
    334a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <setplane_y>
					if(j==CUBE_SIZE-1) a1=3;
    334e:	fa 81       	ldd	r31, Y+2	; 0x02
    3350:	f7 30       	cpi	r31, 0x07	; 7
    3352:	71 f4       	brne	.+28     	; 0x3370 <planes_exchange+0x190>
    3354:	83 e0       	ldi	r24, 0x03	; 3
    3356:	89 83       	std	Y+1, r24	; 0x01
    3358:	0b c0       	rjmp	.+22     	; 0x3370 <planes_exchange+0x190>
				}
				else{
					clrplane_y(CUBE_SIZE-j);
    335a:	c6 01       	movw	r24, r12
    335c:	0e 94 02 03 	call	0x604	; 0x604 <clrplane_y>
					setplane_y(CUBE_SIZE-j-1);
    3360:	c7 01       	movw	r24, r14
    3362:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <setplane_y>
					if(j==CUBE_SIZE-1) a1=2;
    3366:	9a 81       	ldd	r25, Y+2	; 0x02
    3368:	97 30       	cpi	r25, 0x07	; 7
    336a:	11 f4       	brne	.+4      	; 0x3370 <planes_exchange+0x190>
    336c:	e2 e0       	ldi	r30, 0x02	; 2
    336e:	e9 83       	std	Y+1, r30	; 0x01
				}
				
				if(a0==0) setplane_x(0);
    3370:	aa 20       	and	r10, r10
    3372:	19 f4       	brne	.+6      	; 0x337a <planes_exchange+0x19a>
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	02 c0       	rjmp	.+4      	; 0x337e <planes_exchange+0x19e>
				else setplane_x(CUBE_SIZE-1);
    337a:	87 e0       	ldi	r24, 0x07	; 7
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	0e 94 94 02 	call	0x528	; 0x528 <setplane_x>
				
				if(a2==4) setplane_z(0);
    3382:	f4 e0       	ldi	r31, 0x04	; 4
    3384:	bf 16       	cp	r11, r31
    3386:	29 f4       	brne	.+10     	; 0x3392 <planes_exchange+0x1b2>
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 67 02 	call	0x4ce	; 0x4ce <setplane_z>
    3390:	31 c0       	rjmp	.+98     	; 0x33f4 <planes_exchange+0x214>
				else setplane_z(CUBE_SIZE-1);
    3392:	87 e0       	ldi	r24, 0x07	; 7
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	fa cf       	rjmp	.-12     	; 0x338c <planes_exchange+0x1ac>
			}
			else{
				if(a2==4){
    3398:	84 e0       	ldi	r24, 0x04	; 4
    339a:	b8 16       	cp	r11, r24
    339c:	69 f4       	brne	.+26     	; 0x33b8 <planes_exchange+0x1d8>
					clrplane_z(j-1);
    339e:	c8 01       	movw	r24, r16
    33a0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <clrplane_z>
					setplane_z(j);
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	9b 81       	ldd	r25, Y+3	; 0x03
    33a8:	0e 94 67 02 	call	0x4ce	; 0x4ce <setplane_z>
					if(j==CUBE_SIZE-1) a2=5;
    33ac:	9a 81       	ldd	r25, Y+2	; 0x02
    33ae:	97 30       	cpi	r25, 0x07	; 7
    33b0:	71 f4       	brne	.+28     	; 0x33ce <planes_exchange+0x1ee>
    33b2:	95 e0       	ldi	r25, 0x05	; 5
    33b4:	b9 2e       	mov	r11, r25
    33b6:	0b c0       	rjmp	.+22     	; 0x33ce <planes_exchange+0x1ee>
				}
				else{
					clrplane_z(CUBE_SIZE-j);
    33b8:	c6 01       	movw	r24, r12
    33ba:	0e 94 7e 02 	call	0x4fc	; 0x4fc <clrplane_z>
					setplane_z(CUBE_SIZE-j-1);
    33be:	c7 01       	movw	r24, r14
    33c0:	0e 94 67 02 	call	0x4ce	; 0x4ce <setplane_z>
					if(j==CUBE_SIZE-1) a2=4;
    33c4:	ea 81       	ldd	r30, Y+2	; 0x02
    33c6:	e7 30       	cpi	r30, 0x07	; 7
    33c8:	11 f4       	brne	.+4      	; 0x33ce <planes_exchange+0x1ee>
    33ca:	84 e0       	ldi	r24, 0x04	; 4
    33cc:	b8 2e       	mov	r11, r24
				}
				
				if(a0==0) setplane_x(0);
    33ce:	aa 20       	and	r10, r10
    33d0:	19 f4       	brne	.+6      	; 0x33d8 <planes_exchange+0x1f8>
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <planes_exchange+0x1fc>
				else setplane_x(CUBE_SIZE-1);
    33d8:	87 e0       	ldi	r24, 0x07	; 7
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	0e 94 94 02 	call	0x528	; 0x528 <setplane_x>
				
				if(a1==2) setplane_y(0);
    33e0:	f9 81       	ldd	r31, Y+1	; 0x01
    33e2:	f2 30       	cpi	r31, 0x02	; 2
    33e4:	19 f4       	brne	.+6      	; 0x33ec <planes_exchange+0x20c>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	02 c0       	rjmp	.+4      	; 0x33f0 <planes_exchange+0x210>
				else setplane_y(CUBE_SIZE-1);
    33ec:	87 e0       	ldi	r24, 0x07	; 7
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <setplane_y>
			}
			delay_ms(delay);
    33f4:	c1 01       	movw	r24, r2
    33f6:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    33fa:	0f 5f       	subi	r16, 0xFF	; 255
    33fc:	1f 4f       	sbci	r17, 0xFF	; 255
    33fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3400:	9b 81       	ldd	r25, Y+3	; 0x03
    3402:	01 96       	adiw	r24, 0x01	; 1
    3404:	9b 83       	std	Y+3, r25	; 0x03
    3406:	8a 83       	std	Y+2, r24	; 0x02
    3408:	08 94       	sec
    340a:	c1 08       	sbc	r12, r1
    340c:	d1 08       	sbc	r13, r1
    340e:	08 94       	sec
    3410:	e1 08       	sbc	r14, r1
    3412:	f1 08       	sbc	r15, r1
	for(i=0;i<iterations;i++){
		do s=rand()%3;
		while(s==ss);
		ss=s;

		for(j=1;j<CUBE_SIZE;j++){
    3414:	07 30       	cpi	r16, 0x07	; 7
    3416:	11 05       	cpc	r17, r1
    3418:	09 f0       	breq	.+2      	; 0x341c <planes_exchange+0x23c>
    341a:	63 cf       	rjmp	.-314    	; 0x32e2 <planes_exchange+0x102>
    341c:	08 94       	sec
    341e:	81 1c       	adc	r8, r1
    3420:	91 1c       	adc	r9, r1
    3422:	17 2d       	mov	r17, r7
	if(a1==2) setplane_y(0);
	if(a1==3) setplane_y(CUBE_SIZE-1);
	if(a2==4) setplane_z(0);
	if(a2==5) setplane_z(CUBE_SIZE-1);
	
	for(i=0;i<iterations;i++){
    3424:	84 14       	cp	r8, r4
    3426:	95 04       	cpc	r9, r5
    3428:	0c f4       	brge	.+2      	; 0x342c <planes_exchange+0x24c>
    342a:	46 cf       	rjmp	.-372    	; 0x32b8 <planes_exchange+0xd8>
				else setplane_y(CUBE_SIZE-1);
			}
			delay_ms(delay);
		}
	}
}
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	cf 91       	pop	r28
    3434:	df 91       	pop	r29
    3436:	1f 91       	pop	r17
    3438:	0f 91       	pop	r16
    343a:	ff 90       	pop	r15
    343c:	ef 90       	pop	r14
    343e:	df 90       	pop	r13
    3440:	cf 90       	pop	r12
    3442:	bf 90       	pop	r11
    3444:	af 90       	pop	r10
    3446:	9f 90       	pop	r9
    3448:	8f 90       	pop	r8
    344a:	7f 90       	pop	r7
    344c:	5f 90       	pop	r5
    344e:	4f 90       	pop	r4
    3450:	3f 90       	pop	r3
    3452:	2f 90       	pop	r2
    3454:	08 95       	ret

00003456 <planes_in_order>:
		}
	}
}

//PLANES IN ORDER
void planes_in_order(int delay, int iterations) {
    3456:	2f 92       	push	r2
    3458:	3f 92       	push	r3
    345a:	4f 92       	push	r4
    345c:	5f 92       	push	r5
    345e:	6f 92       	push	r6
    3460:	7f 92       	push	r7
    3462:	8f 92       	push	r8
    3464:	9f 92       	push	r9
    3466:	af 92       	push	r10
    3468:	bf 92       	push	r11
    346a:	cf 92       	push	r12
    346c:	df 92       	push	r13
    346e:	ef 92       	push	r14
    3470:	ff 92       	push	r15
    3472:	0f 93       	push	r16
    3474:	1f 93       	push	r17
    3476:	cf 93       	push	r28
    3478:	df 93       	push	r29
    347a:	2c 01       	movw	r4, r24
    347c:	4b 01       	movw	r8, r22
	int8_t i,j,k,b=1,c=1,m=0,s;
	s=CUBE_SIZE-1;
	for(i=0;i<iterations*2;i++) {
    347e:	88 0c       	add	r8, r8
    3480:	99 1c       	adc	r9, r9
    3482:	33 24       	eor	r3, r3
    3484:	dd 24       	eor	r13, r13
    3486:	d3 94       	inc	r13
    3488:	22 24       	eor	r2, r2
    348a:	23 94       	inc	r2
    348c:	aa 24       	eor	r10, r10
    348e:	bb 24       	eor	r11, r11
    3490:	7f c0       	rjmp	.+254    	; 0x3590 <planes_in_order+0x13a>
		m=m?0:1;
    3492:	cc 24       	eor	r12, r12
    3494:	33 20       	and	r3, r3
    3496:	11 f4       	brne	.+4      	; 0x349c <planes_in_order+0x46>
    3498:	cc 24       	eor	r12, r12
    349a:	c3 94       	inc	r12
    349c:	3c 2c       	mov	r3, r12
		if(m) {
    349e:	cc 20       	and	r12, r12
    34a0:	51 f0       	breq	.+20     	; 0x34b6 <planes_in_order+0x60>
			do b=rand()%3;
    34a2:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    34a6:	63 e0       	ldi	r22, 0x03	; 3
    34a8:	70 e0       	ldi	r23, 0x00	; 0
    34aa:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    34ae:	d8 2e       	mov	r13, r24
			while(b==c);
    34b0:	82 15       	cp	r24, r2
    34b2:	b9 f3       	breq	.-18     	; 0x34a2 <planes_in_order+0x4c>
    34b4:	28 2e       	mov	r2, r24
    34b6:	57 e0       	ldi	r21, 0x07	; 7
    34b8:	e5 2e       	mov	r14, r21
    34ba:	f1 2c       	mov	r15, r1
			c = b;
		}
		for(j=0;j<CUBE_SIZE;j++) {
			if(m){
    34bc:	cc 20       	and	r12, r12
    34be:	61 f1       	breq	.+88     	; 0x3518 <planes_in_order+0xc2>
    34c0:	c0 e0       	ldi	r28, 0x00	; 0
    34c2:	d0 e0       	ldi	r29, 0x00	; 0
    34c4:	0f ef       	ldi	r16, 0xFF	; 255
    34c6:	1f ef       	ldi	r17, 0xFF	; 255
				for(k=0;k<CUBE_SIZE-j;k++) {
    34c8:	37 01       	movw	r6, r14
    34ca:	08 94       	sec
    34cc:	61 1c       	adc	r6, r1
    34ce:	71 1c       	adc	r7, r1
    34d0:	1f c0       	rjmp	.+62     	; 0x3510 <planes_in_order+0xba>
					if(b==0){
    34d2:	dd 20       	and	r13, r13
    34d4:	39 f4       	brne	.+14     	; 0x34e4 <planes_in_order+0x8e>
						clrplane_x(k-1);
    34d6:	c8 01       	movw	r24, r16
    34d8:	0e 94 bf 02 	call	0x57e	; 0x57e <clrplane_x>
						setplane_x(k);
    34dc:	ce 01       	movw	r24, r28
    34de:	0e 94 94 02 	call	0x528	; 0x528 <setplane_x>
    34e2:	10 c0       	rjmp	.+32     	; 0x3504 <planes_in_order+0xae>
					}
					else if(b==1){
    34e4:	21 e0       	ldi	r18, 0x01	; 1
    34e6:	d2 16       	cp	r13, r18
    34e8:	39 f4       	brne	.+14     	; 0x34f8 <planes_in_order+0xa2>
						clrplane_y(k-1);
    34ea:	c8 01       	movw	r24, r16
    34ec:	0e 94 02 03 	call	0x604	; 0x604 <clrplane_y>
						setplane_y(k);
    34f0:	ce 01       	movw	r24, r28
    34f2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <setplane_y>
    34f6:	06 c0       	rjmp	.+12     	; 0x3504 <planes_in_order+0xae>
					}
					else{
						clrplane_z(k-1);
    34f8:	c8 01       	movw	r24, r16
    34fa:	0e 94 7e 02 	call	0x4fc	; 0x4fc <clrplane_z>
						setplane_z(k);
    34fe:	ce 01       	movw	r24, r28
    3500:	0e 94 67 02 	call	0x4ce	; 0x4ce <setplane_z>
					}
					delay_ms(delay);
    3504:	c2 01       	movw	r24, r4
    3506:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    350a:	21 96       	adiw	r28, 0x01	; 1
    350c:	0f 5f       	subi	r16, 0xFF	; 255
    350e:	1f 4f       	sbci	r17, 0xFF	; 255
			while(b==c);
			c = b;
		}
		for(j=0;j<CUBE_SIZE;j++) {
			if(m){
				for(k=0;k<CUBE_SIZE-j;k++) {
    3510:	c6 15       	cp	r28, r6
    3512:	d7 05       	cpc	r29, r7
    3514:	f4 f2       	brlt	.-68     	; 0x34d2 <planes_in_order+0x7c>
    3516:	30 c0       	rjmp	.+96     	; 0x3578 <planes_in_order+0x122>
    3518:	7e 2c       	mov	r7, r14
    351a:	c0 e0       	ldi	r28, 0x00	; 0
    351c:	d0 e0       	ldi	r29, 0x00	; 0
    351e:	87 01       	movw	r16, r14
    3520:	0f 5f       	subi	r16, 0xFF	; 255
    3522:	1f 4f       	sbci	r17, 0xFF	; 255
					delay_ms(delay);
				}
			}
			else {
				for(k=CUBE_SIZE-j-1;k<CUBE_SIZE;k++) {
					if(b==0){
    3524:	dd 20       	and	r13, r13
    3526:	59 f4       	brne	.+22     	; 0x353e <planes_in_order+0xe8>
						clrplane_x(k);
    3528:	ce 01       	movw	r24, r28
    352a:	8e 0d       	add	r24, r14
    352c:	9f 1d       	adc	r25, r15
    352e:	0e 94 bf 02 	call	0x57e	; 0x57e <clrplane_x>
						setplane_x(k+1);
    3532:	c8 01       	movw	r24, r16
    3534:	8c 0f       	add	r24, r28
    3536:	9d 1f       	adc	r25, r29
    3538:	0e 94 94 02 	call	0x528	; 0x528 <setplane_x>
    353c:	15 c0       	rjmp	.+42     	; 0x3568 <planes_in_order+0x112>
    353e:	ce 01       	movw	r24, r28
    3540:	8e 0d       	add	r24, r14
    3542:	9f 1d       	adc	r25, r15
					}
					else if(b==1){
    3544:	21 e0       	ldi	r18, 0x01	; 1
    3546:	d2 16       	cp	r13, r18
    3548:	41 f4       	brne	.+16     	; 0x355a <planes_in_order+0x104>
						clrplane_y(k);
    354a:	0e 94 02 03 	call	0x604	; 0x604 <clrplane_y>
						setplane_y(k+1);
    354e:	c8 01       	movw	r24, r16
    3550:	8c 0f       	add	r24, r28
    3552:	9d 1f       	adc	r25, r29
    3554:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <setplane_y>
    3558:	07 c0       	rjmp	.+14     	; 0x3568 <planes_in_order+0x112>
					}
					else{
						clrplane_z(k);
    355a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <clrplane_z>
						setplane_z(k+1);
    355e:	c8 01       	movw	r24, r16
    3560:	8c 0f       	add	r24, r28
    3562:	9d 1f       	adc	r25, r29
    3564:	0e 94 67 02 	call	0x4ce	; 0x4ce <setplane_z>
					}
					delay_ms(delay);
    3568:	c2 01       	movw	r24, r4
    356a:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    356e:	21 96       	adiw	r28, 0x01	; 1
					}
					delay_ms(delay);
				}
			}
			else {
				for(k=CUBE_SIZE-j-1;k<CUBE_SIZE;k++) {
    3570:	87 2d       	mov	r24, r7
    3572:	8c 0f       	add	r24, r28
    3574:	88 30       	cpi	r24, 0x08	; 8
    3576:	b1 f6       	brne	.-84     	; 0x3524 <planes_in_order+0xce>
    3578:	08 94       	sec
    357a:	e1 08       	sbc	r14, r1
    357c:	f1 08       	sbc	r15, r1
		if(m) {
			do b=rand()%3;
			while(b==c);
			c = b;
		}
		for(j=0;j<CUBE_SIZE;j++) {
    357e:	8f ef       	ldi	r24, 0xFF	; 255
    3580:	e8 16       	cp	r14, r24
    3582:	8f ef       	ldi	r24, 0xFF	; 255
    3584:	f8 06       	cpc	r15, r24
    3586:	09 f0       	breq	.+2      	; 0x358a <planes_in_order+0x134>
    3588:	99 cf       	rjmp	.-206    	; 0x34bc <planes_in_order+0x66>
    358a:	08 94       	sec
    358c:	a1 1c       	adc	r10, r1
    358e:	b1 1c       	adc	r11, r1

//PLANES IN ORDER
void planes_in_order(int delay, int iterations) {
	int8_t i,j,k,b=1,c=1,m=0,s;
	s=CUBE_SIZE-1;
	for(i=0;i<iterations*2;i++) {
    3590:	a8 14       	cp	r10, r8
    3592:	b9 04       	cpc	r11, r9
    3594:	0c f4       	brge	.+2      	; 0x3598 <planes_in_order+0x142>
    3596:	7d cf       	rjmp	.-262    	; 0x3492 <planes_in_order+0x3c>
					delay_ms(delay);
				}
			}
		}
	}
}
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	1f 91       	pop	r17
    359e:	0f 91       	pop	r16
    35a0:	ff 90       	pop	r15
    35a2:	ef 90       	pop	r14
    35a4:	df 90       	pop	r13
    35a6:	cf 90       	pop	r12
    35a8:	bf 90       	pop	r11
    35aa:	af 90       	pop	r10
    35ac:	9f 90       	pop	r9
    35ae:	8f 90       	pop	r8
    35b0:	7f 90       	pop	r7
    35b2:	6f 90       	pop	r6
    35b4:	5f 90       	pop	r5
    35b6:	4f 90       	pop	r4
    35b8:	3f 90       	pop	r3
    35ba:	2f 90       	pop	r2
    35bc:	08 95       	ret

000035be <effect_stringfly2>:
	}
}
*/

void effect_stringfly2(char * str)
{
    35be:	2f 92       	push	r2
    35c0:	3f 92       	push	r3
    35c2:	4f 92       	push	r4
    35c4:	5f 92       	push	r5
    35c6:	6f 92       	push	r6
    35c8:	7f 92       	push	r7
    35ca:	8f 92       	push	r8
    35cc:	9f 92       	push	r9
    35ce:	af 92       	push	r10
    35d0:	bf 92       	push	r11
    35d2:	cf 92       	push	r12
    35d4:	df 92       	push	r13
    35d6:	ef 92       	push	r14
    35d8:	ff 92       	push	r15
    35da:	0f 93       	push	r16
    35dc:	1f 93       	push	r17
    35de:	df 93       	push	r29
    35e0:	cf 93       	push	r28
    35e2:	00 d0       	rcall	.+0      	; 0x35e4 <effect_stringfly2+0x26>
    35e4:	00 d0       	rcall	.+0      	; 0x35e6 <effect_stringfly2+0x28>
    35e6:	0f 92       	push	r0
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
    35ec:	3c 01       	movw	r6, r24
	
	unsigned char chr[5];
	
	while (*str)
	{
		font_getchar(*str++, chr);
    35ee:	2e 01       	movw	r4, r28
    35f0:	08 94       	sec
    35f2:	41 1c       	adc	r4, r1
    35f4:	51 1c       	adc	r5, r1
		
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80>>y)))
    35f6:	e0 e8       	ldi	r30, 0x80	; 128
    35f8:	2e 2e       	mov	r2, r30
    35fa:	31 2c       	mov	r3, r1
    35fc:	84 c0       	rjmp	.+264    	; 0x3706 <effect_stringfly2+0x148>
	
	unsigned char chr[5];
	
	while (*str)
	{
		font_getchar(*str++, chr);
    35fe:	b2 01       	movw	r22, r4
    3600:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <font_getchar>
    3604:	ee 24       	eor	r14, r14
    3606:	ff 24       	eor	r15, r15
    3608:	20 c0       	rjmp	.+64     	; 0x364a <effect_stringfly2+0x8c>
		
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80>>y)))
    360a:	91 01       	movw	r18, r2
    360c:	00 2e       	mov	r0, r16
    360e:	02 c0       	rjmp	.+4      	; 0x3614 <effect_stringfly2+0x56>
    3610:	35 95       	asr	r19
    3612:	27 95       	ror	r18
    3614:	0a 94       	dec	r0
    3616:	e2 f7       	brpl	.-8      	; 0x3610 <effect_stringfly2+0x52>
    3618:	f5 01       	movw	r30, r10
    361a:	80 81       	ld	r24, Z
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	28 23       	and	r18, r24
    3620:	39 23       	and	r19, r25
    3622:	23 2b       	or	r18, r19
    3624:	31 f0       	breq	.+12     	; 0x3632 <effect_stringfly2+0x74>
				{
					setvoxel(7,x+2,y);
    3626:	87 e0       	ldi	r24, 0x07	; 7
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	b6 01       	movw	r22, r12
    362c:	a8 01       	movw	r20, r16
    362e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
	{
		font_getchar(*str++, chr);
		
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
    3632:	0f 5f       	subi	r16, 0xFF	; 255
    3634:	1f 4f       	sbci	r17, 0xFF	; 255
    3636:	08 30       	cpi	r16, 0x08	; 8
    3638:	11 05       	cpc	r17, r1
    363a:	39 f7       	brne	.-50     	; 0x360a <effect_stringfly2+0x4c>
	
	while (*str)
	{
		font_getchar(*str++, chr);
		
		for (x = 0; x < 5; x++)
    363c:	08 94       	sec
    363e:	e1 1c       	adc	r14, r1
    3640:	f1 1c       	adc	r15, r1
    3642:	f5 e0       	ldi	r31, 0x05	; 5
    3644:	ef 16       	cp	r14, r31
    3646:	f1 04       	cpc	r15, r1
    3648:	59 f0       	breq	.+22     	; 0x3660 <effect_stringfly2+0xa2>
    364a:	00 e0       	ldi	r16, 0x00	; 0
    364c:	10 e0       	ldi	r17, 0x00	; 0
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80>>y)))
    364e:	52 01       	movw	r10, r4
    3650:	ae 0c       	add	r10, r14
    3652:	bf 1c       	adc	r11, r15
				{
					setvoxel(7,x+2,y);
    3654:	72 e0       	ldi	r23, 0x02	; 2
    3656:	c7 2e       	mov	r12, r23
    3658:	d1 2c       	mov	r13, r1
    365a:	ce 0c       	add	r12, r14
    365c:	df 1c       	adc	r13, r15
    365e:	d5 cf       	rjmp	.-86     	; 0x360a <effect_stringfly2+0x4c>
	
	while (*str)
	{
		font_getchar(*str++, chr);
		
		for (x = 0; x < 5; x++)
    3660:	aa 24       	eor	r10, r10
    3662:	bb 24       	eor	r11, r11
			}
		}
		
		for (ii = 0; ii<6; ii++)
		{
			delay_ms(1500);
    3664:	8c ed       	ldi	r24, 0xDC	; 220
    3666:	95 e0       	ldi	r25, 0x05	; 5
    3668:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    366c:	cc 24       	eor	r12, r12
    366e:	dd 24       	eor	r13, r13
    3670:	23 c0       	rjmp	.+70     	; 0x36b8 <effect_stringfly2+0xfa>
			{
				for (x = 0; x < 8; x++)
				{
					for (y = 0; y < 8; y++)
					{
						state = getvoxel(i+1,x,y);
    3672:	c4 01       	movw	r24, r8
    3674:	b7 01       	movw	r22, r14
    3676:	a8 01       	movw	r20, r16
    3678:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    367c:	28 2f       	mov	r18, r24
						altervoxel(i,x,y,state);
    367e:	c6 01       	movw	r24, r12
    3680:	b7 01       	movw	r22, r14
    3682:	a8 01       	movw	r20, r16
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	0e 94 26 02 	call	0x44c	; 0x44c <altervoxel>
			delay_ms(1500);
			for (i = 0; i < 7; i++)
			{
				for (x = 0; x < 8; x++)
				{
					for (y = 0; y < 8; y++)
    368a:	0f 5f       	subi	r16, 0xFF	; 255
    368c:	1f 4f       	sbci	r17, 0xFF	; 255
    368e:	08 30       	cpi	r16, 0x08	; 8
    3690:	11 05       	cpc	r17, r1
    3692:	79 f7       	brne	.-34     	; 0x3672 <effect_stringfly2+0xb4>
		for (ii = 0; ii<6; ii++)
		{
			delay_ms(1500);
			for (i = 0; i < 7; i++)
			{
				for (x = 0; x < 8; x++)
    3694:	08 94       	sec
    3696:	e1 1c       	adc	r14, r1
    3698:	f1 1c       	adc	r15, r1
    369a:	88 e0       	ldi	r24, 0x08	; 8
    369c:	e8 16       	cp	r14, r24
    369e:	f1 04       	cpc	r15, r1
    36a0:	19 f0       	breq	.+6      	; 0x36a8 <effect_stringfly2+0xea>
    36a2:	00 e0       	ldi	r16, 0x00	; 0
    36a4:	10 e0       	ldi	r17, 0x00	; 0
    36a6:	e5 cf       	rjmp	.-54     	; 0x3672 <effect_stringfly2+0xb4>
    36a8:	64 01       	movw	r12, r8
		}
		
		for (ii = 0; ii<6; ii++)
		{
			delay_ms(1500);
			for (i = 0; i < 7; i++)
    36aa:	e7 e0       	ldi	r30, 0x07	; 7
    36ac:	8e 16       	cp	r8, r30
    36ae:	91 04       	cpc	r9, r1
    36b0:	19 f4       	brne	.+6      	; 0x36b8 <effect_stringfly2+0xfa>
    36b2:	ee 24       	eor	r14, r14
    36b4:	ff 24       	eor	r15, r15
    36b6:	19 c0       	rjmp	.+50     	; 0x36ea <effect_stringfly2+0x12c>
    36b8:	ee 24       	eor	r14, r14
    36ba:	ff 24       	eor	r15, r15
	}
}
*/

void effect_stringfly2(char * str)
{
    36bc:	46 01       	movw	r8, r12
    36be:	08 94       	sec
    36c0:	81 1c       	adc	r8, r1
    36c2:	91 1c       	adc	r9, r1
    36c4:	ee cf       	rjmp	.-36     	; 0x36a2 <effect_stringfly2+0xe4>
			}
			for (x = 0; x < 8; x++)
			{
				for (y = 0; y < 8; y++)
				{
					clrvoxel(7,x,y);
    36c6:	87 e0       	ldi	r24, 0x07	; 7
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	b7 01       	movw	r22, r14
    36cc:	a8 01       	movw	r20, r16
    36ce:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
					}
				}
			}
			for (x = 0; x < 8; x++)
			{
				for (y = 0; y < 8; y++)
    36d2:	0f 5f       	subi	r16, 0xFF	; 255
    36d4:	1f 4f       	sbci	r17, 0xFF	; 255
    36d6:	08 30       	cpi	r16, 0x08	; 8
    36d8:	11 05       	cpc	r17, r1
    36da:	a9 f7       	brne	.-22     	; 0x36c6 <effect_stringfly2+0x108>
						state = getvoxel(i+1,x,y);
						altervoxel(i,x,y,state);
					}
				}
			}
			for (x = 0; x < 8; x++)
    36dc:	08 94       	sec
    36de:	e1 1c       	adc	r14, r1
    36e0:	f1 1c       	adc	r15, r1
    36e2:	f8 e0       	ldi	r31, 0x08	; 8
    36e4:	ef 16       	cp	r14, r31
    36e6:	f1 04       	cpc	r15, r1
    36e8:	19 f0       	breq	.+6      	; 0x36f0 <effect_stringfly2+0x132>
    36ea:	00 e0       	ldi	r16, 0x00	; 0
    36ec:	10 e0       	ldi	r17, 0x00	; 0
    36ee:	eb cf       	rjmp	.-42     	; 0x36c6 <effect_stringfly2+0x108>
					setvoxel(7,x+2,y);
				}
			}
		}
		
		for (ii = 0; ii<6; ii++)
    36f0:	08 94       	sec
    36f2:	a1 1c       	adc	r10, r1
    36f4:	b1 1c       	adc	r11, r1
    36f6:	86 e0       	ldi	r24, 0x06	; 6
    36f8:	a8 16       	cp	r10, r24
    36fa:	b1 04       	cpc	r11, r1
    36fc:	09 f0       	breq	.+2      	; 0x3700 <effect_stringfly2+0x142>
    36fe:	b2 cf       	rjmp	.-156    	; 0x3664 <effect_stringfly2+0xa6>
	
	unsigned char chr[5];
	
	while (*str)
	{
		font_getchar(*str++, chr);
    3700:	08 94       	sec
    3702:	61 1c       	adc	r6, r1
    3704:	71 1c       	adc	r7, r1
	int x,y,i,ii;
	int state;
	
	unsigned char chr[5];
	
	while (*str)
    3706:	f3 01       	movw	r30, r6
    3708:	80 81       	ld	r24, Z
    370a:	88 23       	and	r24, r24
    370c:	09 f0       	breq	.+2      	; 0x3710 <effect_stringfly2+0x152>
    370e:	77 cf       	rjmp	.-274    	; 0x35fe <effect_stringfly2+0x40>
    3710:	aa 24       	eor	r10, r10
    3712:	bb 24       	eor	r11, r11
			}
		}
	}
	for (ii = 0; ii<8; ii++)
	{
		delay_ms(1500);
    3714:	8c ed       	ldi	r24, 0xDC	; 220
    3716:	95 e0       	ldi	r25, 0x05	; 5
    3718:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    371c:	cc 24       	eor	r12, r12
    371e:	dd 24       	eor	r13, r13
    3720:	23 c0       	rjmp	.+70     	; 0x3768 <effect_stringfly2+0x1aa>
		{
			for (x = 0; x < 8; x++)
			{
				for (y = 0; y < 8; y++)
				{
					state = getvoxel(i+1,x,y);
    3722:	c4 01       	movw	r24, r8
    3724:	b7 01       	movw	r22, r14
    3726:	a8 01       	movw	r20, r16
    3728:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    372c:	28 2f       	mov	r18, r24
					altervoxel(i,x,y,state);
    372e:	c6 01       	movw	r24, r12
    3730:	b7 01       	movw	r22, r14
    3732:	a8 01       	movw	r20, r16
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	0e 94 26 02 	call	0x44c	; 0x44c <altervoxel>
		delay_ms(1500);
		for (i = 0; i < 7; i++)
		{
			for (x = 0; x < 8; x++)
			{
				for (y = 0; y < 8; y++)
    373a:	0f 5f       	subi	r16, 0xFF	; 255
    373c:	1f 4f       	sbci	r17, 0xFF	; 255
    373e:	08 30       	cpi	r16, 0x08	; 8
    3740:	11 05       	cpc	r17, r1
    3742:	79 f7       	brne	.-34     	; 0x3722 <effect_stringfly2+0x164>
	for (ii = 0; ii<8; ii++)
	{
		delay_ms(1500);
		for (i = 0; i < 7; i++)
		{
			for (x = 0; x < 8; x++)
    3744:	08 94       	sec
    3746:	e1 1c       	adc	r14, r1
    3748:	f1 1c       	adc	r15, r1
    374a:	f8 e0       	ldi	r31, 0x08	; 8
    374c:	ef 16       	cp	r14, r31
    374e:	f1 04       	cpc	r15, r1
    3750:	19 f0       	breq	.+6      	; 0x3758 <effect_stringfly2+0x19a>
    3752:	00 e0       	ldi	r16, 0x00	; 0
    3754:	10 e0       	ldi	r17, 0x00	; 0
    3756:	e5 cf       	rjmp	.-54     	; 0x3722 <effect_stringfly2+0x164>
    3758:	64 01       	movw	r12, r8
		}
	}
	for (ii = 0; ii<8; ii++)
	{
		delay_ms(1500);
		for (i = 0; i < 7; i++)
    375a:	87 e0       	ldi	r24, 0x07	; 7
    375c:	88 16       	cp	r8, r24
    375e:	91 04       	cpc	r9, r1
    3760:	19 f4       	brne	.+6      	; 0x3768 <effect_stringfly2+0x1aa>
    3762:	ee 24       	eor	r14, r14
    3764:	ff 24       	eor	r15, r15
    3766:	19 c0       	rjmp	.+50     	; 0x379a <effect_stringfly2+0x1dc>
    3768:	ee 24       	eor	r14, r14
    376a:	ff 24       	eor	r15, r15
	}
}
*/

void effect_stringfly2(char * str)
{
    376c:	46 01       	movw	r8, r12
    376e:	08 94       	sec
    3770:	81 1c       	adc	r8, r1
    3772:	91 1c       	adc	r9, r1
    3774:	ee cf       	rjmp	.-36     	; 0x3752 <effect_stringfly2+0x194>
		}
		for (x = 0; x < 8; x++)
		{
			for (y = 0; y < 8; y++)
			{
				clrvoxel(7,x,y);
    3776:	87 e0       	ldi	r24, 0x07	; 7
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	b7 01       	movw	r22, r14
    377c:	a8 01       	movw	r20, r16
    377e:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
				}
			}
		}
		for (x = 0; x < 8; x++)
		{
			for (y = 0; y < 8; y++)
    3782:	0f 5f       	subi	r16, 0xFF	; 255
    3784:	1f 4f       	sbci	r17, 0xFF	; 255
    3786:	08 30       	cpi	r16, 0x08	; 8
    3788:	11 05       	cpc	r17, r1
    378a:	a9 f7       	brne	.-22     	; 0x3776 <effect_stringfly2+0x1b8>
					state = getvoxel(i+1,x,y);
					altervoxel(i,x,y,state);
				}
			}
		}
		for (x = 0; x < 8; x++)
    378c:	08 94       	sec
    378e:	e1 1c       	adc	r14, r1
    3790:	f1 1c       	adc	r15, r1
    3792:	e8 e0       	ldi	r30, 0x08	; 8
    3794:	ee 16       	cp	r14, r30
    3796:	f1 04       	cpc	r15, r1
    3798:	19 f0       	breq	.+6      	; 0x37a0 <effect_stringfly2+0x1e2>
    379a:	00 e0       	ldi	r16, 0x00	; 0
    379c:	10 e0       	ldi	r17, 0x00	; 0
    379e:	eb cf       	rjmp	.-42     	; 0x3776 <effect_stringfly2+0x1b8>
					clrvoxel(7,x,y);
				}
			}
		}
	}
	for (ii = 0; ii<8; ii++)
    37a0:	08 94       	sec
    37a2:	a1 1c       	adc	r10, r1
    37a4:	b1 1c       	adc	r11, r1
    37a6:	f8 e0       	ldi	r31, 0x08	; 8
    37a8:	af 16       	cp	r10, r31
    37aa:	b1 04       	cpc	r11, r1
    37ac:	09 f0       	breq	.+2      	; 0x37b0 <effect_stringfly2+0x1f2>
    37ae:	b2 cf       	rjmp	.-156    	; 0x3714 <effect_stringfly2+0x156>
				clrvoxel(7,x,y);
			}
		}
	}
	
}
    37b0:	0f 90       	pop	r0
    37b2:	0f 90       	pop	r0
    37b4:	0f 90       	pop	r0
    37b6:	0f 90       	pop	r0
    37b8:	0f 90       	pop	r0
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	1f 91       	pop	r17
    37c0:	0f 91       	pop	r16
    37c2:	ff 90       	pop	r15
    37c4:	ef 90       	pop	r14
    37c6:	df 90       	pop	r13
    37c8:	cf 90       	pop	r12
    37ca:	bf 90       	pop	r11
    37cc:	af 90       	pop	r10
    37ce:	9f 90       	pop	r9
    37d0:	8f 90       	pop	r8
    37d2:	7f 90       	pop	r7
    37d4:	6f 90       	pop	r6
    37d6:	5f 90       	pop	r5
    37d8:	4f 90       	pop	r4
    37da:	3f 90       	pop	r3
    37dc:	2f 90       	pop	r2
    37de:	08 95       	ret

000037e0 <effect_pathmove>:
		setvoxel(4,0,i%8);
		delay_ms(delay);
		effect_pathmove(path, 28);
	}
}
void effect_pathmove (unsigned char *path, int length){
    37e0:	cf 92       	push	r12
    37e2:	df 92       	push	r13
    37e4:	ef 92       	push	r14
    37e6:	ff 92       	push	r15
    37e8:	0f 93       	push	r16
    37ea:	1f 93       	push	r17
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
    37f0:	6c 01       	movw	r12, r24
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--){
    37f2:	7b 01       	movw	r14, r22
    37f4:	08 94       	sec
    37f6:	e1 08       	sbc	r14, r1
    37f8:	f1 08       	sbc	r15, r1
    37fa:	8b 01       	movw	r16, r22
    37fc:	02 50       	subi	r16, 0x02	; 2
    37fe:	10 40       	sbci	r17, 0x00	; 0
    3800:	08 0f       	add	r16, r24
    3802:	19 1f       	adc	r17, r25
    3804:	25 c0       	rjmp	.+74     	; 0x3850 <effect_pathmove+0x70>
    3806:	c0 e0       	ldi	r28, 0x00	; 0
    3808:	d0 e0       	ldi	r29, 0x00	; 0
		for (z=0;z<8;z++){
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
    380a:	f8 01       	movw	r30, r16
    380c:	80 81       	ld	r24, Z
    380e:	68 2f       	mov	r22, r24
    3810:	70 e0       	ldi	r23, 0x00	; 0
    3812:	6f 70       	andi	r22, 0x0F	; 15
    3814:	70 70       	andi	r23, 0x00	; 0
    3816:	82 95       	swap	r24
    3818:	8f 70       	andi	r24, 0x0F	; 15
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	ae 01       	movw	r20, r28
    381e:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    3822:	28 2f       	mov	r18, r24
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
    3824:	f8 01       	movw	r30, r16
    3826:	81 81       	ldd	r24, Z+1	; 0x01
    3828:	68 2f       	mov	r22, r24
    382a:	70 e0       	ldi	r23, 0x00	; 0
    382c:	6f 70       	andi	r22, 0x0F	; 15
    382e:	70 70       	andi	r23, 0x00	; 0
    3830:	82 95       	swap	r24
    3832:	8f 70       	andi	r24, 0x0F	; 15
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	ae 01       	movw	r20, r28
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	0e 94 26 02 	call	0x44c	; 0x44c <altervoxel>
void effect_pathmove (unsigned char *path, int length){
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--){
		for (z=0;z<8;z++){
    383e:	21 96       	adiw	r28, 0x01	; 1
    3840:	c8 30       	cpi	r28, 0x08	; 8
    3842:	d1 05       	cpc	r29, r1
    3844:	11 f7       	brne	.-60     	; 0x380a <effect_pathmove+0x2a>
}
void effect_pathmove (unsigned char *path, int length){
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--){
    3846:	08 94       	sec
    3848:	e1 08       	sbc	r14, r1
    384a:	f1 08       	sbc	r15, r1
    384c:	01 50       	subi	r16, 0x01	; 1
    384e:	10 40       	sbci	r17, 0x00	; 0
    3850:	1e 14       	cp	r1, r14
    3852:	1f 04       	cpc	r1, r15
    3854:	c4 f2       	brlt	.-80     	; 0x3806 <effect_pathmove+0x26>
    3856:	c0 e0       	ldi	r28, 0x00	; 0
    3858:	d0 e0       	ldi	r29, 0x00	; 0
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i=0;i<8;i++) {
		clrvoxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
    385a:	f6 01       	movw	r30, r12
    385c:	80 81       	ld	r24, Z
    385e:	68 2f       	mov	r22, r24
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	6f 70       	andi	r22, 0x0F	; 15
    3864:	70 70       	andi	r23, 0x00	; 0
    3866:	82 95       	swap	r24
    3868:	8f 70       	andi	r24, 0x0F	; 15
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	ae 01       	movw	r20, r28
    386e:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
		for (z=0;z<8;z++){
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i=0;i<8;i++) {
    3872:	21 96       	adiw	r28, 0x01	; 1
    3874:	c8 30       	cpi	r28, 0x08	; 8
    3876:	d1 05       	cpc	r29, r1
    3878:	81 f7       	brne	.-32     	; 0x385a <effect_pathmove+0x7a>
		clrvoxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
	}
}
    387a:	df 91       	pop	r29
    387c:	cf 91       	pop	r28
    387e:	1f 91       	pop	r17
    3880:	0f 91       	pop	r16
    3882:	ff 90       	pop	r15
    3884:	ef 90       	pop	r14
    3886:	df 90       	pop	r13
    3888:	cf 90       	pop	r12
    388a:	08 95       	ret

0000388c <effect_random_filler>:
	}
}

//EFFECT 2
// Set or clear exactly 512 voxels in a random order.
void effect_random_filler (int delay, int state){
    388c:	8f 92       	push	r8
    388e:	9f 92       	push	r9
    3890:	af 92       	push	r10
    3892:	bf 92       	push	r11
    3894:	cf 92       	push	r12
    3896:	df 92       	push	r13
    3898:	ef 92       	push	r14
    389a:	ff 92       	push	r15
    389c:	0f 93       	push	r16
    389e:	1f 93       	push	r17
    38a0:	cf 93       	push	r28
    38a2:	df 93       	push	r29
    38a4:	4c 01       	movw	r8, r24
    38a6:	8b 01       	movw	r16, r22
	int x,y,z;
	int loop = 0;

	if (state == 1){
    38a8:	61 30       	cpi	r22, 0x01	; 1
    38aa:	71 05       	cpc	r23, r1
    38ac:	11 f4       	brne	.+4      	; 0x38b2 <effect_random_filler+0x26>
		fill(0x00);
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	01 c0       	rjmp	.+2      	; 0x38b4 <effect_random_filler+0x28>
	}
	else{
		fill(0xff);
    38b2:	8f ef       	ldi	r24, 0xFF	; 255
    38b4:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    38b8:	c0 e0       	ldi	r28, 0x00	; 0
    38ba:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	while (loop<511){
		x = rand()%8;
    38bc:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    38c0:	68 e0       	ldi	r22, 0x08	; 8
    38c2:	70 e0       	ldi	r23, 0x00	; 0
    38c4:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    38c8:	b8 2e       	mov	r11, r24
    38ca:	a9 2e       	mov	r10, r25
		y = rand()%8;
    38cc:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    38d0:	68 e0       	ldi	r22, 0x08	; 8
    38d2:	70 e0       	ldi	r23, 0x00	; 0
    38d4:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    38d8:	d8 2e       	mov	r13, r24
    38da:	c9 2e       	mov	r12, r25
		z = rand()%8;
    38dc:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    38e0:	68 e0       	ldi	r22, 0x08	; 8
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    38e8:	f8 2e       	mov	r15, r24
    38ea:	e9 2e       	mov	r14, r25

		if ((state == 0 && getvoxel(x,y,z) == 0x01) || (state == 1 && getvoxel(x,y,z) == 0x00)){
    38ec:	01 15       	cp	r16, r1
    38ee:	11 05       	cpc	r17, r1
    38f0:	59 f4       	brne	.+22     	; 0x3908 <effect_random_filler+0x7c>
    38f2:	8b 2d       	mov	r24, r11
    38f4:	9a 2d       	mov	r25, r10
    38f6:	6d 2d       	mov	r22, r13
    38f8:	7c 2d       	mov	r23, r12
    38fa:	4f 2d       	mov	r20, r15
    38fc:	5e 2d       	mov	r21, r14
    38fe:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    3902:	81 30       	cpi	r24, 0x01	; 1
    3904:	d9 f4       	brne	.+54     	; 0x393c <effect_random_filler+0xb0>
    3906:	0d c0       	rjmp	.+26     	; 0x3922 <effect_random_filler+0x96>
    3908:	01 30       	cpi	r16, 0x01	; 1
    390a:	11 05       	cpc	r17, r1
    390c:	b9 f4       	brne	.+46     	; 0x393c <effect_random_filler+0xb0>
    390e:	8b 2d       	mov	r24, r11
    3910:	9a 2d       	mov	r25, r10
    3912:	6d 2d       	mov	r22, r13
    3914:	7c 2d       	mov	r23, r12
    3916:	4f 2d       	mov	r20, r15
    3918:	5e 2d       	mov	r21, r14
    391a:	0e 94 03 02 	call	0x406	; 0x406 <getvoxel>
    391e:	88 23       	and	r24, r24
    3920:	69 f4       	brne	.+26     	; 0x393c <effect_random_filler+0xb0>
			altervoxel(x,y,z,state);
    3922:	8b 2d       	mov	r24, r11
    3924:	9a 2d       	mov	r25, r10
    3926:	6d 2d       	mov	r22, r13
    3928:	7c 2d       	mov	r23, r12
    392a:	4f 2d       	mov	r20, r15
    392c:	5e 2d       	mov	r21, r14
    392e:	98 01       	movw	r18, r16
    3930:	0e 94 26 02 	call	0x44c	; 0x44c <altervoxel>
			delay_ms(delay);
    3934:	c4 01       	movw	r24, r8
    3936:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			loop++;
    393a:	21 96       	adiw	r28, 0x01	; 1
	}
	else{
		fill(0xff);
	}
	
	while (loop<511){
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	cf 3f       	cpi	r28, 0xFF	; 255
    3940:	d8 07       	cpc	r29, r24
    3942:	0c f4       	brge	.+2      	; 0x3946 <effect_random_filler+0xba>
    3944:	bb cf       	rjmp	.-138    	; 0x38bc <effect_random_filler+0x30>
			altervoxel(x,y,z,state);
			delay_ms(delay);
			loop++;
		}	
	}
}
    3946:	df 91       	pop	r29
    3948:	cf 91       	pop	r28
    394a:	1f 91       	pop	r17
    394c:	0f 91       	pop	r16
    394e:	ff 90       	pop	r15
    3950:	ef 90       	pop	r14
    3952:	df 90       	pop	r13
    3954:	cf 90       	pop	r12
    3956:	bf 90       	pop	r11
    3958:	af 90       	pop	r10
    395a:	9f 90       	pop	r9
    395c:	8f 90       	pop	r8
    395e:	08 95       	ret

00003960 <effect_path_text>:
		fill(0x00);
	}
}

//EFFECT 14
void effect_path_text (int delay, char *str){
    3960:	2f 92       	push	r2
    3962:	3f 92       	push	r3
    3964:	4f 92       	push	r4
    3966:	5f 92       	push	r5
    3968:	6f 92       	push	r6
    396a:	7f 92       	push	r7
    396c:	8f 92       	push	r8
    396e:	9f 92       	push	r9
    3970:	af 92       	push	r10
    3972:	bf 92       	push	r11
    3974:	cf 92       	push	r12
    3976:	df 92       	push	r13
    3978:	ef 92       	push	r14
    397a:	ff 92       	push	r15
    397c:	0f 93       	push	r16
    397e:	1f 93       	push	r17
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
    3988:	a1 97       	sbiw	r28, 0x21	; 33
    398a:	0f b6       	in	r0, 0x3f	; 63
    398c:	f8 94       	cli
    398e:	de bf       	out	0x3e, r29	; 62
    3990:	0f be       	out	0x3f, r0	; 63
    3992:	cd bf       	out	0x3d, r28	; 61
    3994:	3c 01       	movw	r6, r24
    3996:	6b 01       	movw	r12, r22
	int z, i,ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
    3998:	a6 e0       	ldi	r26, 0x06	; 6
    399a:	8a 2e       	mov	r8, r26
    399c:	91 2c       	mov	r9, r1
    399e:	8c 0e       	add	r8, r28
    39a0:	9d 1e       	adc	r9, r29
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	b4 01       	movw	r22, r8
    39a6:	4c e1       	ldi	r20, 0x1C	; 28
    39a8:	50 e0       	ldi	r21, 0x00	; 0
    39aa:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <font_getpath>
	unsigned char chr[5];
	unsigned char stripe;
	
	while (*str){
		//charfly(*str++, direction, axis, mode, delay);
		font_getchar(*str++, chr);
    39ae:	1e 01       	movw	r2, r28
    39b0:	08 94       	sec
    39b2:	21 1c       	adc	r2, r1
    39b4:	31 1c       	adc	r3, r1
				}
				else {
					clrvoxel(0,7,z);
				}
			}
			effect_pathmove(path, 28);
    39b6:	24 01       	movw	r4, r8
    39b8:	43 c0       	rjmp	.+134    	; 0x3a40 <effect_path_text+0xe0>
	unsigned char chr[5];
	unsigned char stripe;
	
	while (*str){
		//charfly(*str++, direction, axis, mode, delay);
		font_getchar(*str++, chr);
    39ba:	b1 01       	movw	r22, r2
    39bc:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <font_getchar>
    39c0:	71 01       	movw	r14, r2
		
		for (ii=0;ii<5;ii++){
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
    39c2:	f7 01       	movw	r30, r14
    39c4:	80 81       	ld	r24, Z
    39c6:	00 e0       	ldi	r16, 0x00	; 0
    39c8:	10 e0       	ldi	r17, 0x00	; 0
			
			for (z=0;z<8;z++){
				if ((stripe>>(7-z)) & 0x01) {
    39ca:	a8 2e       	mov	r10, r24
    39cc:	bb 24       	eor	r11, r11
    39ce:	87 e0       	ldi	r24, 0x07	; 7
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	80 1b       	sub	r24, r16
    39d4:	91 0b       	sbc	r25, r17
    39d6:	95 01       	movw	r18, r10
    39d8:	02 c0       	rjmp	.+4      	; 0x39de <effect_path_text+0x7e>
    39da:	35 95       	asr	r19
    39dc:	27 95       	ror	r18
    39de:	8a 95       	dec	r24
    39e0:	e2 f7       	brpl	.-8      	; 0x39da <effect_path_text+0x7a>
    39e2:	20 ff       	sbrs	r18, 0
    39e4:	08 c0       	rjmp	.+16     	; 0x39f6 <effect_path_text+0x96>
					setvoxel(0,7,z);
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	67 e0       	ldi	r22, 0x07	; 7
    39ec:	70 e0       	ldi	r23, 0x00	; 0
    39ee:	a8 01       	movw	r20, r16
    39f0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
    39f4:	07 c0       	rjmp	.+14     	; 0x3a04 <effect_path_text+0xa4>
				}
				else {
					clrvoxel(0,7,z);
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	67 e0       	ldi	r22, 0x07	; 7
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	a8 01       	movw	r20, r16
    3a00:	0e 94 90 01 	call	0x320	; 0x320 <clrvoxel>
		
		for (ii=0;ii<5;ii++){
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
			
			for (z=0;z<8;z++){
    3a04:	0f 5f       	subi	r16, 0xFF	; 255
    3a06:	1f 4f       	sbci	r17, 0xFF	; 255
    3a08:	08 30       	cpi	r16, 0x08	; 8
    3a0a:	11 05       	cpc	r17, r1
    3a0c:	01 f7       	brne	.-64     	; 0x39ce <effect_path_text+0x6e>
				}
				else {
					clrvoxel(0,7,z);
				}
			}
			effect_pathmove(path, 28);
    3a0e:	c4 01       	movw	r24, r8
    3a10:	6c e1       	ldi	r22, 0x1C	; 28
    3a12:	70 e0       	ldi	r23, 0x00	; 0
    3a14:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <effect_pathmove>
			delay_ms(delay);
    3a18:	c3 01       	movw	r24, r6
    3a1a:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    3a1e:	08 94       	sec
    3a20:	e1 1c       	adc	r14, r1
    3a22:	f1 1c       	adc	r15, r1
	
	while (*str){
		//charfly(*str++, direction, axis, mode, delay);
		font_getchar(*str++, chr);
		
		for (ii=0;ii<5;ii++){
    3a24:	e4 14       	cp	r14, r4
    3a26:	f5 04       	cpc	r15, r5
    3a28:	61 f6       	brne	.-104    	; 0x39c2 <effect_path_text+0x62>
	unsigned char chr[5];
	unsigned char stripe;
	
	while (*str){
		//charfly(*str++, direction, axis, mode, delay);
		font_getchar(*str++, chr);
    3a2a:	08 94       	sec
    3a2c:	c1 1c       	adc	r12, r1
    3a2e:	d1 1c       	adc	r13, r1
				}
			}
			effect_pathmove(path, 28);
			delay_ms(delay);
		}
		effect_pathmove(path, 28);
    3a30:	c2 01       	movw	r24, r4
    3a32:	6c e1       	ldi	r22, 0x1C	; 28
    3a34:	70 e0       	ldi	r23, 0x00	; 0
    3a36:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <effect_pathmove>
		delay_ms(delay);
    3a3a:	c3 01       	movw	r24, r6
    3a3c:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
	font_getpath(0,path,28);
	
	unsigned char chr[5];
	unsigned char stripe;
	
	while (*str){
    3a40:	f6 01       	movw	r30, r12
    3a42:	80 81       	ld	r24, Z
    3a44:	88 23       	and	r24, r24
    3a46:	09 f0       	breq	.+2      	; 0x3a4a <effect_path_text+0xea>
    3a48:	b8 cf       	rjmp	.-144    	; 0x39ba <effect_path_text+0x5a>
    3a4a:	00 e0       	ldi	r16, 0x00	; 0
    3a4c:	10 e0       	ldi	r17, 0x00	; 0
		}
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
	for (i=0;i<28;i++){
		effect_pathmove(path, 28);
    3a4e:	f6 e0       	ldi	r31, 0x06	; 6
    3a50:	ef 2e       	mov	r14, r31
    3a52:	f1 2c       	mov	r15, r1
    3a54:	ec 0e       	add	r14, r28
    3a56:	fd 1e       	adc	r15, r29
    3a58:	c7 01       	movw	r24, r14
    3a5a:	6c e1       	ldi	r22, 0x1C	; 28
    3a5c:	70 e0       	ldi	r23, 0x00	; 0
    3a5e:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <effect_pathmove>
		delay_ms(delay);
    3a62:	c3 01       	movw	r24, r6
    3a64:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			delay_ms(delay);
		}
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
	for (i=0;i<28;i++){
    3a68:	0f 5f       	subi	r16, 0xFF	; 255
    3a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6c:	0c 31       	cpi	r16, 0x1C	; 28
    3a6e:	11 05       	cpc	r17, r1
    3a70:	99 f7       	brne	.-26     	; 0x3a58 <effect_path_text+0xf8>
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
}
    3a72:	a1 96       	adiw	r28, 0x21	; 33
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	1f 91       	pop	r17
    3a84:	0f 91       	pop	r16
    3a86:	ff 90       	pop	r15
    3a88:	ef 90       	pop	r14
    3a8a:	df 90       	pop	r13
    3a8c:	cf 90       	pop	r12
    3a8e:	bf 90       	pop	r11
    3a90:	af 90       	pop	r10
    3a92:	9f 90       	pop	r9
    3a94:	8f 90       	pop	r8
    3a96:	7f 90       	pop	r7
    3a98:	6f 90       	pop	r6
    3a9a:	5f 90       	pop	r5
    3a9c:	4f 90       	pop	r4
    3a9e:	3f 90       	pop	r3
    3aa0:	2f 90       	pop	r2
    3aa2:	08 95       	ret

00003aa4 <effect_rand_patharound>:
		clrvoxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
	}
}

//EFFECT 12
void effect_rand_patharound (int iterations, int delay){
    3aa4:	7f 92       	push	r7
    3aa6:	8f 92       	push	r8
    3aa8:	9f 92       	push	r9
    3aaa:	af 92       	push	r10
    3aac:	bf 92       	push	r11
    3aae:	cf 92       	push	r12
    3ab0:	df 92       	push	r13
    3ab2:	ef 92       	push	r14
    3ab4:	ff 92       	push	r15
    3ab6:	0f 93       	push	r16
    3ab8:	1f 93       	push	r17
    3aba:	df 93       	push	r29
    3abc:	cf 93       	push	r28
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	6c 97       	sbiw	r28, 0x1c	; 28
    3ac4:	0f b6       	in	r0, 0x3f	; 63
    3ac6:	f8 94       	cli
    3ac8:	de bf       	out	0x3e, r29	; 62
    3aca:	0f be       	out	0x3f, r0	; 63
    3acc:	cd bf       	out	0x3d, r28	; 61
    3ace:	4c 01       	movw	r8, r24
    3ad0:	5b 01       	movw	r10, r22
	int z, dz, i;
	z = 4;
	unsigned char path[28];
	
	font_getpath(0,path,28);
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	8e 01       	movw	r16, r28
    3ad6:	0f 5f       	subi	r16, 0xFF	; 255
    3ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    3ada:	b8 01       	movw	r22, r16
    3adc:	4c e1       	ldi	r20, 0x1C	; 28
    3ade:	50 e0       	ldi	r21, 0x00	; 0
    3ae0:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <font_getpath>
    3ae4:	84 e0       	ldi	r24, 0x04	; 4
    3ae6:	e8 2e       	mov	r14, r24
    3ae8:	f1 2c       	mov	r15, r1
    3aea:	cc 24       	eor	r12, r12
    3aec:	dd 24       	eor	r13, r13
			z = 7;
		}
		if (z<0) {
			z = 0;
		}
		effect_pathmove(path, 28);
    3aee:	70 2e       	mov	r7, r16
    3af0:	01 2f       	mov	r16, r17
    3af2:	2a c0       	rjmp	.+84     	; 0x3b48 <effect_rand_patharound+0xa4>
	unsigned char path[28];
	
	font_getpath(0,path,28);
	
	for (i = 0; i < iterations; i++){
		dz = ((rand()%3)-1);
    3af4:	0e 94 a0 21 	call	0x4340	; 0x4340 <rand>
    3af8:	08 94       	sec
    3afa:	e1 08       	sbc	r14, r1
    3afc:	f1 08       	sbc	r15, r1
		z += dz;
    3afe:	63 e0       	ldi	r22, 0x03	; 3
    3b00:	70 e0       	ldi	r23, 0x00	; 0
    3b02:	0e 94 28 21 	call	0x4250	; 0x4250 <__divmodhi4>
    3b06:	e8 0e       	add	r14, r24
    3b08:	f9 1e       	adc	r15, r25
		
		if (z>7) {
    3b0a:	88 e0       	ldi	r24, 0x08	; 8
    3b0c:	e8 16       	cp	r14, r24
    3b0e:	f1 04       	cpc	r15, r1
    3b10:	24 f0       	brlt	.+8      	; 0x3b1a <effect_rand_patharound+0x76>
    3b12:	b7 e0       	ldi	r27, 0x07	; 7
    3b14:	eb 2e       	mov	r14, r27
    3b16:	f1 2c       	mov	r15, r1
    3b18:	04 c0       	rjmp	.+8      	; 0x3b22 <effect_rand_patharound+0x7e>
			z = 7;
		}
		if (z<0) {
    3b1a:	f7 fe       	sbrs	r15, 7
    3b1c:	02 c0       	rjmp	.+4      	; 0x3b22 <effect_rand_patharound+0x7e>
    3b1e:	ee 24       	eor	r14, r14
    3b20:	ff 24       	eor	r15, r15
			z = 0;
		}
		effect_pathmove(path, 28);
    3b22:	87 2d       	mov	r24, r7
    3b24:	90 2f       	mov	r25, r16
    3b26:	6c e1       	ldi	r22, 0x1C	; 28
    3b28:	70 e0       	ldi	r23, 0x00	; 0
    3b2a:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <effect_pathmove>
		setvoxel(0,7,z);
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	67 e0       	ldi	r22, 0x07	; 7
    3b34:	70 e0       	ldi	r23, 0x00	; 0
    3b36:	a7 01       	movw	r20, r14
    3b38:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
		delay_ms(delay);
    3b3c:	c5 01       	movw	r24, r10
    3b3e:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
	z = 4;
	unsigned char path[28];
	
	font_getpath(0,path,28);
	
	for (i = 0; i < iterations; i++){
    3b42:	08 94       	sec
    3b44:	c1 1c       	adc	r12, r1
    3b46:	d1 1c       	adc	r13, r1
    3b48:	c8 14       	cp	r12, r8
    3b4a:	d9 04       	cpc	r13, r9
    3b4c:	9c f2       	brlt	.-90     	; 0x3af4 <effect_rand_patharound+0x50>
		}
		effect_pathmove(path, 28);
		setvoxel(0,7,z);
		delay_ms(delay);
	}
}
    3b4e:	6c 96       	adiw	r28, 0x1c	; 28
    3b50:	0f b6       	in	r0, 0x3f	; 63
    3b52:	f8 94       	cli
    3b54:	de bf       	out	0x3e, r29	; 62
    3b56:	0f be       	out	0x3f, r0	; 63
    3b58:	cd bf       	out	0x3d, r28	; 61
    3b5a:	cf 91       	pop	r28
    3b5c:	df 91       	pop	r29
    3b5e:	1f 91       	pop	r17
    3b60:	0f 91       	pop	r16
    3b62:	ff 90       	pop	r15
    3b64:	ef 90       	pop	r14
    3b66:	df 90       	pop	r13
    3b68:	cf 90       	pop	r12
    3b6a:	bf 90       	pop	r11
    3b6c:	af 90       	pop	r10
    3b6e:	9f 90       	pop	r9
    3b70:	8f 90       	pop	r8
    3b72:	7f 90       	pop	r7
    3b74:	08 95       	ret

00003b76 <effect_pathspiral>:
	
}

//EFFECT 11
//WILL HELP FOR FIREWORKS (effect_pathmove and effect_pathspiral)
void effect_pathspiral (int iterations, int delay){
    3b76:	9f 92       	push	r9
    3b78:	af 92       	push	r10
    3b7a:	bf 92       	push	r11
    3b7c:	cf 92       	push	r12
    3b7e:	df 92       	push	r13
    3b80:	ef 92       	push	r14
    3b82:	ff 92       	push	r15
    3b84:	0f 93       	push	r16
    3b86:	1f 93       	push	r17
    3b88:	df 93       	push	r29
    3b8a:	cf 93       	push	r28
    3b8c:	cd b7       	in	r28, 0x3d	; 61
    3b8e:	de b7       	in	r29, 0x3e	; 62
    3b90:	60 97       	sbiw	r28, 0x10	; 16
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	5c 01       	movw	r10, r24
    3b9e:	6b 01       	movw	r12, r22
	int z, i;
	z = 4;
	unsigned char path[16];
	
	font_getpath(1,path,16);
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	8e 01       	movw	r16, r28
    3ba4:	0f 5f       	subi	r16, 0xFF	; 255
    3ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba8:	b8 01       	movw	r22, r16
    3baa:	40 e1       	ldi	r20, 0x10	; 16
    3bac:	50 e0       	ldi	r21, 0x00	; 0
    3bae:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <font_getpath>
    3bb2:	ee 24       	eor	r14, r14
    3bb4:	ff 24       	eor	r15, r15
	
	for (i = 0; i < iterations; i++){
		setvoxel(4,0,i%8);
		delay_ms(delay);
		effect_pathmove(path, 28);
    3bb6:	90 2e       	mov	r9, r16
    3bb8:	01 2f       	mov	r16, r17
    3bba:	15 c0       	rjmp	.+42     	; 0x3be6 <effect_pathspiral+0x70>
	unsigned char path[16];
	
	font_getpath(1,path,16);
	
	for (i = 0; i < iterations; i++){
		setvoxel(4,0,i%8);
    3bbc:	a7 01       	movw	r20, r14
    3bbe:	47 70       	andi	r20, 0x07	; 7
    3bc0:	50 70       	andi	r21, 0x00	; 0
    3bc2:	84 e0       	ldi	r24, 0x04	; 4
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	60 e0       	ldi	r22, 0x00	; 0
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setvoxel>
		delay_ms(delay);
    3bce:	c6 01       	movw	r24, r12
    3bd0:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
		effect_pathmove(path, 28);
    3bd4:	89 2d       	mov	r24, r9
    3bd6:	90 2f       	mov	r25, r16
    3bd8:	6c e1       	ldi	r22, 0x1C	; 28
    3bda:	70 e0       	ldi	r23, 0x00	; 0
    3bdc:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <effect_pathmove>
	z = 4;
	unsigned char path[16];
	
	font_getpath(1,path,16);
	
	for (i = 0; i < iterations; i++){
    3be0:	08 94       	sec
    3be2:	e1 1c       	adc	r14, r1
    3be4:	f1 1c       	adc	r15, r1
    3be6:	ea 14       	cp	r14, r10
    3be8:	fb 04       	cpc	r15, r11
    3bea:	44 f3       	brlt	.-48     	; 0x3bbc <effect_pathspiral+0x46>
		setvoxel(4,0,i%8);
		delay_ms(delay);
		effect_pathmove(path, 28);
	}
}
    3bec:	60 96       	adiw	r28, 0x10	; 16
    3bee:	0f b6       	in	r0, 0x3f	; 63
    3bf0:	f8 94       	cli
    3bf2:	de bf       	out	0x3e, r29	; 62
    3bf4:	0f be       	out	0x3f, r0	; 63
    3bf6:	cd bf       	out	0x3d, r28	; 61
    3bf8:	cf 91       	pop	r28
    3bfa:	df 91       	pop	r29
    3bfc:	1f 91       	pop	r17
    3bfe:	0f 91       	pop	r16
    3c00:	ff 90       	pop	r15
    3c02:	ef 90       	pop	r14
    3c04:	df 90       	pop	r13
    3c06:	cf 90       	pop	r12
    3c08:	bf 90       	pop	r11
    3c0a:	af 90       	pop	r10
    3c0c:	9f 90       	pop	r9
    3c0e:	08 95       	ret

00003c10 <effect_planboing>:
	}
}

//EFFECT 6
// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed){
    3c10:	ef 92       	push	r14
    3c12:	ff 92       	push	r15
    3c14:	0f 93       	push	r16
    3c16:	1f 93       	push	r17
    3c18:	e8 2e       	mov	r14, r24
    3c1a:	f6 2e       	mov	r15, r22
    3c1c:	07 2f       	mov	r16, r23
    3c1e:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	for (i=0;i<8;i++){
		fill(0x00);
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
        setplane(plane, i);
    3c26:	8e 2d       	mov	r24, r14
    3c28:	61 2f       	mov	r22, r17
    3c2a:	0e 94 18 03 	call	0x630	; 0x630 <setplane>
		delay_ms(speed);
    3c2e:	8f 2d       	mov	r24, r15
    3c30:	90 2f       	mov	r25, r16
    3c32:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    3c36:	1f 5f       	subi	r17, 0xFF	; 255

//EFFECT 6
// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed){
	int i;
	for (i=0;i<8;i++){
    3c38:	18 30       	cpi	r17, 0x08	; 8
    3c3a:	91 f7       	brne	.-28     	; 0x3c20 <effect_planboing+0x10>
    3c3c:	17 e0       	ldi	r17, 0x07	; 7
        setplane(plane, i);
		delay_ms(speed);
	}
	
	for (i=7;i>=0;i--){
		fill(0x00);
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
        setplane(plane,i);
    3c44:	8e 2d       	mov	r24, r14
    3c46:	61 2f       	mov	r22, r17
    3c48:	0e 94 18 03 	call	0x630	; 0x630 <setplane>
		delay_ms(speed);
    3c4c:	8f 2d       	mov	r24, r15
    3c4e:	90 2f       	mov	r25, r16
    3c50:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    3c54:	11 50       	subi	r17, 0x01	; 1
    3c56:	98 f7       	brcc	.-26     	; 0x3c3e <effect_planboing+0x2e>
	}
}
    3c58:	1f 91       	pop	r17
    3c5a:	0f 91       	pop	r16
    3c5c:	ff 90       	pop	r15
    3c5e:	ef 90       	pop	r14
    3c60:	08 95       	ret

00003c62 <effect_box_woopwoop>:
	        fill(0x00);
        }
    }
}
// Creates a wireframe box that shrinks or grows out from the center of the cube.
void effect_box_woopwoop (int delay, int grow){
    3c62:	8f 92       	push	r8
    3c64:	9f 92       	push	r9
    3c66:	af 92       	push	r10
    3c68:	bf 92       	push	r11
    3c6a:	cf 92       	push	r12
    3c6c:	df 92       	push	r13
    3c6e:	ef 92       	push	r14
    3c70:	ff 92       	push	r15
    3c72:	0f 93       	push	r16
    3c74:	1f 93       	push	r17
    3c76:	cf 93       	push	r28
    3c78:	df 93       	push	r29
    3c7a:	5c 01       	movw	r10, r24
    3c7c:	6b 01       	movw	r12, r22
	int i,ii;
	
	fill(0x00);
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    3c84:	c0 e0       	ldi	r28, 0x00	; 0
    3c86:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<4;i++){
        ii = i;
        if (grow > 0) {
    3c88:	93 e0       	ldi	r25, 0x03	; 3
    3c8a:	89 2e       	mov	r8, r25
    3c8c:	91 2c       	mov	r9, r1
    3c8e:	1c 14       	cp	r1, r12
    3c90:	1d 04       	cpc	r1, r13
    3c92:	14 f0       	brlt	.+4      	; 0x3c98 <effect_box_woopwoop+0x36>
    3c94:	ce 01       	movw	r24, r28
    3c96:	03 c0       	rjmp	.+6      	; 0x3c9e <effect_box_woopwoop+0x3c>
    3c98:	c4 01       	movw	r24, r8
    3c9a:	8c 1b       	sub	r24, r28
    3c9c:	9d 0b       	sbc	r25, r29
			ii = 3-i;
		}
		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
    3c9e:	ac 01       	movw	r20, r24
    3ca0:	4c 5f       	subi	r20, 0xFC	; 252
    3ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ca4:	74 01       	movw	r14, r8
    3ca6:	e8 1a       	sub	r14, r24
    3ca8:	f9 0a       	sbc	r15, r25
    3caa:	ca 01       	movw	r24, r20
    3cac:	ba 01       	movw	r22, r20
    3cae:	97 01       	movw	r18, r14
    3cb0:	87 01       	movw	r16, r14
    3cb2:	0e 94 85 04 	call	0x90a	; 0x90a <box_wireframe>
		delay_ms(delay);
    3cb6:	c5 01       	movw	r24, r10
    3cb8:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
		fill(0x00);
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
// Creates a wireframe box that shrinks or grows out from the center of the cube.
void effect_box_woopwoop (int delay, int grow){
	int i,ii;
	
	fill(0x00);
	for (i=0;i<4;i++){
    3cc2:	21 96       	adiw	r28, 0x01	; 1
    3cc4:	c4 30       	cpi	r28, 0x04	; 4
    3cc6:	d1 05       	cpc	r29, r1
    3cc8:	11 f7       	brne	.-60     	; 0x3c8e <effect_box_woopwoop+0x2c>
		}
		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
		delay_ms(delay);
		fill(0x00);
	}
}
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	1f 91       	pop	r17
    3cd0:	0f 91       	pop	r16
    3cd2:	ff 90       	pop	r15
    3cd4:	ef 90       	pop	r14
    3cd6:	df 90       	pop	r13
    3cd8:	cf 90       	pop	r12
    3cda:	bf 90       	pop	r11
    3cdc:	af 90       	pop	r10
    3cde:	9f 90       	pop	r9
    3ce0:	8f 90       	pop	r8
    3ce2:	08 95       	ret

00003ce4 <effect_box_shrink_grow>:
		}
	}
}

//EFFECT 5
void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay){
    3ce4:	2f 92       	push	r2
    3ce6:	3f 92       	push	r3
    3ce8:	4f 92       	push	r4
    3cea:	5f 92       	push	r5
    3cec:	6f 92       	push	r6
    3cee:	7f 92       	push	r7
    3cf0:	8f 92       	push	r8
    3cf2:	9f 92       	push	r9
    3cf4:	af 92       	push	r10
    3cf6:	bf 92       	push	r11
    3cf8:	cf 92       	push	r12
    3cfa:	df 92       	push	r13
    3cfc:	ef 92       	push	r14
    3cfe:	ff 92       	push	r15
    3d00:	0f 93       	push	r16
    3d02:	1f 93       	push	r17
    3d04:	df 93       	push	r29
    3d06:	cf 93       	push	r28
    3d08:	00 d0       	rcall	.+0      	; 0x3d0a <effect_box_shrink_grow+0x26>
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
    3d0e:	9a 83       	std	Y+2, r25	; 0x02
    3d10:	89 83       	std	Y+1, r24	; 0x01
    3d12:	4b 01       	movw	r8, r22
    3d14:	1a 01       	movw	r2, r20
    3d16:	29 01       	movw	r4, r18
    3d18:	aa 24       	eor	r10, r10
    3d1a:	bb 24       	eor	r11, r11
                mirror_z();
			}
            if (rot == 1 || rot == 3) {
                mirror_y();
			}
            if (rot == 2 || rot == 3) {
    3d1c:	4e ef       	ldi	r20, 0xFE	; 254
    3d1e:	64 2e       	mov	r6, r20
    3d20:	4f ef       	ldi	r20, 0xFF	; 255
    3d22:	74 2e       	mov	r7, r20
    3d24:	66 0e       	add	r6, r22
    3d26:	77 1e       	adc	r7, r23
    3d28:	4b c0       	rjmp	.+150    	; 0x3dc0 <effect_box_shrink_grow+0xdc>
}

//EFFECT 5
void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay){
	int x, i, xyz;
	for (x=0;x<iterations;x++){
    3d2a:	cc 24       	eor	r12, r12
    3d2c:	dd 24       	eor	r13, r13
		for (i=0;i<16;i++){
            xyz = 7-i; // This reverses counter i between 0 and 7.
            if (i > 7) {
    3d2e:	88 e0       	ldi	r24, 0x08	; 8
    3d30:	c8 16       	cp	r12, r24
    3d32:	d1 04       	cpc	r13, r1
    3d34:	34 f4       	brge	.+12     	; 0x3d42 <effect_box_shrink_grow+0x5e>
    3d36:	37 e0       	ldi	r19, 0x07	; 7
    3d38:	e3 2e       	mov	r14, r19
    3d3a:	f1 2c       	mov	r15, r1
    3d3c:	ec 18       	sub	r14, r12
    3d3e:	fd 08       	sbc	r15, r13
    3d40:	06 c0       	rjmp	.+12     	; 0x3d4e <effect_box_shrink_grow+0x6a>
    3d42:	28 ef       	ldi	r18, 0xF8	; 248
    3d44:	e2 2e       	mov	r14, r18
    3d46:	2f ef       	ldi	r18, 0xFF	; 255
    3d48:	f2 2e       	mov	r15, r18
    3d4a:	ec 0c       	add	r14, r12
    3d4c:	fd 1c       	adc	r15, r13
                xyz = i-8; // at i > 7, i 8-15 becomes xyz 0-7.
            }
            fill(0x00); delay_ms(1);
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
            cli(); // disable interrupts while the cube is being rotated
    3d5c:	f8 94       	cli
			box_wireframe(0,0,0,xyz,xyz,xyz);
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	60 e0       	ldi	r22, 0x00	; 0
    3d64:	70 e0       	ldi	r23, 0x00	; 0
    3d66:	40 e0       	ldi	r20, 0x00	; 0
    3d68:	50 e0       	ldi	r21, 0x00	; 0
    3d6a:	97 01       	movw	r18, r14
    3d6c:	87 01       	movw	r16, r14
    3d6e:	0e 94 85 04 	call	0x90a	; 0x90a <box_wireframe>

            if (flip > 0) {// upside-down
    3d72:	12 14       	cp	r1, r2
    3d74:	13 04       	cpc	r1, r3
    3d76:	14 f4       	brge	.+4      	; 0x3d7c <effect_box_shrink_grow+0x98>
                mirror_z();
    3d78:	0e 94 3d 08 	call	0x107a	; 0x107a <mirror_z>
			}
            if (rot == 1 || rot == 3) {
    3d7c:	91 e0       	ldi	r25, 0x01	; 1
    3d7e:	89 16       	cp	r8, r25
    3d80:	91 04       	cpc	r9, r1
    3d82:	21 f0       	breq	.+8      	; 0x3d8c <effect_box_shrink_grow+0xa8>
    3d84:	e3 e0       	ldi	r30, 0x03	; 3
    3d86:	8e 16       	cp	r8, r30
    3d88:	91 04       	cpc	r9, r1
    3d8a:	11 f4       	brne	.+4      	; 0x3d90 <effect_box_shrink_grow+0xac>
                mirror_y();
    3d8c:	0e 94 de 08 	call	0x11bc	; 0x11bc <mirror_y>
			}
            if (rot == 2 || rot == 3) {
    3d90:	f2 e0       	ldi	r31, 0x02	; 2
    3d92:	6f 16       	cp	r6, r31
    3d94:	71 04       	cpc	r7, r1
    3d96:	10 f4       	brcc	.+4      	; 0x3d9c <effect_box_shrink_grow+0xb8>
                mirror_x();
    3d98:	0e 94 7f 08 	call	0x10fe	; 0x10fe <mirror_x>
            }
            sei(); // enable interrupts
    3d9c:	78 94       	sei
			delay_ms(delay);
    3d9e:	c2 01       	movw	r24, r4
    3da0:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
	        fill(0x00);
    3da4:	80 e0       	ldi	r24, 0x00	; 0
    3da6:	0e 94 8c 03 	call	0x718	; 0x718 <fill>

//EFFECT 5
void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay){
	int x, i, xyz;
	for (x=0;x<iterations;x++){
		for (i=0;i<16;i++){
    3daa:	08 94       	sec
    3dac:	c1 1c       	adc	r12, r1
    3dae:	d1 1c       	adc	r13, r1
    3db0:	80 e1       	ldi	r24, 0x10	; 16
    3db2:	c8 16       	cp	r12, r24
    3db4:	d1 04       	cpc	r13, r1
    3db6:	09 f0       	breq	.+2      	; 0x3dba <effect_box_shrink_grow+0xd6>
    3db8:	ba cf       	rjmp	.-140    	; 0x3d2e <effect_box_shrink_grow+0x4a>
}

//EFFECT 5
void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay){
	int x, i, xyz;
	for (x=0;x<iterations;x++){
    3dba:	08 94       	sec
    3dbc:	a1 1c       	adc	r10, r1
    3dbe:	b1 1c       	adc	r11, r1
    3dc0:	e9 81       	ldd	r30, Y+1	; 0x01
    3dc2:	fa 81       	ldd	r31, Y+2	; 0x02
    3dc4:	ae 16       	cp	r10, r30
    3dc6:	bf 06       	cpc	r11, r31
    3dc8:	0c f4       	brge	.+2      	; 0x3dcc <effect_box_shrink_grow+0xe8>
    3dca:	af cf       	rjmp	.-162    	; 0x3d2a <effect_box_shrink_grow+0x46>
            sei(); // enable interrupts
			delay_ms(delay);
	        fill(0x00);
        }
    }
}
    3dcc:	0f 90       	pop	r0
    3dce:	0f 90       	pop	r0
    3dd0:	cf 91       	pop	r28
    3dd2:	df 91       	pop	r29
    3dd4:	1f 91       	pop	r17
    3dd6:	0f 91       	pop	r16
    3dd8:	ff 90       	pop	r15
    3dda:	ef 90       	pop	r14
    3ddc:	df 90       	pop	r13
    3dde:	cf 90       	pop	r12
    3de0:	bf 90       	pop	r11
    3de2:	af 90       	pop	r10
    3de4:	9f 90       	pop	r9
    3de6:	8f 90       	pop	r8
    3de8:	7f 90       	pop	r7
    3dea:	6f 90       	pop	r6
    3dec:	5f 90       	pop	r5
    3dee:	4f 90       	pop	r4
    3df0:	3f 90       	pop	r3
    3df2:	2f 90       	pop	r2
    3df4:	08 95       	ret

00003df6 <font_getpath>:
void font_getpath (unsigned char path, unsigned char *destination, int length)
{
	int i;
	int offset = 0;
	
	if (path == 1)
    3df6:	81 30       	cpi	r24, 0x01	; 1
    3df8:	19 f4       	brne	.+6      	; 0x3e00 <font_getpath+0xa>
    3dfa:	8c e1       	ldi	r24, 0x1C	; 28
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	02 c0       	rjmp	.+4      	; 0x3e04 <font_getpath+0xe>
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	dc 01       	movw	r26, r24
    3e06:	a0 58       	subi	r26, 0x80	; 128
    3e08:	bf 4f       	sbci	r27, 0xFF	; 255
    3e0a:	20 e0       	ldi	r18, 0x00	; 0
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	09 c0       	rjmp	.+18     	; 0x3e22 <font_getpath+0x2c>
		offset=28;
	
	for (i = 0; i < length; i++)
		destination[i] = pgm_read_byte(&paths[i+offset]);
    3e10:	fd 01       	movw	r30, r26
    3e12:	84 91       	lpm	r24, Z+
    3e14:	fb 01       	movw	r30, r22
    3e16:	e2 0f       	add	r30, r18
    3e18:	f3 1f       	adc	r31, r19
    3e1a:	80 83       	st	Z, r24
	int offset = 0;
	
	if (path == 1)
		offset=28;
	
	for (i = 0; i < length; i++)
    3e1c:	2f 5f       	subi	r18, 0xFF	; 255
    3e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e20:	11 96       	adiw	r26, 0x01	; 1
    3e22:	24 17       	cp	r18, r20
    3e24:	35 07       	cpc	r19, r21
    3e26:	a4 f3       	brlt	.-24     	; 0x3e10 <font_getpath+0x1a>
		destination[i] = pgm_read_byte(&paths[i+offset]);
}
    3e28:	08 95       	ret

00003e2a <font_getbitmappixel>:
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
	
}

unsigned char font_getbitmappixel ( char bitmap, char x, char y)
{
    3e2a:	1f 93       	push	r17
    3e2c:	14 2f       	mov	r17, r20
	uint8_t tmp = eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)x]);
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	23 e0       	ldi	r18, 0x03	; 3
    3e32:	88 0f       	add	r24, r24
    3e34:	99 1f       	adc	r25, r25
    3e36:	2a 95       	dec	r18
    3e38:	e1 f7       	brne	.-8      	; 0x3e32 <font_getbitmappixel+0x8>
    3e3a:	86 0f       	add	r24, r22
    3e3c:	91 1d       	adc	r25, r1
    3e3e:	89 53       	subi	r24, 0x39	; 57
    3e40:	9e 4f       	sbci	r25, 0xFE	; 254
    3e42:	0e 94 b0 21 	call	0x4360	; 0x4360 <__eerd_byte_m32>
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	02 c0       	rjmp	.+4      	; 0x3e4e <font_getbitmappixel+0x24>
    3e4a:	95 95       	asr	r25
    3e4c:	87 95       	ror	r24
    3e4e:	1a 95       	dec	r17
    3e50:	e2 f7       	brpl	.-8      	; 0x3e4a <font_getbitmappixel+0x20>
	return (tmp >> y) & 0x01;
}
    3e52:	81 70       	andi	r24, 0x01	; 1
    3e54:	1f 91       	pop	r17
    3e56:	08 95       	ret

00003e58 <font_getbitmap>:
    for (i = 0; i < 5; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
}

void font_getbitmap (char bitmap, unsigned char dst[8])
{
    3e58:	ef 92       	push	r14
    3e5a:	ff 92       	push	r15
    3e5c:	0f 93       	push	r16
    3e5e:	1f 93       	push	r17
    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
    3e64:	7b 01       	movw	r14, r22
    3e66:	c8 2f       	mov	r28, r24
    3e68:	d0 e0       	ldi	r29, 0x00	; 0
    3e6a:	33 e0       	ldi	r19, 0x03	; 3
    3e6c:	cc 0f       	add	r28, r28
    3e6e:	dd 1f       	adc	r29, r29
    3e70:	3a 95       	dec	r19
    3e72:	e1 f7       	brne	.-8      	; 0x3e6c <font_getbitmap+0x14>
    3e74:	c9 53       	subi	r28, 0x39	; 57
    3e76:	de 4f       	sbci	r29, 0xFE	; 254
    3e78:	00 e0       	ldi	r16, 0x00	; 0
    3e7a:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	
    for (i = 0; i < 8; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
    3e7c:	ce 01       	movw	r24, r28
    3e7e:	0e 94 b0 21 	call	0x4360	; 0x4360 <__eerd_byte_m32>
    3e82:	f7 01       	movw	r30, r14
    3e84:	e0 0f       	add	r30, r16
    3e86:	f1 1f       	adc	r31, r17
    3e88:	80 83       	st	Z, r24

void font_getbitmap (char bitmap, unsigned char dst[8])
{
	int i;
	
    for (i = 0; i < 8; i++)
    3e8a:	0f 5f       	subi	r16, 0xFF	; 255
    3e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8e:	21 96       	adiw	r28, 0x01	; 1
    3e90:	08 30       	cpi	r16, 0x08	; 8
    3e92:	11 05       	cpc	r17, r1
    3e94:	99 f7       	brne	.-26     	; 0x3e7c <font_getbitmap+0x24>
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
	
}
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28
    3e9a:	1f 91       	pop	r17
    3e9c:	0f 91       	pop	r16
    3e9e:	ff 90       	pop	r15
    3ea0:	ef 90       	pop	r14
    3ea2:	08 95       	ret

00003ea4 <font_getchar>:
	for (i = 0; i < length; i++)
		destination[i] = pgm_read_byte(&paths[i+offset]);
}

void font_getchar (char chr, unsigned char dst[5])
{
    3ea4:	ef 92       	push	r14
    3ea6:	ff 92       	push	r15
    3ea8:	0f 93       	push	r16
    3eaa:	1f 93       	push	r17
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	7b 01       	movw	r14, r22
    3eb2:	80 52       	subi	r24, 0x20	; 32
    3eb4:	95 e0       	ldi	r25, 0x05	; 5
    3eb6:	89 9f       	mul	r24, r25
    3eb8:	80 01       	movw	r16, r0
    3eba:	11 24       	eor	r1, r1
    3ebc:	00 50       	subi	r16, 0x00	; 0
    3ebe:	10 40       	sbci	r17, 0x00	; 0
    3ec0:	c0 e0       	ldi	r28, 0x00	; 0
    3ec2:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	chr -= 32; // our bitmap font starts at ascii char 32.
	
    for (i = 0; i < 5; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
    3ec4:	c8 01       	movw	r24, r16
    3ec6:	0e 94 b0 21 	call	0x4360	; 0x4360 <__eerd_byte_m32>
    3eca:	f7 01       	movw	r30, r14
    3ecc:	ec 0f       	add	r30, r28
    3ece:	fd 1f       	adc	r31, r29
    3ed0:	80 83       	st	Z, r24
void font_getchar (char chr, unsigned char dst[5])
{
	int i;
	chr -= 32; // our bitmap font starts at ascii char 32.
	
    for (i = 0; i < 5; i++)
    3ed2:	21 96       	adiw	r28, 0x01	; 1
    3ed4:	0f 5f       	subi	r16, 0xFF	; 255
    3ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed8:	c5 30       	cpi	r28, 0x05	; 5
    3eda:	d1 05       	cpc	r29, r1
    3edc:	99 f7       	brne	.-26     	; 0x3ec4 <font_getchar+0x20>
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
}
    3ede:	df 91       	pop	r29
    3ee0:	cf 91       	pop	r28
    3ee2:	1f 91       	pop	r17
    3ee4:	0f 91       	pop	r16
    3ee6:	ff 90       	pop	r15
    3ee8:	ef 90       	pop	r14
    3eea:	08 95       	ret

00003eec <launch_effect>:
#include "launch_effect.h"
#include "effect.h"
#include "draw.h"

void launch_effect (int effect){
    3eec:	0f 93       	push	r16
    3eee:	1f 93       	push	r17
    3ef0:	18 2f       	mov	r17, r24
    3ef2:	09 2f       	mov	r16, r25
    unsigned char ii;
	fill(0x00);
    3ef4:	80 e0       	ldi	r24, 0x00	; 0
    3ef6:	0e 94 8c 03 	call	0x718	; 0x718 <fill>

	switch (effect){
    3efa:	e1 2f       	mov	r30, r17
    3efc:	f0 2f       	mov	r31, r16
    3efe:	e6 31       	cpi	r30, 0x16	; 22
    3f00:	f1 05       	cpc	r31, r1
    3f02:	08 f0       	brcs	.+2      	; 0x3f06 <launch_effect+0x1a>
    3f04:	a2 c1       	rjmp	.+836    	; 0x424a <launch_effect+0x35e>
    3f06:	e6 5d       	subi	r30, 0xD6	; 214
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	ee 0f       	add	r30, r30
    3f0c:	ff 1f       	adc	r31, r31
    3f0e:	05 90       	lpm	r0, Z+
    3f10:	f4 91       	lpm	r31, Z+
    3f12:	e0 2d       	mov	r30, r0
    3f14:	09 94       	ijmp
			explosing_sphere(1000, 20);
			break;
		*/
		
		case 0x00:
			snake(700, 500);		//int delay, int iterations, uint8_t snake_length
    3f16:	8c eb       	ldi	r24, 0xBC	; 188
    3f18:	92 e0       	ldi	r25, 0x02	; 2
    3f1a:	64 ef       	ldi	r22, 0xF4	; 244
    3f1c:	71 e0       	ldi	r23, 0x01	; 1
    3f1e:	0e 94 0d 0c 	call	0x181a	; 0x181a <snake>
    3f22:	93 c1       	rjmp	.+806    	; 0x424a <launch_effect+0x35e>
			break;
		
		case 1:
			walk_through_walls(300, 3);		//int delay, int iterations
    3f24:	8c e2       	ldi	r24, 0x2C	; 44
    3f26:	91 e0       	ldi	r25, 0x01	; 1
    3f28:	63 e0       	ldi	r22, 0x03	; 3
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <walk_through_walls>
    3f30:	8c c1       	rjmp	.+792    	; 0x424a <launch_effect+0x35e>
			break;
		
		case 2:
			bomb(300, 50);		//int delay, int iterations
    3f32:	8c e2       	ldi	r24, 0x2C	; 44
    3f34:	91 e0       	ldi	r25, 0x01	; 1
    3f36:	62 e3       	ldi	r22, 0x32	; 50
    3f38:	70 e0       	ldi	r23, 0x00	; 0
    3f3a:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <bomb>
    3f3e:	85 c1       	rjmp	.+778    	; 0x424a <launch_effect+0x35e>
			break;
		
		case 3:
			crazy_straw(250, 100);		//int delay, int iterations
    3f40:	8a ef       	ldi	r24, 0xFA	; 250
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	64 e6       	ldi	r22, 0x64	; 100
    3f46:	70 e0       	ldi	r23, 0x00	; 0
    3f48:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <crazy_straw>
    3f4c:	7e c1       	rjmp	.+764    	; 0x424a <launch_effect+0x35e>
	/*	case 0x00:
			fireworks(10, 400,600, 5, 20);		//int iterations, int delay, int explode_speed, uint8_t explode_range, uint8_t explode_density
			break;
	*/	
		case 4:
			moving_boxes(400,150);			//int delay, int iterations
    3f4e:	80 e9       	ldi	r24, 0x90	; 144
    3f50:	91 e0       	ldi	r25, 0x01	; 1
    3f52:	66 e9       	ldi	r22, 0x96	; 150
    3f54:	70 e0       	ldi	r23, 0x00	; 0
    3f56:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <moving_boxes>
    3f5a:	77 c1       	rjmp	.+750    	; 0x424a <launch_effect+0x35e>
			break;
		
		case 5:
			diagonal_triangle(400, 20);		//int delay, int iterations
    3f5c:	80 e9       	ldi	r24, 0x90	; 144
    3f5e:	91 e0       	ldi	r25, 0x01	; 1
    3f60:	64 e1       	ldi	r22, 0x14	; 20
    3f62:	70 e0       	ldi	r23, 0x00	; 0
    3f64:	0e 94 c5 0c 	call	0x198a	; 0x198a <diagonal_triangle>
    3f68:	70 c1       	rjmp	.+736    	; 0x424a <launch_effect+0x35e>
			break;
		
		case 6:
			planes_exchange(500, 40);		//int delay, int iterations
    3f6a:	84 ef       	ldi	r24, 0xF4	; 244
    3f6c:	91 e0       	ldi	r25, 0x01	; 1
    3f6e:	68 e2       	ldi	r22, 0x28	; 40
    3f70:	70 e0       	ldi	r23, 0x00	; 0
    3f72:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <planes_exchange>
    3f76:	69 c1       	rjmp	.+722    	; 0x424a <launch_effect+0x35e>
			break;
		
		case 7:
			planes_in_order(500, 7);		//int delay, int iterations
    3f78:	84 ef       	ldi	r24, 0xF4	; 244
    3f7a:	91 e0       	ldi	r25, 0x01	; 1
    3f7c:	67 e0       	ldi	r22, 0x07	; 7
    3f7e:	70 e0       	ldi	r23, 0x00	; 0
    3f80:	0e 94 2b 1a 	call	0x3456	; 0x3456 <planes_in_order>
    3f84:	62 c1       	rjmp	.+708    	; 0x424a <launch_effect+0x35e>
			break;
		
		case 8:
			border_box(350, 5);				//int delay, int iterations
    3f86:	8e e5       	ldi	r24, 0x5E	; 94
    3f88:	91 e0       	ldi	r25, 0x01	; 1
    3f8a:	65 e0       	ldi	r22, 0x05	; 5
    3f8c:	70 e0       	ldi	r23, 0x00	; 0
    3f8e:	0e 94 c8 14 	call	0x2990	; 0x2990 <border_box>
    3f92:	5b c1       	rjmp	.+694    	; 0x424a <launch_effect+0x35e>
			break;
		
		case 9:
			effect_rain(300, 300);			//iterations, delay
    3f94:	8c e2       	ldi	r24, 0x2C	; 44
    3f96:	91 e0       	ldi	r25, 0x01	; 1
    3f98:	6c e2       	ldi	r22, 0x2C	; 44
    3f9a:	71 e0       	ldi	r23, 0x01	; 1
    3f9c:	0e 94 34 17 	call	0x2e68	; 0x2e68 <effect_rain>
    3fa0:	54 c1       	rjmp	.+680    	; 0x424a <launch_effect+0x35e>
			break;

		//OK
		case 10:
			sendvoxels_rand_z(20,220,2000);		//iterations, delay, wait
    3fa2:	84 e1       	ldi	r24, 0x14	; 20
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	6c ed       	ldi	r22, 0xDC	; 220
    3fa8:	70 e0       	ldi	r23, 0x00	; 0
    3faa:	40 ed       	ldi	r20, 0xD0	; 208
    3fac:	57 e0       	ldi	r21, 0x07	; 7
    3fae:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <sendvoxels_rand_z>
    3fb2:	4b c1       	rjmp	.+662    	; 0x424a <launch_effect+0x35e>
			break;

		//OK
		case 11:
			effect_random_filler(5,1);		//delay, state
    3fb4:	85 e0       	ldi	r24, 0x05	; 5
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	61 e0       	ldi	r22, 0x01	; 1
    3fba:	70 e0       	ldi	r23, 0x00	; 0
    3fbc:	0e 94 46 1c 	call	0x388c	; 0x388c <effect_random_filler>
			effect_random_filler(5,0);		//delay, state
    3fc0:	85 e0       	ldi	r24, 0x05	; 5
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	60 e0       	ldi	r22, 0x00	; 0
    3fc6:	70 e0       	ldi	r23, 0x00	; 0
    3fc8:	0e 94 46 1c 	call	0x388c	; 0x388c <effect_random_filler>
			effect_random_filler(5,1);		//delay, state
    3fcc:	85 e0       	ldi	r24, 0x05	; 5
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	61 e0       	ldi	r22, 0x01	; 1
    3fd2:	70 e0       	ldi	r23, 0x00	; 0
    3fd4:	0e 94 46 1c 	call	0x388c	; 0x388c <effect_random_filler>
			effect_random_filler(5,0);		//delay, state
    3fd8:	85 e0       	ldi	r24, 0x05	; 5
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	60 e0       	ldi	r22, 0x00	; 0
    3fde:	70 e0       	ldi	r23, 0x00	; 0
    3fe0:	0e 94 46 1c 	call	0x388c	; 0x388c <effect_random_filler>
    3fe4:	32 c1       	rjmp	.+612    	; 0x424a <launch_effect+0x35e>
			break;

		//OK
		case 12:
			effect_z_updown(20, 400);		//iterations, delay
    3fe6:	84 e1       	ldi	r24, 0x14	; 20
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	60 e9       	ldi	r22, 0x90	; 144
    3fec:	71 e0       	ldi	r23, 0x01	; 1
    3fee:	0e 94 31 11 	call	0x2262	; 0x2262 <effect_z_updown>
    3ff2:	2b c1       	rjmp	.+598    	; 0x424a <launch_effect+0x35e>
			break;

		//OK
		case 13:
			effect_blinky2(750, 100, 1000);		//delay, delayFill, wait
    3ff4:	8e ee       	ldi	r24, 0xEE	; 238
    3ff6:	92 e0       	ldi	r25, 0x02	; 2
    3ff8:	64 e6       	ldi	r22, 0x64	; 100
    3ffa:	70 e0       	ldi	r23, 0x00	; 0
    3ffc:	48 ee       	ldi	r20, 0xE8	; 232
    3ffe:	53 e0       	ldi	r21, 0x03	; 3
    4000:	0e 94 f6 09 	call	0x13ec	; 0x13ec <effect_blinky2>
    4004:	22 c1       	rjmp	.+580    	; 0x424a <launch_effect+0x35e>
			break;
    4006:	00 e0       	ldi	r16, 0x00	; 0
    4008:	10 e0       	ldi	r17, 0x00	; 0

		//OK
		case 14: 
            for (ii=0;ii<8;ii++) {
				effect_box_shrink_grow (2, ii%4, ii & 0x04, 450);		//iterations, rot, flip, delay
    400a:	b8 01       	movw	r22, r16
    400c:	63 70       	andi	r22, 0x03	; 3
    400e:	70 70       	andi	r23, 0x00	; 0
    4010:	a8 01       	movw	r20, r16
    4012:	44 70       	andi	r20, 0x04	; 4
    4014:	50 70       	andi	r21, 0x00	; 0
    4016:	82 e0       	ldi	r24, 0x02	; 2
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	22 ec       	ldi	r18, 0xC2	; 194
    401c:	31 e0       	ldi	r19, 0x01	; 1
    401e:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <effect_box_shrink_grow>
    4022:	0f 5f       	subi	r16, 0xFF	; 255
    4024:	1f 4f       	sbci	r17, 0xFF	; 255
			effect_blinky2(750, 100, 1000);		//delay, delayFill, wait
			break;

		//OK
		case 14: 
            for (ii=0;ii<8;ii++) {
    4026:	08 30       	cpi	r16, 0x08	; 8
    4028:	11 05       	cpc	r17, r1
    402a:	79 f7       	brne	.-34     	; 0x400a <launch_effect+0x11e>
				effect_box_shrink_grow (2, ii%4, ii & 0x04, 450);		//iterations, rot, flip, delay
			}

			effect_box_woopwoop(800,0);		//delay, grow
    402c:	80 e2       	ldi	r24, 0x20	; 32
    402e:	93 e0       	ldi	r25, 0x03	; 3
    4030:	60 e0       	ldi	r22, 0x00	; 0
    4032:	70 e0       	ldi	r23, 0x00	; 0
    4034:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <effect_box_woopwoop>
			effect_box_woopwoop(800,1);		//delay, grow
    4038:	80 e2       	ldi	r24, 0x20	; 32
    403a:	93 e0       	ldi	r25, 0x03	; 3
    403c:	61 e0       	ldi	r22, 0x01	; 1
    403e:	70 e0       	ldi	r23, 0x00	; 0
    4040:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <effect_box_woopwoop>
			effect_box_woopwoop(800,0);		//delay, grow
    4044:	80 e2       	ldi	r24, 0x20	; 32
    4046:	93 e0       	ldi	r25, 0x03	; 3
    4048:	60 e0       	ldi	r22, 0x00	; 0
    404a:	70 e0       	ldi	r23, 0x00	; 0
    404c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <effect_box_woopwoop>
			effect_box_woopwoop(800,1);		//delay, grow
    4050:	80 e2       	ldi	r24, 0x20	; 32
    4052:	93 e0       	ldi	r25, 0x03	; 3
    4054:	61 e0       	ldi	r22, 0x01	; 1
    4056:	70 e0       	ldi	r23, 0x00	; 0
    4058:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <effect_box_woopwoop>
    405c:	f6 c0       	rjmp	.+492    	; 0x424a <launch_effect+0x35e>
			break;

		//OK	
		case 15:
			effect_planboing (AXIS_Z, 400);		//plane, speed
    405e:	8a e7       	ldi	r24, 0x7A	; 122
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	60 e9       	ldi	r22, 0x90	; 144
    4064:	71 e0       	ldi	r23, 0x01	; 1
    4066:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <effect_planboing>
			effect_planboing (AXIS_X, 400);		//plane, speed
    406a:	88 e7       	ldi	r24, 0x78	; 120
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	60 e9       	ldi	r22, 0x90	; 144
    4070:	71 e0       	ldi	r23, 0x01	; 1
    4072:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <effect_planboing>
			effect_planboing (AXIS_Y, 400);		//plane, speed
    4076:	89 e7       	ldi	r24, 0x79	; 121
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	60 e9       	ldi	r22, 0x90	; 144
    407c:	71 e0       	ldi	r23, 0x01	; 1
    407e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <effect_planboing>
			effect_planboing (AXIS_Z, 400);		//plane, speed
    4082:	8a e7       	ldi	r24, 0x7A	; 122
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	60 e9       	ldi	r22, 0x90	; 144
    4088:	71 e0       	ldi	r23, 0x01	; 1
    408a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <effect_planboing>
			effect_planboing (AXIS_X, 400);		//plane, speed
    408e:	88 e7       	ldi	r24, 0x78	; 120
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	60 e9       	ldi	r22, 0x90	; 144
    4094:	71 e0       	ldi	r23, 0x01	; 1
    4096:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <effect_planboing>
			effect_planboing (AXIS_Y, 400);		//plane, speed
    409a:	89 e7       	ldi	r24, 0x79	; 121
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	60 e9       	ldi	r22, 0x90	; 144
    40a0:	71 e0       	ldi	r23, 0x01	; 1
    40a2:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <effect_planboing>
			fill(0x00);
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
    40ac:	ce c0       	rjmp	.+412    	; 0x424a <launch_effect+0x35e>
			break;

		//OK
		case 16:
			fill(0x00);
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	0e 94 8c 03 	call	0x718	; 0x718 <fill>
			effect_telcstairs(0,800,0xff);		//invert, delay, val
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	60 e2       	ldi	r22, 0x20	; 32
    40ba:	73 e0       	ldi	r23, 0x03	; 3
    40bc:	4f ef       	ldi	r20, 0xFF	; 255
    40be:	50 e0       	ldi	r21, 0x00	; 0
    40c0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <effect_telcstairs>
			effect_telcstairs(0,800,0x00);		//invert, delay, val
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	60 e2       	ldi	r22, 0x20	; 32
    40ca:	73 e0       	ldi	r23, 0x03	; 3
    40cc:	40 e0       	ldi	r20, 0x00	; 0
    40ce:	50 e0       	ldi	r21, 0x00	; 0
    40d0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <effect_telcstairs>
			effect_telcstairs(1,800,0xff);		//invert, delay, val
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	60 e2       	ldi	r22, 0x20	; 32
    40da:	73 e0       	ldi	r23, 0x03	; 3
    40dc:	4f ef       	ldi	r20, 0xFF	; 255
    40de:	50 e0       	ldi	r21, 0x00	; 0
    40e0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <effect_telcstairs>
			effect_telcstairs(1,800,0xff);		//invert, delay, val
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	60 e2       	ldi	r22, 0x20	; 32
    40ea:	73 e0       	ldi	r23, 0x03	; 3
    40ec:	4f ef       	ldi	r20, 0xFF	; 255
    40ee:	50 e0       	ldi	r21, 0x00	; 0
    40f0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <effect_telcstairs>
    40f4:	aa c0       	rjmp	.+340    	; 0x424a <launch_effect+0x35e>
			break;

		//OK
		//try to make it repeat (to last longer)
		case 17:
			effect_loadbar(700);		//delay
    40f6:	8c eb       	ldi	r24, 0xBC	; 188
    40f8:	92 e0       	ldi	r25, 0x02	; 2
    40fa:	0e 94 59 09 	call	0x12b2	; 0x12b2 <effect_loadbar>
    40fe:	a5 c0       	rjmp	.+330    	; 0x424a <launch_effect+0x35e>
			break;

		//OK
		case 18:
			effect_axis_updown_randsuspend(AXIS_Z, 350,5000,0);		//char axis, delay, sleep, invert
    4100:	8a e7       	ldi	r24, 0x7A	; 122
    4102:	6e e5       	ldi	r22, 0x5E	; 94
    4104:	71 e0       	ldi	r23, 0x01	; 1
    4106:	48 e8       	ldi	r20, 0x88	; 136
    4108:	53 e1       	ldi	r21, 0x13	; 19
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 350,5000,1);		//char axis, delay, sleep, invert
    4112:	8a e7       	ldi	r24, 0x7A	; 122
    4114:	6e e5       	ldi	r22, 0x5E	; 94
    4116:	71 e0       	ldi	r23, 0x01	; 1
    4118:	48 e8       	ldi	r20, 0x88	; 136
    411a:	53 e1       	ldi	r21, 0x13	; 19
    411c:	21 e0       	ldi	r18, 0x01	; 1
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 350,5000,0);		//char axis, delay, sleep, invert
    4124:	8a e7       	ldi	r24, 0x7A	; 122
    4126:	6e e5       	ldi	r22, 0x5E	; 94
    4128:	71 e0       	ldi	r23, 0x01	; 1
    412a:	48 e8       	ldi	r20, 0x88	; 136
    412c:	53 e1       	ldi	r21, 0x13	; 19
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 350,5000,1);		//char axis, delay, sleep, invert
    4136:	8a e7       	ldi	r24, 0x7A	; 122
    4138:	6e e5       	ldi	r22, 0x5E	; 94
    413a:	71 e0       	ldi	r23, 0x01	; 1
    413c:	48 e8       	ldi	r20, 0x88	; 136
    413e:	53 e1       	ldi	r21, 0x13	; 19
    4140:	21 e0       	ldi	r18, 0x01	; 1
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_X, 350,5000,0);		//char axis, delay, sleep, invert
    4148:	88 e7       	ldi	r24, 0x78	; 120
    414a:	6e e5       	ldi	r22, 0x5E	; 94
    414c:	71 e0       	ldi	r23, 0x01	; 1
    414e:	48 e8       	ldi	r20, 0x88	; 136
    4150:	53 e1       	ldi	r21, 0x13	; 19
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_X, 350,5000,1);		//char axis, delay, sleep, invert
    415a:	88 e7       	ldi	r24, 0x78	; 120
    415c:	6e e5       	ldi	r22, 0x5E	; 94
    415e:	71 e0       	ldi	r23, 0x01	; 1
    4160:	48 e8       	ldi	r20, 0x88	; 136
    4162:	53 e1       	ldi	r21, 0x13	; 19
    4164:	21 e0       	ldi	r18, 0x01	; 1
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Y, 350,5000,0);		//char axis, delay, sleep, invert
    416c:	89 e7       	ldi	r24, 0x79	; 121
    416e:	6e e5       	ldi	r22, 0x5E	; 94
    4170:	71 e0       	ldi	r23, 0x01	; 1
    4172:	48 e8       	ldi	r20, 0x88	; 136
    4174:	53 e1       	ldi	r21, 0x13	; 19
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Y, 350,5000,1);		//char axis, delay, sleep, invert
    417e:	89 e7       	ldi	r24, 0x79	; 121
    4180:	6e e5       	ldi	r22, 0x5E	; 94
    4182:	71 e0       	ldi	r23, 0x01	; 1
    4184:	48 e8       	ldi	r20, 0x88	; 136
    4186:	53 e1       	ldi	r21, 0x13	; 19
    4188:	21 e0       	ldi	r18, 0x01	; 1
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_axis_updown_randsuspend>
    4190:	5c c0       	rjmp	.+184    	; 0x424a <launch_effect+0x35e>
			break;

		//OK
		case 19:
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200,1);	//char axis, int origin, int delay, int mode
    4192:	8a e7       	ldi	r24, 0x7A	; 122
    4194:	60 e0       	ldi	r22, 0x00	; 0
    4196:	70 e0       	ldi	r23, 0x00	; 0
    4198:	48 ec       	ldi	r20, 0xC8	; 200
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	21 e0       	ldi	r18, 0x01	; 1
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    41a4:	8c ed       	ldi	r24, 0xDC	; 220
    41a6:	95 e0       	ldi	r25, 0x05	; 5
    41a8:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200,1);	//char axis, int origin, int delay, int mode
    41ac:	8a e7       	ldi	r24, 0x7A	; 122
    41ae:	61 e0       	ldi	r22, 0x01	; 1
    41b0:	70 e0       	ldi	r23, 0x00	; 0
    41b2:	48 ec       	ldi	r20, 0xC8	; 200
    41b4:	50 e0       	ldi	r21, 0x00	; 0
    41b6:	21 e0       	ldi	r18, 0x01	; 1
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    41be:	8c ed       	ldi	r24, 0xDC	; 220
    41c0:	95 e0       	ldi	r25, 0x05	; 5
    41c2:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200,2);	//char axis, int origin, int delay, int mode
    41c6:	8a e7       	ldi	r24, 0x7A	; 122
    41c8:	60 e0       	ldi	r22, 0x00	; 0
    41ca:	70 e0       	ldi	r23, 0x00	; 0
    41cc:	48 ec       	ldi	r20, 0xC8	; 200
    41ce:	50 e0       	ldi	r21, 0x00	; 0
    41d0:	22 e0       	ldi	r18, 0x02	; 2
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    41d8:	8c ed       	ldi	r24, 0xDC	; 220
    41da:	95 e0       	ldi	r25, 0x05	; 5
    41dc:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200,2);	//char axis, int origin, int delay, int mode
    41e0:	8a e7       	ldi	r24, 0x7A	; 122
    41e2:	61 e0       	ldi	r22, 0x01	; 1
    41e4:	70 e0       	ldi	r23, 0x00	; 0
    41e6:	48 ec       	ldi	r20, 0xC8	; 200
    41e8:	50 e0       	ldi	r21, 0x00	; 0
    41ea:	22 e0       	ldi	r18, 0x02	; 2
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    41f2:	8c ed       	ldi	r24, 0xDC	; 220
    41f4:	95 e0       	ldi	r25, 0x05	; 5
    41f6:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Y, 0 , 200,1);	//char axis, int origin, int delay, int mode
    41fa:	89 e7       	ldi	r24, 0x79	; 121
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	70 e0       	ldi	r23, 0x00	; 0
    4200:	48 ec       	ldi	r20, 0xC8	; 200
    4202:	50 e0       	ldi	r21, 0x00	; 0
    4204:	21 e0       	ldi	r18, 0x01	; 1
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    420c:	8c ed       	ldi	r24, 0xDC	; 220
    420e:	95 e0       	ldi	r25, 0x05	; 5
    4210:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Y, 1 , 200,1);	//char axis, int origin, int delay, int mode
    4214:	89 e7       	ldi	r24, 0x79	; 121
    4216:	61 e0       	ldi	r22, 0x01	; 1
    4218:	70 e0       	ldi	r23, 0x00	; 0
    421a:	48 ec       	ldi	r20, 0xC8	; 200
    421c:	50 e0       	ldi	r21, 0x00	; 0
    421e:	21 e0       	ldi	r18, 0x01	; 1
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    4226:	8c ed       	ldi	r24, 0xDC	; 220
    4228:	95 e0       	ldi	r25, 0x05	; 5
    422a:	0e 94 ba 06 	call	0xd74	; 0xd74 <delay_ms>
    422e:	0d c0       	rjmp	.+26     	; 0x424a <launch_effect+0x35e>
			effect_pathspiral(100,500);		//int iterations, int delay
			break;
*/
		//OK
		case 20:
			effect_rand_patharound(500,500);		//int iterations, int delay
    4230:	84 ef       	ldi	r24, 0xF4	; 244
    4232:	91 e0       	ldi	r25, 0x01	; 1
    4234:	64 ef       	ldi	r22, 0xF4	; 244
    4236:	71 e0       	ldi	r23, 0x01	; 1
    4238:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <effect_rand_patharound>
    423c:	06 c0       	rjmp	.+12     	; 0x424a <launch_effect+0x35e>
			break;

		//OK - Fireworks	
		case 21:
			effect_random_sparkle(20, 200);		//int iterations, int delay
    423e:	84 e1       	ldi	r24, 0x14	; 20
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	68 ec       	ldi	r22, 0xC8	; 200
    4244:	70 e0       	ldi	r23, 0x00	; 0
    4246:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <effect_random_sparkle>
		default:
			effect_stringfly2("FAIL");
			break;
*/
	}
}
    424a:	1f 91       	pop	r17
    424c:	0f 91       	pop	r16
    424e:	08 95       	ret

00004250 <__divmodhi4>:
    4250:	97 fb       	bst	r25, 7
    4252:	09 2e       	mov	r0, r25
    4254:	07 26       	eor	r0, r23
    4256:	0a d0       	rcall	.+20     	; 0x426c <__divmodhi4_neg1>
    4258:	77 fd       	sbrc	r23, 7
    425a:	04 d0       	rcall	.+8      	; 0x4264 <__divmodhi4_neg2>
    425c:	0c d0       	rcall	.+24     	; 0x4276 <__udivmodhi4>
    425e:	06 d0       	rcall	.+12     	; 0x426c <__divmodhi4_neg1>
    4260:	00 20       	and	r0, r0
    4262:	1a f4       	brpl	.+6      	; 0x426a <__divmodhi4_exit>

00004264 <__divmodhi4_neg2>:
    4264:	70 95       	com	r23
    4266:	61 95       	neg	r22
    4268:	7f 4f       	sbci	r23, 0xFF	; 255

0000426a <__divmodhi4_exit>:
    426a:	08 95       	ret

0000426c <__divmodhi4_neg1>:
    426c:	f6 f7       	brtc	.-4      	; 0x426a <__divmodhi4_exit>
    426e:	90 95       	com	r25
    4270:	81 95       	neg	r24
    4272:	9f 4f       	sbci	r25, 0xFF	; 255
    4274:	08 95       	ret

00004276 <__udivmodhi4>:
    4276:	aa 1b       	sub	r26, r26
    4278:	bb 1b       	sub	r27, r27
    427a:	51 e1       	ldi	r21, 0x11	; 17
    427c:	07 c0       	rjmp	.+14     	; 0x428c <__udivmodhi4_ep>

0000427e <__udivmodhi4_loop>:
    427e:	aa 1f       	adc	r26, r26
    4280:	bb 1f       	adc	r27, r27
    4282:	a6 17       	cp	r26, r22
    4284:	b7 07       	cpc	r27, r23
    4286:	10 f0       	brcs	.+4      	; 0x428c <__udivmodhi4_ep>
    4288:	a6 1b       	sub	r26, r22
    428a:	b7 0b       	sbc	r27, r23

0000428c <__udivmodhi4_ep>:
    428c:	88 1f       	adc	r24, r24
    428e:	99 1f       	adc	r25, r25
    4290:	5a 95       	dec	r21
    4292:	a9 f7       	brne	.-22     	; 0x427e <__udivmodhi4_loop>
    4294:	80 95       	com	r24
    4296:	90 95       	com	r25
    4298:	bc 01       	movw	r22, r24
    429a:	cd 01       	movw	r24, r26
    429c:	08 95       	ret

0000429e <do_rand>:
    429e:	a0 e0       	ldi	r26, 0x00	; 0
    42a0:	b0 e0       	ldi	r27, 0x00	; 0
    42a2:	e5 e5       	ldi	r30, 0x55	; 85
    42a4:	f1 e2       	ldi	r31, 0x21	; 33
    42a6:	0c 94 fa 21 	jmp	0x43f4	; 0x43f4 <__prologue_saves__+0x10>
    42aa:	ec 01       	movw	r28, r24
    42ac:	a8 80       	ld	r10, Y
    42ae:	b9 80       	ldd	r11, Y+1	; 0x01
    42b0:	ca 80       	ldd	r12, Y+2	; 0x02
    42b2:	db 80       	ldd	r13, Y+3	; 0x03
    42b4:	a1 14       	cp	r10, r1
    42b6:	b1 04       	cpc	r11, r1
    42b8:	c1 04       	cpc	r12, r1
    42ba:	d1 04       	cpc	r13, r1
    42bc:	41 f4       	brne	.+16     	; 0x42ce <do_rand+0x30>
    42be:	84 e2       	ldi	r24, 0x24	; 36
    42c0:	a8 2e       	mov	r10, r24
    42c2:	89 ed       	ldi	r24, 0xD9	; 217
    42c4:	b8 2e       	mov	r11, r24
    42c6:	8b e5       	ldi	r24, 0x5B	; 91
    42c8:	c8 2e       	mov	r12, r24
    42ca:	87 e0       	ldi	r24, 0x07	; 7
    42cc:	d8 2e       	mov	r13, r24
    42ce:	c6 01       	movw	r24, r12
    42d0:	b5 01       	movw	r22, r10
    42d2:	2d e1       	ldi	r18, 0x1D	; 29
    42d4:	33 ef       	ldi	r19, 0xF3	; 243
    42d6:	41 e0       	ldi	r20, 0x01	; 1
    42d8:	50 e0       	ldi	r21, 0x00	; 0
    42da:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divmodsi4>
    42de:	27 ea       	ldi	r18, 0xA7	; 167
    42e0:	31 e4       	ldi	r19, 0x41	; 65
    42e2:	40 e0       	ldi	r20, 0x00	; 0
    42e4:	50 e0       	ldi	r21, 0x00	; 0
    42e6:	0e 94 b8 21 	call	0x4370	; 0x4370 <__mulsi3>
    42ea:	7b 01       	movw	r14, r22
    42ec:	8c 01       	movw	r16, r24
    42ee:	c6 01       	movw	r24, r12
    42f0:	b5 01       	movw	r22, r10
    42f2:	2d e1       	ldi	r18, 0x1D	; 29
    42f4:	33 ef       	ldi	r19, 0xF3	; 243
    42f6:	41 e0       	ldi	r20, 0x01	; 1
    42f8:	50 e0       	ldi	r21, 0x00	; 0
    42fa:	0e 94 d7 21 	call	0x43ae	; 0x43ae <__divmodsi4>
    42fe:	ca 01       	movw	r24, r20
    4300:	b9 01       	movw	r22, r18
    4302:	2c ee       	ldi	r18, 0xEC	; 236
    4304:	34 ef       	ldi	r19, 0xF4	; 244
    4306:	4f ef       	ldi	r20, 0xFF	; 255
    4308:	5f ef       	ldi	r21, 0xFF	; 255
    430a:	0e 94 b8 21 	call	0x4370	; 0x4370 <__mulsi3>
    430e:	6e 0d       	add	r22, r14
    4310:	7f 1d       	adc	r23, r15
    4312:	80 1f       	adc	r24, r16
    4314:	91 1f       	adc	r25, r17
    4316:	97 ff       	sbrs	r25, 7
    4318:	04 c0       	rjmp	.+8      	; 0x4322 <do_rand+0x84>
    431a:	61 50       	subi	r22, 0x01	; 1
    431c:	70 40       	sbci	r23, 0x00	; 0
    431e:	80 40       	sbci	r24, 0x00	; 0
    4320:	90 48       	sbci	r25, 0x80	; 128
    4322:	68 83       	st	Y, r22
    4324:	79 83       	std	Y+1, r23	; 0x01
    4326:	8a 83       	std	Y+2, r24	; 0x02
    4328:	9b 83       	std	Y+3, r25	; 0x03
    432a:	9b 01       	movw	r18, r22
    432c:	3f 77       	andi	r19, 0x7F	; 127
    432e:	c9 01       	movw	r24, r18
    4330:	cd b7       	in	r28, 0x3d	; 61
    4332:	de b7       	in	r29, 0x3e	; 62
    4334:	ea e0       	ldi	r30, 0x0A	; 10
    4336:	0c 94 16 22 	jmp	0x442c	; 0x442c <__epilogue_restores__+0x10>

0000433a <rand_r>:
    433a:	0e 94 4f 21 	call	0x429e	; 0x429e <do_rand>
    433e:	08 95       	ret

00004340 <rand>:
    4340:	80 e6       	ldi	r24, 0x60	; 96
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	0e 94 4f 21 	call	0x429e	; 0x429e <do_rand>
    4348:	08 95       	ret

0000434a <srand>:
    434a:	a0 e0       	ldi	r26, 0x00	; 0
    434c:	b0 e0       	ldi	r27, 0x00	; 0
    434e:	80 93 60 00 	sts	0x0060, r24
    4352:	90 93 61 00 	sts	0x0061, r25
    4356:	a0 93 62 00 	sts	0x0062, r26
    435a:	b0 93 63 00 	sts	0x0063, r27
    435e:	08 95       	ret

00004360 <__eerd_byte_m32>:
    4360:	e1 99       	sbic	0x1c, 1	; 28
    4362:	fe cf       	rjmp	.-4      	; 0x4360 <__eerd_byte_m32>
    4364:	9f bb       	out	0x1f, r25	; 31
    4366:	8e bb       	out	0x1e, r24	; 30
    4368:	e0 9a       	sbi	0x1c, 0	; 28
    436a:	99 27       	eor	r25, r25
    436c:	8d b3       	in	r24, 0x1d	; 29
    436e:	08 95       	ret

00004370 <__mulsi3>:
    4370:	62 9f       	mul	r22, r18
    4372:	d0 01       	movw	r26, r0
    4374:	73 9f       	mul	r23, r19
    4376:	f0 01       	movw	r30, r0
    4378:	82 9f       	mul	r24, r18
    437a:	e0 0d       	add	r30, r0
    437c:	f1 1d       	adc	r31, r1
    437e:	64 9f       	mul	r22, r20
    4380:	e0 0d       	add	r30, r0
    4382:	f1 1d       	adc	r31, r1
    4384:	92 9f       	mul	r25, r18
    4386:	f0 0d       	add	r31, r0
    4388:	83 9f       	mul	r24, r19
    438a:	f0 0d       	add	r31, r0
    438c:	74 9f       	mul	r23, r20
    438e:	f0 0d       	add	r31, r0
    4390:	65 9f       	mul	r22, r21
    4392:	f0 0d       	add	r31, r0
    4394:	99 27       	eor	r25, r25
    4396:	72 9f       	mul	r23, r18
    4398:	b0 0d       	add	r27, r0
    439a:	e1 1d       	adc	r30, r1
    439c:	f9 1f       	adc	r31, r25
    439e:	63 9f       	mul	r22, r19
    43a0:	b0 0d       	add	r27, r0
    43a2:	e1 1d       	adc	r30, r1
    43a4:	f9 1f       	adc	r31, r25
    43a6:	bd 01       	movw	r22, r26
    43a8:	cf 01       	movw	r24, r30
    43aa:	11 24       	eor	r1, r1
    43ac:	08 95       	ret

000043ae <__divmodsi4>:
    43ae:	97 fb       	bst	r25, 7
    43b0:	09 2e       	mov	r0, r25
    43b2:	05 26       	eor	r0, r21
    43b4:	0e d0       	rcall	.+28     	; 0x43d2 <__divmodsi4_neg1>
    43b6:	57 fd       	sbrc	r21, 7
    43b8:	04 d0       	rcall	.+8      	; 0x43c2 <__divmodsi4_neg2>
    43ba:	4b d0       	rcall	.+150    	; 0x4452 <__udivmodsi4>
    43bc:	0a d0       	rcall	.+20     	; 0x43d2 <__divmodsi4_neg1>
    43be:	00 1c       	adc	r0, r0
    43c0:	38 f4       	brcc	.+14     	; 0x43d0 <__divmodsi4_exit>

000043c2 <__divmodsi4_neg2>:
    43c2:	50 95       	com	r21
    43c4:	40 95       	com	r20
    43c6:	30 95       	com	r19
    43c8:	21 95       	neg	r18
    43ca:	3f 4f       	sbci	r19, 0xFF	; 255
    43cc:	4f 4f       	sbci	r20, 0xFF	; 255
    43ce:	5f 4f       	sbci	r21, 0xFF	; 255

000043d0 <__divmodsi4_exit>:
    43d0:	08 95       	ret

000043d2 <__divmodsi4_neg1>:
    43d2:	f6 f7       	brtc	.-4      	; 0x43d0 <__divmodsi4_exit>
    43d4:	90 95       	com	r25
    43d6:	80 95       	com	r24
    43d8:	70 95       	com	r23
    43da:	61 95       	neg	r22
    43dc:	7f 4f       	sbci	r23, 0xFF	; 255
    43de:	8f 4f       	sbci	r24, 0xFF	; 255
    43e0:	9f 4f       	sbci	r25, 0xFF	; 255
    43e2:	08 95       	ret

000043e4 <__prologue_saves__>:
    43e4:	2f 92       	push	r2
    43e6:	3f 92       	push	r3
    43e8:	4f 92       	push	r4
    43ea:	5f 92       	push	r5
    43ec:	6f 92       	push	r6
    43ee:	7f 92       	push	r7
    43f0:	8f 92       	push	r8
    43f2:	9f 92       	push	r9
    43f4:	af 92       	push	r10
    43f6:	bf 92       	push	r11
    43f8:	cf 92       	push	r12
    43fa:	df 92       	push	r13
    43fc:	ef 92       	push	r14
    43fe:	ff 92       	push	r15
    4400:	0f 93       	push	r16
    4402:	1f 93       	push	r17
    4404:	cf 93       	push	r28
    4406:	df 93       	push	r29
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
    440c:	ca 1b       	sub	r28, r26
    440e:	db 0b       	sbc	r29, r27
    4410:	0f b6       	in	r0, 0x3f	; 63
    4412:	f8 94       	cli
    4414:	de bf       	out	0x3e, r29	; 62
    4416:	0f be       	out	0x3f, r0	; 63
    4418:	cd bf       	out	0x3d, r28	; 61
    441a:	09 94       	ijmp

0000441c <__epilogue_restores__>:
    441c:	2a 88       	ldd	r2, Y+18	; 0x12
    441e:	39 88       	ldd	r3, Y+17	; 0x11
    4420:	48 88       	ldd	r4, Y+16	; 0x10
    4422:	5f 84       	ldd	r5, Y+15	; 0x0f
    4424:	6e 84       	ldd	r6, Y+14	; 0x0e
    4426:	7d 84       	ldd	r7, Y+13	; 0x0d
    4428:	8c 84       	ldd	r8, Y+12	; 0x0c
    442a:	9b 84       	ldd	r9, Y+11	; 0x0b
    442c:	aa 84       	ldd	r10, Y+10	; 0x0a
    442e:	b9 84       	ldd	r11, Y+9	; 0x09
    4430:	c8 84       	ldd	r12, Y+8	; 0x08
    4432:	df 80       	ldd	r13, Y+7	; 0x07
    4434:	ee 80       	ldd	r14, Y+6	; 0x06
    4436:	fd 80       	ldd	r15, Y+5	; 0x05
    4438:	0c 81       	ldd	r16, Y+4	; 0x04
    443a:	1b 81       	ldd	r17, Y+3	; 0x03
    443c:	aa 81       	ldd	r26, Y+2	; 0x02
    443e:	b9 81       	ldd	r27, Y+1	; 0x01
    4440:	ce 0f       	add	r28, r30
    4442:	d1 1d       	adc	r29, r1
    4444:	0f b6       	in	r0, 0x3f	; 63
    4446:	f8 94       	cli
    4448:	de bf       	out	0x3e, r29	; 62
    444a:	0f be       	out	0x3f, r0	; 63
    444c:	cd bf       	out	0x3d, r28	; 61
    444e:	ed 01       	movw	r28, r26
    4450:	08 95       	ret

00004452 <__udivmodsi4>:
    4452:	a1 e2       	ldi	r26, 0x21	; 33
    4454:	1a 2e       	mov	r1, r26
    4456:	aa 1b       	sub	r26, r26
    4458:	bb 1b       	sub	r27, r27
    445a:	fd 01       	movw	r30, r26
    445c:	0d c0       	rjmp	.+26     	; 0x4478 <__udivmodsi4_ep>

0000445e <__udivmodsi4_loop>:
    445e:	aa 1f       	adc	r26, r26
    4460:	bb 1f       	adc	r27, r27
    4462:	ee 1f       	adc	r30, r30
    4464:	ff 1f       	adc	r31, r31
    4466:	a2 17       	cp	r26, r18
    4468:	b3 07       	cpc	r27, r19
    446a:	e4 07       	cpc	r30, r20
    446c:	f5 07       	cpc	r31, r21
    446e:	20 f0       	brcs	.+8      	; 0x4478 <__udivmodsi4_ep>
    4470:	a2 1b       	sub	r26, r18
    4472:	b3 0b       	sbc	r27, r19
    4474:	e4 0b       	sbc	r30, r20
    4476:	f5 0b       	sbc	r31, r21

00004478 <__udivmodsi4_ep>:
    4478:	66 1f       	adc	r22, r22
    447a:	77 1f       	adc	r23, r23
    447c:	88 1f       	adc	r24, r24
    447e:	99 1f       	adc	r25, r25
    4480:	1a 94       	dec	r1
    4482:	69 f7       	brne	.-38     	; 0x445e <__udivmodsi4_loop>
    4484:	60 95       	com	r22
    4486:	70 95       	com	r23
    4488:	80 95       	com	r24
    448a:	90 95       	com	r25
    448c:	9b 01       	movw	r18, r22
    448e:	ac 01       	movw	r20, r24
    4490:	bd 01       	movw	r22, r26
    4492:	cf 01       	movw	r24, r30
    4494:	08 95       	ret

00004496 <_exit>:
    4496:	f8 94       	cli

00004498 <__stop_program>:
    4498:	ff cf       	rjmp	.-2      	; 0x4498 <__stop_program>
